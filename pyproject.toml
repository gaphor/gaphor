[tool.poetry]
name = "gaphor"
version = "2.17.0"
description = "Gaphor is the simple modeling tool written in Python."
authors = [
    "Arjan J. Molenaar <gaphor@gmail.com>",
    "Dan Yeaw <dan@yeaw.me>"
]

readme = "README.md"

homepage = "https://gaphor.org/"
repository = "https://github.com/gaphor/gaphor"
documentation = "https://gaphor.readthedocs.io/"

keywords = ["gtk+", "diagram", "UML", "MBSE", "gaphor", "modeling"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: X11 Applications :: GTK",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Topic :: Desktop Environment :: Gnome",
    "Topic :: Multimedia :: Graphics :: Editors :: Vector-Based",
    "Topic :: Software Development :: Documentation",
]

include = ["gaphor/locale/*/LC_MESSAGES/*"]
exclude = ["**/tests", "gaphor/conftest.py" ]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
pycairo = "^1.22.0"
PyGObject = "^3.30"
gaphas = ">3.9.0,<5.0"
generic = "^1.0.0"
tinycss2 = "^1.0.2"
jedi = "^0.18.1"
darkdetect = ">=0.5.1,<0.9.0"
better-exceptions = "^0.3.3"
pydot = "^1.4.2"
sphinx = { version = ">=4.3,<6.0", optional = true }
sphinx-copybutton = { version = "^0.5.0", optional = true }
myst-nb = { version = "^0.17.1", optional = true }
furo = { version = "^2022", optional = true }
pyobjc-framework-cocoa = {version = "^9.0.1", markers = "sys_platform == 'darwin'"}
pygit2 = "^1.11.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.1"
pytest-archon = "^0.0"
pytest-cov = "^4.0.0"
xdoctest = "^1.1.0"
hypothesis = "^6.54.5"
ipython = "^8.5.0"
sphinx = ">=4.3,<6.0"

[tool.poetry.group.lint.dependencies]
pre-commit = ">=2.20,<4.0"

[tool.poetry.group.automation.dependencies]
poethepoet = ">=0.17.1,<0.19.0"

[tool.poetry.group.translation.dependencies]
babel = "^2.10.3"
babelgladeextractor = "^0.7"

[tool.poetry.group.packaging]
optional=true

[tool.poetry.group.packaging.dependencies]
pyinstaller = "^5.7"
pyinstaller-versionfile = "^2.0.0"
semver = "^2.13.0"
tomli = { version = ">=1.2,<3.0", python = "<3.11" }

[tool.poetry.extras]
docs = [ "sphinx", "sphinx-copybutton", "myst-nb", "furo" ]

[tool.poetry.scripts]
gaphor = "gaphor.ui:main"
gaphorconvert = "gaphor.plugins.diagramexport.gaphorconvert:main"

[tool.poetry.plugins."gaphor.appservices"]
"event_manager" = "gaphor.core.eventmanager:EventManager"
"module_loader" = "gaphor.services.moduleloader:ModuleLoader"
"app_file_manager" = "gaphor.ui.appfilemanager:AppFileManager"
"styling" = "gaphor.ui.styling:Styling"
"greeter" = "gaphor.ui.greeter:Greeter"
"help" = "gaphor.ui.help:HelpService"
"self_test" = "gaphor.ui.selftest:SelfTest"
"error_reports" = "gaphor.plugins.errorreports:ErrorReports"

[tool.poetry.plugins."gaphor.modules"]
"general_ui_components" = "gaphor.diagram.general.uicomponents"
"uml_ui_components" = "gaphor.UML.uicomponents"
"sysml_property_pages" = "gaphor.SysML.propertypages"
"c4model_property_pages" = "gaphor.C4Model.propertypages"

[tool.poetry.plugins."gaphor.services"]
"component_registry" = "gaphor.services.componentregistry:ComponentRegistry"
"event_manager" = "gaphor.core.eventmanager:EventManager"
"properties" = "gaphor.services.properties:Properties"
"undo_manager" = "gaphor.services.undomanager:UndoManager"
"element_factory" = "gaphor.core.modeling:ElementFactory"
"element_dispatcher" = "gaphor.core.modeling.elementdispatcher:ElementDispatcher"
"modeling_language" = "gaphor.services.modelinglanguage:ModelingLanguageService"
"file_manager" = "gaphor.ui.filemanager:FileManager"
"recent_files" = "gaphor.ui.recentfiles:RecentFiles"
"main_window" = "gaphor.ui.mainwindow:MainWindow"
"export_menu" = "gaphor.ui.menufragment:MenuFragment"
"tools_menu" = "gaphor.ui.menufragment:MenuFragment"
"copy" = "gaphor.ui.copyservice:CopyService"
"sanitizer" = "gaphor.UML.sanitizerservice:SanitizerService"
"model_browser" = "gaphor.ui.modelbrowser:ModelBrowser"
"toolbox" = "gaphor.ui.toolbox:Toolbox"
"diagrams" = "gaphor.ui.diagrams:Diagrams"
"elementeditor" = "gaphor.ui.elementeditor:ElementEditor"
"consolewindow" = "gaphor.plugins.console.consolewindow:ConsoleWindow"
"diagram_export" = "gaphor.plugins.diagramexport:DiagramExport"
"xmi_export" = "gaphor.plugins.xmiexport:XMIExport"
"auto_layout" = "gaphor.plugins.autolayout:AutoLayoutService"
"model_merge" = "gaphor.ui.modelmerge:ModelMerge"

[tool.poetry.plugins."gaphor.modelinglanguages"]
"Core" = "gaphor.core.modeling.modelinglanguage:CoreModelingLanguage"
"UML" = "gaphor.UML.modelinglanguage:UMLModelingLanguage"
"SysML" = "gaphor.SysML.modelinglanguage:SysMLModelingLanguage"
"C4Model" = "gaphor.C4Model.modelinglanguage:C4ModelLanguage"
"RAAML" = "gaphor.RAAML.modelinglanguage:RAAMLModelingLanguage"

[tool.poetry.plugins."babel.extractors"]
"gaphor" = "gaphor.babel:extract_gaphor"

[tool.poe.tasks]
coremodel.script = """gaphor.codegen.coder:main(
    modelfile='models/Core.gaphor',
    overridesfile='models/Core.override',
    outfile='gaphor/core/modeling/coremodel.py'
    )"""
uml.script = """gaphor.codegen.coder:main(
    modelfile='models/UML.gaphor',
    overridesfile='models/UML.override',
    outfile='gaphor/UML/uml.py',
    supermodelfiles=[('Core', 'models/Core.gaphor')]
    )"""
sysml.script = """gaphor.codegen.coder:main(
    modelfile='models/SysML.gaphor',
    outfile='gaphor/SysML/sysml.py',
    supermodelfiles=[
        ('Core', 'models/Core.gaphor'),
        ('UML', 'models/UML.gaphor')]
    )"""
raaml.script = """gaphor.codegen.coder:main(
    modelfile='models/RAAML.gaphor',
    outfile='gaphor/RAAML/raaml.py',
    supermodelfiles=[
        ('Core', 'models/Core.gaphor'),
        ('UML', 'models/UML.gaphor'),
        ('SysML', 'models/SysML.gaphor')]
    )"""
c4model.script = """gaphor.codegen.coder:main(
    modelfile='models/C4Model.gaphor',
    outfile='gaphor/C4Model/c4model.py',
    supermodelfiles=[('UML', 'models/UML.gaphor')]
    )"""
lint = "pre-commit run --all-files"
docs = { "cwd" = "docs", "shell" = "sphinx-build -b html . _build/html" }
clean = { "shell" = "rm -rf dist build _packaging/dist _packaging/build _packaging/windows/file_version_info.txt docs/_build" }
package = { "cwd" = "_packaging", shell = "pyinstaller -y gaphor.spec"}
win-installer = { "script" = "_packaging.windows.build-win-installer:main" }
appimage-docker-build = "docker build -t ghcr.io/gaphor/gaphor-appimage:2023.3.0 _packaging/appimage"
appimage-docker-build-clean = "docker build --no-cache -t ghcr.io/gaphor/gaphor-appimage:2023.3.0 _packaging/appimage"
appimage-docker-push = "docker push ghcr.io/gaphor/gaphor-appimage:2023.3.0"
appimage-docker-run = "docker run --rm -it --volume $PWD:/gaphor ghcr.io/gaphor/gaphor-appimage:2023.3.0"
gettext-pot = "pybabel extract -o po/gaphor.pot -F po/babel.ini gaphor"
gettext-po = { "script" = "po.build-babel:update_po_files" }
gettext-mo = { "script" = "po.build-babel:compile_mo_files" }
translations = ["gettext-pot", "gettext-po", "gettext-mo"]
icons = { "shell" = "make -C gaphor/ui/icons" }

[tool.poe.executor]
type = "virtualenv"

[tool.pytest.ini_options]
testpaths = [
    "gaphor",
    "tests",
    "docs",
]
python_files = "test_*.py"
addopts = [
    "--xdoctest",
    "--import-mode=importlib",
]
junit_family = "xunit1"

[tool.coverage.run]
source = [ "gaphor" ]
omit = [
    "*/tests/*",
    "gaphor/ui/uipreview.py"
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
known_third_party = ["cairo", "gaphas", "generic", "gi", "pytest", "tinycss2", "tomli"]
skip = "flatpak,.venv,build,dist"
skip_glob = "gaphor/diagram/general/__init__.py,gaphor/UML/__init__.py,gaphor/UML/*/__init__.py,gaphor/RAAML/stpa/__init__.py"

[tool.mypy]
python_version = 3.9
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
check_untyped_defs = true
strict_optional = true
disallow_any_explicit = true
show_error_codes = true
ignore_missing_imports=true
warn_unused_ignores = true
namespace_packages = true

[[tool.mypy.overrides]]
module = [
    "gaphor.core.modeling.coremodel",
    "gaphor.UML.uml",
    "gaphor.SysML.sysml",
]
warn_unused_ignores = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.tests.*"
ignore_errors = true

[tool.ruff]
exclude = [
    ".venv",
    "dist",
    "__init__.py",
    "conftest.py",
    "sysml.py",
    "uml.py",
    "coremodel.py",
    "diagramitems.py",
    "docs/conf.py",
]
ignore = ["E501", "B023", "B905"]
line-length = 88
select = [
    "B",
    "B9",
    "C",
    "E",
    "F",
    "W",
]

[tool.ruff.mccabe]
max-complexity = 18

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
