[tool.poetry]
name = "gaphor"
version = "2.4.0"
description = "Gaphor is the simple modeling tool written in Python."
authors = [
    "Arjan J. Molenaar <gaphor@gmail.com>",
    "Dan Yeaw <dan@yeaw.me>"
]

readme = "README.md"

homepage = "https://gaphor.org/"
repository = "https://github.com/gaphor/gaphor"
documentation = "https://gaphor.readthedocs.io/"

keywords = ["gtk+", "diagram", "UML", "MBSE", "gaphor", "modeling"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: X11 Applications :: GTK",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Topic :: Multimedia :: Graphics :: Editors :: Vector-Based",
    "Topic :: Software Development :: Documentation",
]

exclude = ["**/tests", "gaphor/conftest.py" ]

[tool.poetry.dependencies]
python = "^3.7"
pycairo = "^1.18"
PyGObject = "^3.30"
gaphas = "^3.1.0"
importlib_metadata = ">=1.4,<5.0"
typing_extensions = "^3.7.4"
generic = "^1.0.0"
tinycss2 = "^1.0.2"

[tool.poetry.dev-dependencies]
tomlkit = "^0.7"
pytest = "^6.2"
pytest-cov = "^2.11"
pytest-mock = "^3.6.0"
pytest-runner = "^5.3"
black = "^21.4b2"
mypy = "0.812"
pre-commit = "^2.12"
sphinx = "^3.5"
recommonmark = "^0.7"
sphinx-rtd-theme = "^0.5"
babel = "^2.9.1"
babelgladeextractor = "^0.7"
flake8 = "^3.9"
isort = "^5.8"

[tool.poetry.scripts]
gaphor = 'gaphor.ui:main'
gaphorconvert = 'gaphor.plugins.diagramexport.gaphorconvert:main'

[tool.poetry.plugins."gaphor.appservices"]
"event_manager" = "gaphor.core.eventmanager:EventManager"
"session" = "gaphor.services.session:Session"
"help" = "gaphor.services.helpservice:HelpService"
"app_file_manager" = "gaphor.ui.appfilemanager:AppFileManager"

[tool.poetry.plugins."gaphor.services"]
"component_registry" = "gaphor.services.componentregistry:ComponentRegistry"
"event_manager" = "gaphor.core.eventmanager:EventManager"
"properties" = "gaphor.services.properties:Properties"
"undo_manager" = "gaphor.services.undomanager:UndoManager"
"element_factory" = "gaphor.core.modeling:ElementFactory"
"element_dispatcher" = "gaphor.core.modeling.elementdispatcher:ElementDispatcher"
"modeling_language" = "gaphor.services.modelinglanguage:ModelingLanguageService"
"file_manager" = "gaphor.ui.filemanager:FileManager"
"recent_files" = "gaphor.ui.recentfiles:RecentFiles"
"main_window" = "gaphor.ui.mainwindow:MainWindow"
"export_menu" = "gaphor.ui.menufragment:MenuFragment"
"tools_menu" = "gaphor.ui.menufragment:MenuFragment"
"copy" = "gaphor.services.copyservice:CopyService"
"sanitizer" = "gaphor.UML.sanitizerservice:SanitizerService"
"namespace" = "gaphor.ui.namespace:Namespace"
"toolbox" = "gaphor.ui.toolbox:Toolbox"
"diagrams" = "gaphor.ui.diagrams:Diagrams"
"consolewindow" = "gaphor.plugins.console:ConsoleWindow"
"elementeditor" = "gaphor.ui.elementeditor:ElementEditor"
"diagram_export" = "gaphor.plugins.diagramexport:DiagramExport"
"xmi_export" = "gaphor.plugins.xmiexport:XMIExport"

[tool.poetry.plugins."gaphor.modelinglanguages"]
"UML" = "gaphor.UML.modelinglanguage:UMLModelingLanguage"
"SysML" = "gaphor.SysML.modelinglanguage:SysMLModelingLanguage"
"C4Model" = "gaphor.C4Model.modelinglanguage:C4ModelLanguage"
"RAAML" = "gaphor.RAAML.modelinglanguage:RAAMLModelingLanguage"

[tool.pytest.ini_options]
testpaths = [
    "gaphor",
    "tests",
    "docs",
]
python_files = "test_*.py"

# for coverage: --cov=gaphor/
addopts = "--doctest-modules"

junit_family = "xunit1"
markers = "slow: marks tests as slow (deselect with '-m \"not slow\"')"

[tool.coverage.run]
omit = [
    "*tests*",
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
known_third_party = ["cairo", "gaphas", "generic", "gi", "importlib_metadata", "pytest", "recommonmark", "tinycss2", "tomlkit", "typing_extensions"]
skip = "flatpak,.venv,build,dist"
skip_glob = "gaphor/diagram/general/__init__.py,gaphor/UML/__init__.py,gaphor/UML/*/__init__.py"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
