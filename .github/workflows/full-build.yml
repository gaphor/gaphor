name: Full Build

on:
  push:
  release:
    types: [published, prereleased]
env:
  python_version: '3.10'

jobs:
  skip-check:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v4.0.0
        with:
          concurrent_skipping: 'same_content'
          do_not_skip: '["release", "workflow_dispatch", "schedule"]'

  lint:
    needs: skip-check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4.0.0
        with:
          python-version: ${{ env.python_version }}
      - name: Lint with Pre-commit
        uses: pre-commit/action@v3.0.0
      - name: Check translations
        run: pip install babel && python po/check-babel.py

  linux:
    needs: lint
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      matrix:
        python_version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        id: setup
        with:
          python_version: ${{ matrix.python_version }}
      - name: Install Dependencies and Test
        uses: ./.github/actions/test
        with:
          xvfb_command: 'xvfb-run'
      - name: Upload Code Coverage to Code Climate
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: 05f6288b94a87daa172d3e96a33ec331a4374be7d01eb9a42b3b21c4c550a8ff
        with:
          coverageCommand: poetry run coverage xml
      - name: Install Build Dependencies
        if: "${{ matrix.python_version == env.python_version }}"
        run: poetry install --extras poethepoet
      - name: Create Source Tar and Wheel
        if: "${{ matrix.python_version == env.python_version }}"
        run: |
          poetry run poe gettext-mo
          poetry build
      - name: Upload gaphor-${{ steps.setup.outputs.version }}.tar.gz
        if: "${{ matrix.python_version == env.python_version }}"
        uses: actions/upload-artifact@v3
        with:
          name: gaphor-${{ steps.setup.outputs.version }}.tar.gz
          path: dist/gaphor-${{ steps.setup.outputs.version }}.tar.gz
      - name: Upload gaphor-${{ steps.setup.outputs.version }}-py3-none-any.whl
        if: "${{ matrix.python_version == env.python_version }}"
        uses: actions/upload-artifact@v3
        with:
          name: gaphor-${{ steps.setup.outputs.version }}-py3-none-any.whl
          path: dist/gaphor-${{ steps.setup.outputs.version }}-py3-none-any.whl

  linux-gtk4:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    container:
      image: fedora:latest
    env:
      GAPHOR_USE_GTK: 4
    steps:
      - run: >
          dnf install -y util-linux poetry gcc gtk4 cairo-devel cairo-gobject-devel
          gobject-introspection-devel python3-devel python3-pip xorg-x11-server-Xvfb
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        with:
          python_version: ${{ env.python_version }}
          linux_install: false
      - name: Install Dependencies and Test
        uses: ./.github/actions/test
        with:
          xvfb_command: 'xvfb-run'

  linux-appimage:
    needs: linux
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/packaging/')
    permissions:
      contents: write
    container:
      image: ghcr.io/gaphor/gaphor-appimage:stable
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        id: setup
        with:
          python_version: ${{ env.python_version }}
          linux_install: false
      - name: Build AppImage
        run: |
          jhbuild run poetry install --no-dev --extras pyinstall --extras babel
          poetry run poe gettext-mo
          cp /usr/share/glib-2.0/schemas/gschemas.compiled /root/jhbuild/install/share/glib-2.0/schemas/gschemas.compiled
          jhbuild run poetry run poe package
          cd _packaging/appimage
          jhbuild run make dist
      - name: Upload gaphor-${{ steps.setup.outputs.version }}-x86_64.AppImage
        uses: actions/upload-artifact@v3
        with:
          name: Gaphor-${{ steps.setup.outputs.version }}-x86_64.AppImage
          path: _packaging/dist/Gaphor-${{ steps.setup.outputs.version }}-x86_64.AppImage
      - name: Upload Assets (release only)
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "_packaging/dist/*; dist/*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to PyPI (release only)
        if: github.event_name == 'release'
        run: poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}

  macos:
    needs: lint
    runs-on: macos-latest
    timeout-minutes: 45
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        with:
          python_version: ${{ env.python_version }}
      - name: Install Dependencies and Test
        uses: ./.github/actions/test

  macos-gtk4:
    needs: lint
    runs-on: macos-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    env:
      GAPHOR_USE_GTK: 4
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        with:
          python_version: ${{ env.python_version }}
      - name: Install Dependencies and Test
        uses: ./.github/actions/test

  macos-dmg:
    needs: ["macos"]
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/packaging/')
    permissions:
      contents: write
    timeout-minutes: 45
    env:
      LDFLAGS: -L/usr/local/opt/python@3.10/lib
      PKG_CONFIG_PATH: /usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/python@3.10/lib/pkgconfig:${PKG_CONFIG_PATH:-}
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        id: setup
        with:
          python_version: ${{ env.python_version }}
      - name: Install Build Dependencies
        run: poetry install --no-dev --extras pyinstall --extras babel
      - name: Import codesign certificate
        uses: apple-actions/import-codesign-certs@v1.0.4
        with:
          p12-file-base64: ${{ secrets.BASE64_ENCODED_P12 }}
          p12-password: ${{ secrets.CERTPASSWORD_P12 }}
      - name: Create Signed macOS Application
        run: |
          poetry run poe gettext-mo
          poetry run poe package
      - name: Notarize app
        uses: devbotsxyz/xcode-notarize@v1.0.0
        with:
          product-path: "_packaging/dist/Gaphor.app"
          appstore-connect-username: ${{ secrets.AC_USERNAME }}
          appstore-connect-password: ${{ secrets.AC_PASSWORD }}
      - name: Staple app
        uses: devbotsxyz/xcode-staple@v1.0.0
        with:
          product-path: "_packaging/dist/Gaphor.app"
      - name: Create dmg
        run: >
          cd _packaging

          create-dmg --volname "Gaphor ${{ steps.setup.outputs.version }}"
          --background "macos/background.png"
          --window-pos 200 120 --window-size 700 400 --icon-size 100
          --icon "Gaphor.app" 200 240 --hide-extension "Gaphor.app"
          --app-drop-link 500 240 "dist/Gaphor-${{ steps.setup.outputs.version }}.dmg"
          "dist/Gaphor.app"
      - name: Notarize dmg
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: "_packaging/dist/Gaphor-${{ steps.setup.outputs.version }}.dmg"
          appstore-connect-username: ${{ secrets.AC_USERNAME }}
          appstore-connect-password: ${{ secrets.AC_PASSWORD }}
          primary-bundle-id: org.gaphor.gaphor
      - name: Staple .dmg
        uses: devbotsxyz/xcode-staple@v1.0.0
        with:
          product-path: "_packaging/dist/Gaphor-${{ steps.setup.outputs.version }}.dmg"
      - name: Upload Gaphor-${{ steps.setup.outputs.version }}.dmg
        uses: actions/upload-artifact@v3
        with:
          name: Gaphor-${{ steps.setup.outputs.version }}.dmg
          path: _packaging/dist/Gaphor-${{ steps.setup.outputs.version }}.dmg
      - name: Upload Assets (release only)
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "_packaging/dist/Gaphor-${{ steps.setup.outputs.version }}.dmg"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  gtk-for-windows:
    needs: skip-check
    runs-on: windows-latest
    timeout-minutes: 60
    env:
      # Git revision of gvsbuild we use for to build GTK and the other dependencies
      gvsbuildref: 0ccd3f4e8d21f2748034eb56c0b5348d18f71454
      # Bump this number if you want to force a rebuild of gvsbuild with the same revision
      gvsbuildupdate: 1
    outputs:
      cachekey: ${{ steps.output.outputs.cachekey }}
    steps:
      - name: GTK binaries create dir
        run: mkdir C:\gtk-build\gtk\x64\release
      - name: GTK binaries get from cache
        uses: actions/cache@v3.0.4
        id: cache
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}
      - name: GTK binaries checkout gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3.0.2
        with:
          repository: wingtk/gvsbuild
          ref: ${{ env.gvsbuildref }}
          path: gvsbuild
      - name: Set up Python
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4.0.0
        with:
          python-version: ${{ env.python_version }}
      - name: GTK binaries move git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
      - name: GTK binaries run gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: gvsbuild
        run: >
          python .\build.py build --enable-gi --py-wheel gobject-introspection gtk3 pycairo pygobject gtksourceview4
          adwaita-icon-theme hicolor-icon-theme
      - name: Copy wheels to cached directory
        if: steps.cache.outputs.cache-hit != 'true'
        run: Get-ChildItem C:\gtk-build\build\x64\release\*\dist\*.whl | ForEach-Object -process { cp $_ C:\gtk-build\gtk\x64\release\ }
      - name: GTK binaries restore git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
      - name: GTK binaries output cache key
        id: output
        run: echo "::set-output name=cachekey::gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}"

  windows:
    needs: [lint, gtk-for-windows]
    runs-on: windows-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      cachekey: ${{ needs.gtk-for-windows.outputs.cachekey }}
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        with:
          python_version: ${{ env.python_version }}
          gtk_for_windows_cache_key: ${{ needs.gtk-for-windows.outputs.cachekey }}
      - name: Install Dependencies and Test
        uses: ./.github/actions/test

  windows-installer:
    needs: [windows]
    runs-on: windows-latest
    if: "(github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/packaging/')) && !contains(github.event.head_commit.message, 'skip ci')"
    permissions:
      contents: write
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/setup
        id: setup
        with:
          python_version: ${{ env.python_version }}
          gtk_for_windows_cache_key: ${{ needs.windows.outputs.cachekey }}
      - name: Install Build Dependencies
        run: poetry install --no-dev --extras pyinstall --extras babel
        shell: bash
      - name: Create Windows Installers
        run: |
          poetry run poe gettext-mo
          poetry run poe package
          poetry run poe win-installer
        shell: bash
      - name: Sign Executables
        env:
          timestampUrl: http://timestamp.digicert.com
          installer: "_packaging/dist/gaphor-${{ steps.setup.outputs.version }}-installer.exe"
          portable: "_packaging/dist/gaphor-${{ steps.setup.outputs.version }}-portable.exe"
          password: "${{ secrets.CERTPASSWORD }}"
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath 'certificate.pfx'
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe' sign /f 'certificate.pfx' /tr $env:timestampUrl /td sha256 /fd sha256 /p $env:password $env:installer $env:portable
          Remove-Item 'certificate.pfx'
        shell: PowerShell
      - name: Upload gaphor-${{ steps.setup.outputs.version }}-installer.exe
        uses: actions/upload-artifact@v3
        with:
          name: gaphor-${{ steps.setup.outputs.version }}-installer.exe
          path: _packaging/dist/gaphor-${{ steps.setup.outputs.version }}-installer.exe
      - name: Upload gaphor-${{ steps.setup.outputs.version }}-portable.exe
        uses: actions/upload-artifact@v3
        with:
          name: gaphor-${{ steps.setup.outputs.version }}-portable.exe
          path: _packaging/dist/gaphor-${{ steps.setup.outputs.version }}-portable.exe
      - name: Upload Assets (release only)
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "_packaging/dist/*.exe"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
