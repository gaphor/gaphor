name: Test with Windows

env:
  POETRY_VERSION: 1.1.7

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: [published, prereleased]

jobs:

  windows-build-gtk:
    runs-on: windows-latest
    timeout-minutes: 45
    env:
      # Git revision of gvsbuild we use for to build GTK and the other dependencies
      gvsbuildref: f596eca9924cbfcdd65a6f8e4303f40628dcd654
      # Bump this number if you want to force a rebuild of gvsbuild with the same revision
      gvsbuildupdate: 1
    outputs:
      cachekey: ${{ steps.output.outputs.cachekey }}
    steps:
      - name: GTK binaries create dir
        run: mkdir C:\gtk-build\gtk\x64\release
      - name: GTK binaries get from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}
      - name: GTK binaries checkout gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: gaphor/gvsbuild
          ref: ${{ env.gvsbuildref }}
          path: gvsbuild
      # Temporarily move the preinstalled git, it causes errors related to cygwin.
      - name: GTK binaries move git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
        shell: cmd
      - name: Set up Python
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2.2.2
      - name: GTK binaries run gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: gvsbuild
        run: python .\build.py build -p=x64 --vs-ver=16 --msys-dir=C:\msys64 --enable-gi --py-wheel --gtk3-ver=3.24 gobject-introspection gtk3 pycairo pygobject adwaita-icon-theme hicolor-icon-theme
      - name: Copy wheels to cached directory
        if: steps.cache.outputs.cache-hit != 'true'
        run: Get-ChildItem C:\gtk-build\build\x64\release\*\dist\*.whl | ForEach-Object -process { cp $_ C:\gtk-build\gtk\x64\release\ }
      - name: GTK binaries restore git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
        shell: cmd
      - name: GTK binaries output cache key
        id: output
        run: echo "::set-output name=cachekey::gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}"

  windows:
    needs: windows-build-gtk
    runs-on: windows-latest
    timeout-minutes: 45
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Create GTK binaries dir
        run: mkdir C:\gtk-build\gtk\x64\release
      - name: Get GTK binaries from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: ${{needs.windows-build-gtk.outputs.cachekey}}
      - name: Set up env
        run: |
          echo "PKG_CONFIG=C:\gtk-build\gtk\x64\release\bin\pkgconf.exe" >> $GITHUB_ENV
          echo "C:\gtk-build\gtk\x64\release\bin" >> $GITHUB_PATH
        shell: bash
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.6
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
      - name: Install Poetry and Wheel
        run: |
          pip install poetry==$Env:POETRY_VERSION
          poetry config virtualenvs.in-project true
      - name: Install PyGObject and pycairo
        run: Get-ChildItem C:\gtk-build\gtk\x64\release\*.whl | ForEach-Object -process { poetry run pip install $_ }
      - name: Collect Project Data
        id: meta
        run: .github/scripts/metadata.sh
        shell: bash
      - name: Install Python Dependencies
        run: poetry install
      - name: Test with PyTest
        run: poetry run poe test-all
