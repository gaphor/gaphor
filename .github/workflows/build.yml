name: Build

env:
  POETRY_VERSION: 1.1.7

on:
  push:
  release:
    types: [published, prereleased]

jobs:
  lint:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
      - name: Lint with Pre-commit
        uses: pre-commit/action@v2.0.3

  linux:
    needs: lint
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-20.04
      - name: Install Dependencies
        run: >
          sudo apt-get update -q && sudo apt-get install
          --no-install-recommends -y xvfb python3-dev python3-gi upx
          python3-gi-cairo gir1.2-gtk-3.0 libgirepository1.0-dev libcairo2-dev
      - name: Install Poetry
        run: pip install poetry==$POETRY_VERSION
      - name: Collect Project Data
        id: meta
        run: .github/scripts/metadata.sh
      - name: Install Python Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install
      - name: Test with Pytest
        run: xvfb-run poetry run poe test-all
      - name: Upload Code Coverage to Code Climate
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: 05f6288b94a87daa172d3e96a33ec331a4374be7d01eb9a42b3b21c4c550a8ff
        with:
          coverageCommand: poetry run coverage xml
      - name: Create Source Dist and Wheel
        run: poetry run poe dist
      - name: Upload gaphor-${{ steps.meta.outputs.version }}.tar.gz
        uses: actions/upload-artifact@v2
        with:
          name: gaphor-${{ steps.meta.outputs.version }}.tar.gz
          path: dist/gaphor-${{ steps.meta.outputs.version }}.tar.gz
      - name: Upload gaphor-${{ steps.meta.outputs.version }}-py3-none-any.whl
        uses: actions/upload-artifact@v2
        with:
          name: gaphor-${{ steps.meta.outputs.version }}-py3-none-any.whl
          path: dist/gaphor-${{ steps.meta.outputs.version }}-py3-none-any.whl
      - name: Build AppImage
        run: |
          poetry run poe package
          cd packaging/appimage
          make dist
      - name: Upload gaphor-${{ steps.meta.outputs.version }}-x86_64.AppImage
        uses: actions/upload-artifact@v2
        with:
          name: Gaphor-${{ steps.meta.outputs.version }}-x86_64.AppImage
          path: packaging/dist/Gaphor-${{ steps.meta.outputs.version }}-x86_64.AppImage
      - name: Upload Assets (release only)
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "packaging/dist/*; dist/*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to PyPI (release only)
        if: github.event_name == 'release'
        run: poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}

  gvsbuild:
    needs: lint
    runs-on: windows-latest
    timeout-minutes: 45
    env:
      # Git revision of gvsbuild we use for to build GTK and the other dependencies
      gvsbuildref: 5903b46e4810e2bf2dfad06f4529298d129fc3ac
      # Bump this number if you want to force a rebuild of gvsbuild with the same revision
      gvsbuildupdate: 3
    outputs:
      cachekey: ${{ steps.output.outputs.cachekey }}
    steps:
      - name: GTK binaries create dir
        run: mkdir C:\gtk-build\gtk\x64\release
      - name: GTK binaries get from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}
      - name: GTK binaries checkout gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: gaphor/gvsbuild
          ref: ${{ env.gvsbuildref }}
          path: gvsbuild
      # Temporarily move the preinstalled git, it causes errors related to cygwin.
      - name: GTK binaries move git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
        shell: cmd
      - name: Set up Python
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2.2.2
      - name: GTK binaries run gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: gvsbuild
        run: python .\build.py build -p=x64 --vs-ver=16 --msys-dir=C:\msys64 --enable-gi --py-wheel --gtk3-ver=3.24 gobject-introspection gtk3 pycairo pygobject adwaita-icon-theme hicolor-icon-theme
      - name: Copy wheels to cached directory
        if: steps.cache.outputs.cache-hit != 'true'
        run: Get-ChildItem C:\gtk-build\build\x64\release\*\dist\*.whl | ForEach-Object -process { cp $_ C:\gtk-build\gtk\x64\release\ }
      - name: GTK binaries restore git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
        shell: cmd
      - name: GTK binaries output cache key
        id: output
        run: echo "::set-output name=cachekey::gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}"

  windows:
    needs: [lint, gvsbuild]
    runs-on: windows-latest
    timeout-minutes: 45
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    env:
      SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
    steps:
      - name: Create GTK binaries dir
        run: mkdir C:\gtk-build\gtk\x64\release
      - name: Get GTK binaries from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: ${{needs.gvsbuild.outputs.cachekey}}
      - name: Set up env
        run: |
          echo "PKG_CONFIG=C:\gtk-build\gtk\x64\release\bin\pkgconf.exe" >> $GITHUB_ENV
          echo "C:\gtk-build\gtk\x64\release\bin" >> $GITHUB_PATH
        shell: bash
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.6
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
      - name: Install Poetry and Wheel
        run: |
          pip install poetry==$Env:POETRY_VERSION
          poetry config virtualenvs.in-project true
      - name: Install PyGObject and pycairo
        run: Get-ChildItem C:\gtk-build\gtk\x64\release\*.whl | ForEach-Object -process { poetry run pip install $_ }
      - name: Collect Project Data
        id: meta
        run: .github/scripts/metadata.sh
        shell: bash
      - name: Install Python Dependencies
        run: poetry install
      - name: Test with PyTest
        run: poetry run poe test-all
      - name: Create Windows Installers
        run: |
          poetry run poe dist
          poetry run poe gaphor-script
          poetry run poe version-file
          poetry run poe pyinstall
          poetry run poe win-installer
      - name: Sign Executables
        env:
          password: "${{ secrets.CERTPASSWORD }}"
          timestampUrl: http://timestamp.digicert.com
          installer: "packaging/dist/gaphor-${{ steps.meta.outputs.version }}-installer.exe"
          portable: "packaging/dist/gaphor-${{ steps.meta.outputs.version }}-portable.exe"
          NOT_PR: ${{github.ref == 'refs/heads/master' || startsWith(github.ref, '/refs/tags/')}}
        if: env.SECRETS_AVAILABLE != null && env.NOT_PR 
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath 'certificate.pfx'
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe' sign /f 'certificate.pfx' /tr $env:timestampUrl /td sha256 /fd sha256 /p $env:password $env:installer $env:portable
          Remove-Item 'certificate.pfx'
      - name: Upload gaphor-${{ steps.meta.outputs.version }}-installer.exe
        uses: actions/upload-artifact@v2
        if: env.SECRETS_AVAILABLE != null
        with:
          name: gaphor-${{ steps.meta.outputs.version }}-installer.exe
          path: packaging/dist/gaphor-${{ steps.meta.outputs.version }}-installer.exe
      - name: Upload gaphor-${{ steps.meta.outputs.version }}-portable.exe
        uses: actions/upload-artifact@v2
        if: env.SECRETS_AVAILABLE != null
        with:
          name: gaphor-${{ steps.meta.outputs.version }}-portable.exe
          path: packaging/dist/gaphor-${{ steps.meta.outputs.version }}-portable.exe
      - name: Upload Assets (release only)
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "packaging/dist/*.exe"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  macos:
    needs: lint
    runs-on: macos-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    env:
      LDFLAGS: -L/usr/local/opt/python@3.8/lib
      PKG_CONFIG_PATH: /usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/python@3.8/lib/pkgconfig:${PKG_CONFIG_PATH:-}
      SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
      NOT_PR: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, '/refs/tags/') }}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
      - name: Install Dependencies
        run: brew install gobject-introspection gtk+3 adwaita-icon-theme gtk-mac-integration create-dmg upx
      - name: Install Poetry
        run: pip install poetry==$POETRY_VERSION
      - name: Collect Project Data
        id: meta
        run: .github/scripts/metadata.sh
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Python Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install
      - name: Test with Pytest
        run: poetry run poe test-all
      - name: Import codesign certificate
        uses: apple-actions/import-codesign-certs@v1.0.4
        if: env.SECRETS_AVAILABLE != null && env.NOT_PR 
        with:
          p12-file-base64: ${{ secrets.BASE64_ENCODED_P12 }}
          p12-password: ${{ secrets.CERTPASSWORD_P12 }}
      - name: Create macOS Application
        run: |
          poetry run poe dist
          poetry run poe package
      - name: Notarize app
        uses: devbotsxyz/xcode-notarize@v1
        if: env.SECRETS_AVAILABLE != null && env.NOT_PR
        with:
          product-path: "packaging/dist/Gaphor.app"
          appstore-connect-username: ${{ secrets.AC_USERNAME }}
          appstore-connect-password: ${{ secrets.AC_PASSWORD }}
      - name: Staple app
        uses: devbotsxyz/xcode-staple@v1
        if: env.SECRETS_AVAILABLE != null && env.NOT_PR
        with:
          product-path: "packaging/dist/Gaphor.app"
      - name: Create dmg
        run: >
          cd packaging

          create-dmg --volname "Gaphor ${{ steps.meta.outputs.version }}"
          --background "macos/background.png"
          --window-pos 200 120 --window-size 700 400 --icon-size 100
          --icon "Gaphor.app" 200 240 --hide-extension "Gaphor.app"
          --app-drop-link 500 240 "dist/Gaphor-${{ steps.meta.outputs.version }}.dmg"
          "dist/Gaphor.app"
      - name: Notarize dmg
        uses: devbotsxyz/xcode-notarize@v1
        if: env.SECRETS_AVAILABLE != null && env.NOT_PR
        with:
          product-path: "packaging/dist/Gaphor-${{ steps.meta.outputs.version }}.dmg"
          appstore-connect-username: ${{ secrets.AC_USERNAME }}
          appstore-connect-password: ${{ secrets.AC_PASSWORD }}
          primary-bundle-id: org.gaphor.gaphor
      - name: Staple .dmg
        uses: devbotsxyz/xcode-staple@v1
        if: env.SECRETS_AVAILABLE != null && env.NOT_PR
        with:
          product-path: "packaging/dist/Gaphor-${{ steps.meta.outputs.version }}.dmg"
      - name: Upload Gaphor-${{ steps.meta.outputs.version }}.dmg
        uses: actions/upload-artifact@v2
        with:
          name: Gaphor-${{ steps.meta.outputs.version }}.dmg
          path: packaging/dist/Gaphor-${{ steps.meta.outputs.version }}.dmg
      - name: Upload Assets (release only)
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "packaging/dist/Gaphor-${{ steps.meta.outputs.version }}.dmg"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  macos-gtk4:
    needs: lint
    runs-on: macos-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    env:
      LDFLAGS: -L/usr/local/opt/python@3.8/lib
      PKG_CONFIG_PATH: /usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/python@3.8/lib/pkgconfig:${PKG_CONFIG_PATH:-}
      GAPHOR_USE_GTK: 4
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
      - name: Install Dependencies
        run: brew install gobject-introspection gtk4 adwaita-icon-theme
      - name: Install Poetry
        run: pip install poetry==$POETRY_VERSION
      - name: Collect Project Data
        id: meta
        run: .github/scripts/metadata.sh
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Python Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install
      - name: Test with Pytest for GTK 4
        continue-on-error: true
        run: poetry run poe test-all
