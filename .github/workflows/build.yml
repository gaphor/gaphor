name: Build

on:
  pull_request:
  push:
    branches:
      - master
  release:
    types: [created, edited, published, prereleased]

jobs:
  lint:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2.1.2
      - name: Lint with Pre-commit
        uses: pre-commit/action@v2.0.0

  linux:
    needs: lint
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2.1.2
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Ubuntu dependencies
        run: >
          sudo apt-get update -q && sudo apt-get install
          --no-install-recommends -y xvfb python3-dev python3-gi
          python3-gi-cairo gir1.2-gtk-3.0 libgirepository1.0-dev libcairo2-dev &&
          sudo apt upgrade -y libgtk-3-0
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.3
        with:
          version: 1.0.3
      - name: Collect Metadata
        id: meta
        run: .github/scripts/metadata.sh
      - name: Install Python Dependencies
        run: poetry install
      - name: Test with Pytest
        run: xvfb-run pytest --cov=gaphor/
      - name: Code Climate Coverage Action
        uses: paambaati/codeclimate-action@v2.6.0
        env:
          CC_TEST_REPORTER_ID: 05f6288b94a87daa172d3e96a33ec331a4374be7d01eb9a42b3b21c4c550a8ff
        with:
          coverageCommand: coverage xml
      - name: Build
        run: |
          make dist
      - name: Upload gaphor-${{ steps.meta.outputs.version }}.tar.gz
        uses: actions/upload-artifact@v2
        with:
          name: gaphor-${{ steps.meta.outputs.version }}.tar.gz
          path: dist/gaphor-${{ steps.meta.outputs.version }}.tar.gz
      - name: Upload gaphor-${{ steps.meta.outputs.version }}-py3-none-any.whl
        uses: actions/upload-artifact@v2
        with:
          name: gaphor-${{ steps.meta.outputs.version }}-py3-none-any.whl
          path: dist/gaphor-${{ steps.meta.outputs.version }}-py3-none-any.whl
      - name: Publish to PyPI
        if: github.event_name == 'release'
        run: |
          poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}

  windows:
    needs: lint
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    env:
      MSYSTEM: MINGW64
      MSYS2_ARCH: x86_64
      CHERE_INVOKING: yes
      PY_IGNORE_IMPORTMISMATCH: yes
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install MSYS2
        run: |
          choco install --no-progress msys2 --params="/NoUpdate /NoPath"
      - name: Update MSYS2
        run: |
          $env:PATH = "C:\tools\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
          C:\tools\msys64\usr\bin\pacman --noconfirm -Sydd filesystem
          C:\tools\msys64\usr\bin\pacman --noconfirm -Sy pacman
          C:\tools\msys64\usr\bin\pacman --noconfirm -Su
          C:\tools\msys64\usr\bin\pacman --noconfirm -Syyuu
          C:\tools\msys64\usr\bin\pacman --noconfirm -Syuu
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.1
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Dependencies
        run: |
          $env:PATH = "C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
          C:\tools\msys64\usr\bin\bash -lc "win-installer/msys2-install.sh"
      - name: Collect Metadata
        id: meta
        run: C:\tools\msys64\usr\bin\bash -lc ".github/scripts/metadata.sh"
      - name: Run Tests
        run: |
          $env:PATH = "C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
          C:\tools\msys64\usr\bin\bash -lc "win-installer/msys2-test.sh"
      - name: Create Windows Binaries
        run: |
          $env:PATH = "C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
          C:\tools\msys64\usr\bin\bash -lc "win-installer/build-installer.sh"
      - name: Decode the certificate
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath 'certificate.pfx'
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      - name: Add SignTool to Path
        run: echo "::add-path::C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86"
      - name: Sign executables
        env:
          password: "${{ secrets.CERTPASSWORD }}"
          timestampUrl: http://timestamp.digicert.com
          installer: "win-installer/output/gaphor-${{ steps.meta.outputs.version }}-installer.exe"
          portable: "win-installer/output/gaphor-${{ steps.meta.outputs.version }}-portable.exe"
        run: signtool.exe sign /f 'certificate.pfx' /tr $env:timestampUrl /td sha256 /fd sha256 /p $env:password $env:installer $env:portable
      - name: Remove certificate
        run: Remove-Item 'certificate.pfx'
      - name: Upload gaphor-${{ steps.meta.outputs.version }}-installer.exe
        uses: actions/upload-artifact@v2
        with:
          name: gaphor-${{ steps.meta.outputs.version }}-installer.exe
          path: win-installer/output/gaphor-${{ steps.meta.outputs.version }}-installer.exe
      - name: Upload gaphor-${{ steps.meta.outputs.version }}-portable.exe
        uses: actions/upload-artifact@v2
        with:
          name: gaphor-${{ steps.meta.outputs.version }}-portable.exe
          path: win-installer/output/gaphor-${{ steps.meta.outputs.version }}-portable.exe
      - name: Upload Assets
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "win-installer/output/*.exe"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  macos:
    needs: lint
    runs-on: macos-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    env:
      LDFLAGS: -L/usr/local/opt/python@3.8/lib
      PKG_CONFIG_PATH: /usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/python@3.8/lib/pkgconfig:${PKG_CONFIG_PATH:-}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2.1.2
      - name: Install macOS Dependencies
        run: |
          brew list
          brew install gobject-introspection gtk+3 adwaita-icon-theme gtk-mac-integration create-dmg
      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.3
        with:
          version: 1.0.3
      - name: Collect Metadata
        id: meta
        run: .github/scripts/metadata.sh
      - name: Use Python Dependency Cache
        uses: actions/cache@v2.1.1
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Python Dependencies
        run: |
          poetry install
      - name: Test with Pytest
        run: pytest
      - name: Create macOS Application
        run: |
          make dist
          cd macos-dmg
          ./package.sh
      - name: Upload Gaphor-${{ steps.meta.outputs.version }}.dmg
        uses: actions/upload-artifact@v2
        with:
          name: Gaphor-${{ steps.meta.outputs.version }}.dmg
          path: macos-dmg/Gaphor-${{ steps.meta.outputs.version }}.dmg
      - name: Upload Assets to release
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "macos-dmg/Gaphor-${{ steps.meta.outputs.version }}.dmg"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
