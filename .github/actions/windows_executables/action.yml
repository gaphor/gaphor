name: 'Create Windows Executables'
description: 'Create and Sign Windows Executables Using PyInstaller'
inputs:
  version:
    description: 'Gaphor version number'
    required: true
  signpath_api_token:
    description: 'SighPath API token'
    required: true
  mainline_build:
    description: 'Build is performed on the main line'
    required: true
runs:
  using: composite
  steps:
    - name: Install Build Dependencies
      run: poetry install --only main,packaging --no-interaction
      shell: bash
    - name: Windows specific overrides
      run: |
        poetry run pip install --force-reinstall (Resolve-Path C:\gtk\wheels\PyGObject*.whl)
        poetry run pip install --force-reinstall (Resolve-Path C:\gtk\wheels\pycairo*.whl)
      shell: pwsh
    - name: Build PyInstaller Bootloader
      run: |
        # The pre-compiled bootloader is often flagged by virus scanners as a false positive, build our own
        poetry shell
        $env:PYINSTALLER_VER=$(poetry run py -c "from importlib.metadata import version; print(version('pyinstaller'))")
        git clone --depth 1 --branch v$env:PYINSTALLER_VER https://github.com/pyinstaller/pyinstaller.git
        cd .\pyinstaller\bootloader
        py .\waf all --gcc --target-arch=64bit
        cd ..\..
        py -m pip --disable-pip-version-check install .\pyinstaller
        rm -r -fo .\pyinstaller
      shell: pwsh
    - name: Create Windows Installers
      run: |
        poetry build
        poetry run poe package
        poetry run poe win-installer
      shell: bash
    - name: upload-unsigned-artifacts
      id: upload-unsigned-artifacts
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: gaphor-unsigned-executables
        path: |
          _packaging/dist/gaphor-${{ inputs.version }}-installer.exe
          _packaging/dist/gaphor-${{ inputs.version }}-portable.exe
    - name: Sign Executables
      uses: signpath/github-action-submit-signing-request@ced31329c0317e779dad2eec2a7c3bb46ea1343e # v1.3
      with:
        api-token: ${{ inputs.signpath_api_token }}
        organization-id: 794ffb00-6570-4400-9e4e-bf426bb0f482
        project-slug: gaphor
        signing-policy-slug: ${{ github.event_name == 'release' && 'release-signing' || 'test-signing' }}
        wait-for-completion: true
        output-artifact-directory: _packaging/dist/
        github-artifact-id: '${{ steps.upload-unsigned-artifacts.outputs.artifact-id }}'
    - name: Extract Signed Executables
      run: |
        Expand-Archive -Path "_packaging/dist/gaphor-unsigned-executables.zip" -DestinationPath "_packaging/dist" -Force
        Remove-Item "_packaging/dist/gaphor-unsigned-executables.zip"
      shell: pwsh
    - name: Upload gaphor-${{ inputs.version }}-installer.exe
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: gaphor-${{ inputs.version }}-installer.exe
        path: _packaging/dist/gaphor-${{ inputs.version }}-installer.exe
    - name: Upload gaphor-${{ inputs.version }}-portable.exe
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: gaphor-${{ inputs.version }}-portable.exe
        path: _packaging/dist/gaphor-${{ inputs.version }}-portable.exe
    - name: Upload Assets (release only)
      if: github.event_name == 'release'
      env:
        GH_TOKEN: ${{ github.token }}
        version: ${{ inputs.version }}
      run: gh release upload ${env:version} (Resolve-Path _packaging\dist\*.exe)
      shell: pwsh
