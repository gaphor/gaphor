<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmlns:xmi="http://www.omg.org/spec/XMI/20161101" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:uml="http://www.omg.org/spec/UML/20161101" xmlns:mofext="http://www.omg.org/spec/MOF/20161101" xmlns:UML="https://www.omg.org/spec/UML/20161101">
  <uml:Package xmi:id="KerML" URI="https://www.omg.org/spec/KerML/20250201" name="KerML">
    <packageImport xmi:id="_packageImport.Kernel" xmi:type="uml:PackageImport">
      <importedPackage xmi:idref="Kernel"/>
    </packageImport>
    <packagedElement xmi:id="Kernel" xmi:type="uml:Package" URI="" name="Kernel">
      <ownedComment xmi:id="Kernel-_comment.0" xmi:type="uml:Comment" body="The Kernel layer completes the KerML metamodel.">
        <annotatedElement xmi:idref="Kernel"/>
      </ownedComment>
      <packageImport xmi:id="Kernel-_packageImport.Core" xmi:type="uml:PackageImport">
        <importedPackage xmi:idref="Core"/>
      </packageImport>
      <packagedElement xmi:id="Kernel-Behaviors" xmi:type="uml:Package" URI="" name="Behaviors">
        <packagedElement xmi:id="Kernel-Behaviors-Behavior" xmi:type="uml:Class" name="Behavior">
          <generalization xmi:id="Kernel-Behaviors-Behavior-_generalization.Kernel-Classes-Class" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Classes-Class"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Behaviors-Behavior-step" xmi:type="uml:Property" isDerived="true" name="step">
            <association xmi:idref="Kernel-Behaviors-A_step_featuringBehavior"/>
            <lowerValue xmi:id="Kernel-Behaviors-Behavior-step-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Behaviors-Behavior-step-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Steps&lt;/code&gt; that make up this &lt;code&gt;Behavior&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Behaviors-Behavior-step"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-feature"/>
            <type xmi:idref="Kernel-Behaviors-Step"/>
            <upperValue xmi:id="Kernel-Behaviors-Behavior-step-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Behaviors-Behavior-parameter" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="parameter">
            <association xmi:idref="Kernel-Behaviors-A_parameter_parameteredBehavior"/>
            <lowerValue xmi:id="Kernel-Behaviors-Behavior-parameter-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Behaviors-Behavior-parameter-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The parameters of this &lt;code&gt;Behavior&lt;/code&gt;, which are defined as its &lt;code&gt;directedFeatures&lt;/code&gt;, whose values are passed into and/or out of a performance of the &lt;code&gt;Behavior&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Behaviors-Behavior-parameter"/>
</ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Type-directedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Behaviors-Behavior-parameter-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Behaviors-Behavior-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Behavior &lt;/code&gt;coordinates occurrences of other &lt;code&gt;Behaviors&lt;/code&gt;, as well as changes in objects. &lt;code&gt;Behaviors&lt;/code&gt; can be decomposed into &lt;code&gt;Steps&lt;/code&gt; and be characterized by &lt;code&gt;parameters&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Behaviors-Behavior"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Behaviors-Behavior-checkBehaviorSpecialization" xmi:type="uml:Constraint" name="checkBehaviorSpecialization">
            <constrainedElement xmi:idref="Kernel-Behaviors-Behavior"/>
            <ownedComment xmi:id="Kernel-Behaviors-Behavior-checkBehaviorSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Behavior&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Behavior&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::Performance&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Behavior-checkBehaviorSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Behaviors-Behavior-checkBehaviorSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::Performance')" language="English" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Behaviors-Behavior-validateBehaviorSpecialization" xmi:type="uml:Constraint" name="validateBehaviorSpecialization">
            <constrainedElement xmi:idref="Kernel-Behaviors-Behavior"/>
            <ownedComment xmi:id="Kernel-Behaviors-Behavior-validateBehaviorSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Behavior&lt;/code&gt; must not specialize a &lt;code&gt;Structure&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Behavior-validateBehaviorSpecialization"/>
            </ownedComment>
            <specification xmi:id="Kernel-Behaviors-Behavior-validateBehaviorSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedSpecialization.general-&gt;forAll(not oclIsKindOf(Structure))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Behaviors-Behavior-deriveBehaviorStep" xmi:type="uml:Constraint" name="deriveBehaviorStep">
            <constrainedElement xmi:idref="Kernel-Behaviors-Behavior"/>
            <ownedComment xmi:id="Kernel-Behaviors-Behavior-deriveBehaviorStep-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;steps&lt;/code&gt; of a &lt;code&gt;Behavior&lt;/code&gt; are its &lt;code&gt;features&lt;/code&gt; that are &lt;code&gt;Steps&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Behavior-deriveBehaviorStep"/>
            </ownedComment>
            <specification xmi:id="Kernel-Behaviors-Behavior-deriveBehaviorStep-specification0" xmi:type="uml:OpaqueExpression" body="step = feature-&gt;selectByKind(Step)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-ParameterMembership" xmi:type="uml:Class" name="ParameterMembership">
          <generalization xmi:id="Kernel-Behaviors-ParameterMembership-_generalization.Core-Types-FeatureMembership" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-FeatureMembership"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Behaviors-ParameterMembership-ownedMemberParameter" xmi:type="uml:Property" isDerived="true" name="ownedMemberParameter">
            <association xmi:idref="Kernel-Behaviors-A_ownedMemberParameter_owningParameterMembership"/>
            <lowerValue xmi:id="Kernel-Behaviors-ParameterMembership-ownedMemberParameter-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Behaviors-ParameterMembership-ownedMemberParameter-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is identified as a &lt;code&gt;parameter&lt;/code&gt; by this &lt;code&gt;ParameterMembership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Behaviors-ParameterMembership-ownedMemberParameter"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-FeatureMembership-ownedMemberFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Behaviors-ParameterMembership-ownedMemberParameter-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Behaviors-ParameterMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ParameterMembership&lt;/code&gt; is a &lt;code&gt;FeatureMembership&lt;/code&gt; that identifies its &lt;code&gt;memberFeature&lt;/code&gt; as a parameter, which is always owned, and must have a &lt;code&gt;direction&lt;/code&gt;. A &lt;code&gt;ParameterMembership&lt;/code&gt; must be owned by a &lt;code&gt;Behavior&lt;/code&gt;, a &lt;code&gt;Step&lt;/code&gt;, or the &lt;code&gt;result&lt;/code&gt; parameter of a &lt;code&gt;ConstructorExpression&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Behaviors-ParameterMembership"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Behaviors-ParameterMembership-parameterDirection_" xmi:type="uml:Operation" name="parameterDirection">
            <bodyCondition xmi:id="Kernel-Behaviors-ParameterMembership-parameterDirection_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Behaviors-ParameterMembership-parameterDirection_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="FeatureDirectionKind::_'in'" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Behaviors-ParameterMembership-parameterDirection_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the required value of the &lt;code&gt;direction&lt;/code&gt; of the &lt;code&gt;ownedMemberParameter&lt;/code&gt;. By default, this is &lt;code&gt;in&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-ParameterMembership-parameterDirection_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Behaviors-ParameterMembership-parameterDirection_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Behaviors-ParameterMembership-parameterDirection_--lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
              <type xmi:idref="Core-Types-FeatureDirectionKind"/>
              <upperValue xmi:id="Kernel-Behaviors-ParameterMembership-parameterDirection_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Behaviors-ParameterMembership-parameterDirection_-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Behaviors-ParameterMembership-validateParameterMembershipParameterDirection" xmi:type="uml:Constraint" name="validateParameterMembershipParameterDirection">
            <constrainedElement xmi:idref="Kernel-Behaviors-ParameterMembership"/>
            <ownedComment xmi:id="Kernel-Behaviors-ParameterMembership-validateParameterMembershipParameterDirection-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberParameter&lt;/code&gt; of a &lt;code&gt;ParameterMembership&lt;/code&gt; must have a  &lt;code&gt;direction&lt;/code&gt; equal to the result of the &lt;code&gt;parameterDirection()&lt;/code&gt; operation.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-ParameterMembership-validateParameterMembershipParameterDirection"/>
</ownedComment>
            <specification xmi:id="Kernel-Behaviors-ParameterMembership-validateParameterMembershipParameterDirection-specification0" xmi:type="uml:OpaqueExpression" body="ownedMemberParameter.direction = parameterDirection()" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Behaviors-ParameterMembership-validateParameterMembershipOwningType" xmi:type="uml:Constraint" name="validateParameterMembershipOwningType">
            <constrainedElement xmi:idref="Kernel-Behaviors-ParameterMembership"/>
            <ownedComment xmi:id="Kernel-Behaviors-ParameterMembership-validateParameterMembershipOwningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ParameterMembership&lt;/code&gt; must be owned by a &lt;code&gt;Behavior&lt;/code&gt;,&lt;code&gt;Step&lt;/code&gt;, or the &lt;code&gt;result&lt;/code&gt; parameter of a &lt;code&gt;ConstructorExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-ParameterMembership-validateParameterMembershipOwningType"/>
</ownedComment>
            <specification xmi:id="Kernel-Behaviors-ParameterMembership-validateParameterMembershipOwningType-specification0" xmi:type="uml:OpaqueExpression" body="owningType.oclIsKindOf(Behavior) or owningType.oclIsKindOf(Step) or owningType.owningMembership.oclIsKindOf(ReturnParameterMembership) and     owningType.owningNamespace.oclIsKindOf(ConstructorExpression)" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-A_involvesFeature_Behavior" xmi:type="uml:Association" name="A_involvesFeature_Behavior">
          <memberEnd xmi:idref="Kernel-Behaviors-A_involvesFeature_Behavior-involvesFeature"/>
          <memberEnd xmi:idref="Kernel-Behaviors-A_involvesFeature_Behavior-"/>
          <navigableOwnedEnd xmi:idref="Kernel-Behaviors-A_involvesFeature_Behavior-involvesFeature"/>
          <ownedEnd xmi:id="Kernel-Behaviors-A_involvesFeature_Behavior-" xmi:type="uml:Property" name="">
            <association xmi:idref="Kernel-Behaviors-A_involvesFeature_Behavior"/>
            <type xmi:idref="Kernel-Behaviors-Behavior"/>
          </ownedEnd>
          <ownedEnd xmi:id="Kernel-Behaviors-A_involvesFeature_Behavior-involvesFeature" xmi:type="uml:Property" name="involvesFeature">
            <association xmi:idref="Kernel-Behaviors-A_involvesFeature_Behavior"/>
            <lowerValue xmi:id="Kernel-Behaviors-A_involvesFeature_Behavior-involvesFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Behaviors-A_involvesFeature_Behavior-involvesFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-A_step_featuringBehavior" xmi:type="uml:Association" name="A_step_featuringBehavior">
          <memberEnd xmi:idref="Kernel-Behaviors-Behavior-step"/>
          <memberEnd xmi:idref="Kernel-Behaviors-A_step_featuringBehavior-featuringBehavior"/>
          <ownedEnd xmi:id="Kernel-Behaviors-A_step_featuringBehavior-featuringBehavior" xmi:type="uml:Property" isDerived="true" name="featuringBehavior">
            <association xmi:idref="Kernel-Behaviors-A_step_featuringBehavior"/>
            <lowerValue xmi:id="Kernel-Behaviors-A_step_featuringBehavior-featuringBehavior-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Kernel-Behaviors-Behavior"/>
            <upperValue xmi:id="Kernel-Behaviors-A_step_featuringBehavior-featuringBehavior-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-Step" xmi:type="uml:Class" name="Step">
          <generalization xmi:id="Kernel-Behaviors-Step-_generalization.Core-Features-Feature" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Feature"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Behaviors-Step-behavior" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="behavior">
            <association xmi:idref="Kernel-Behaviors-A_behavior_typedStep"/>
            <lowerValue xmi:id="Kernel-Behaviors-Step-behavior-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Behaviors-Step-behavior-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Behaviors&lt;/code&gt; that type this &lt;code&gt;Step&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Behaviors-Step-behavior"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Feature-type"/>
            <type xmi:idref="Kernel-Behaviors-Behavior"/>
            <upperValue xmi:id="Kernel-Behaviors-Step-behavior-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Behaviors-Step-parameter" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="parameter">
            <association xmi:idref="Kernel-Behaviors-A_parameter_parameteredStep"/>
            <lowerValue xmi:id="Kernel-Behaviors-Step-parameter-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Behaviors-Step-parameter-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;parameters&lt;/code&gt; of this &lt;code&gt;Step&lt;/code&gt;, which are defined as its &lt;code&gt;directedFeatures&lt;/code&gt;, whose values are passed into and/or out of a performance of the &lt;code&gt;Step&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Behaviors-Step-parameter"/>
</ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Type-directedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Behaviors-Step-parameter-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Behaviors-Step-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Step&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt; that is typed by one or more &lt;code&gt;Behaviors&lt;/code&gt;. &lt;code&gt;Steps&lt;/code&gt; may be used by one &lt;code&gt;Behavior&lt;/code&gt; to coordinate the performance of other &lt;code&gt;Behaviors&lt;/code&gt;, supporting a steady refinement of behavioral descriptions. &lt;code&gt;Steps&lt;/code&gt; can be ordered in time and can be connected using &lt;code&gt;Flows&lt;/code&gt; to specify things flowing between their &lt;code&gt;parameters&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Behaviors-Step"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Behaviors-Step-deriveStepBehavior" xmi:type="uml:Constraint" name="deriveStepBehavior">
            <constrainedElement xmi:idref="Kernel-Behaviors-Step"/>
            <ownedComment xmi:id="Kernel-Behaviors-Step-deriveStepBehavior-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;behaviors&lt;/code&gt; of a &lt;code&gt;Step&lt;/code&gt; are all its &lt;code&gt;types&lt;/code&gt; that are &lt;code&gt;Behaviors&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Step-deriveStepBehavior"/>
            </ownedComment>
            <specification xmi:id="Kernel-Behaviors-Step-deriveStepBehavior-specification0" xmi:type="uml:OpaqueExpression" body="behavior = type-&gt;selectByKind(Behavior)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Behaviors-Step-checkStepSubperformanceSpecialization" xmi:type="uml:Constraint" name="checkStepSubperformanceSpecialization">
            <constrainedElement xmi:idref="Kernel-Behaviors-Step"/>
            <ownedComment xmi:id="Kernel-Behaviors-Step-checkStepSubperformanceSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A&lt;code&gt;Step&lt;/code&gt; whose &lt;code&gt;owningType&lt;/code&gt; is a &lt;code&gt;Behavior&lt;/code&gt; or another &lt;code&gt;Step&lt;/code&gt;, and which is composite, must directly or indirectly specialize the &lt;code&gt;Step&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::Performance::subperformance&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Step-checkStepSubperformanceSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Behaviors-Step-checkStepSubperformanceSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="owningType &lt;&gt; null and     (owningType.oclIsKindOf(Behavior) or      owningType.oclIsKindOf(Step)) and     self.isComposite implies     specializesFromLibrary('Performances::Performance::subperformance')" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Behaviors-Step-checkStepSpecialization" xmi:type="uml:Constraint" name="checkStepSpecialization">
            <constrainedElement xmi:idref="Kernel-Behaviors-Step"/>
            <ownedComment xmi:id="Kernel-Behaviors-Step-checkStepSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Step&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Step&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::performances&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Step-checkStepSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Behaviors-Step-checkStepSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::performances')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Behaviors-Step-checkStepEnclosedPerformanceSpecialization" xmi:type="uml:Constraint" name="checkStepEnclosedPerformanceSpecialization">
            <constrainedElement xmi:idref="Kernel-Behaviors-Step"/>
            <ownedComment xmi:id="Kernel-Behaviors-Step-checkStepEnclosedPerformanceSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A&lt;code&gt;Step&lt;/code&gt; whose &lt;code&gt;owningType&lt;/code&gt; is a &lt;code&gt;Behavior&lt;/code&gt; or another &lt;code&gt;Step&lt;/code&gt; must directly or indirectly specialize the &lt;code&gt;Step&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::Performance::enclosedPerformance&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Step-checkStepEnclosedPerformanceSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Behaviors-Step-checkStepEnclosedPerformanceSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="owningType &lt;&gt; null and     (owningType.oclIsKindOf(Behavior) or      owningType.oclIsKindOf(Step)) implies     specializesFromLibrary('Performances::Performance::enclosedPerformance')" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Behaviors-Step-checkStepOwnedPerformanceSpecialization" xmi:type="uml:Constraint" name="checkStepOwnedPerformanceSpecialization">
            <constrainedElement xmi:idref="Kernel-Behaviors-Step"/>
            <ownedComment xmi:id="Kernel-Behaviors-Step-checkStepOwnedPerformanceSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A composite &lt;code&gt;Step&lt;/code&gt; whose &lt;code&gt;owningType&lt;/code&gt; is a &lt;code&gt;Structure&lt;/code&gt; or a &lt;code&gt;Feature&lt;/code&gt; typed by a &lt;code&gt;Structure&lt;/code&gt; must directly or indirectly specialize the &lt;code&gt;Step&lt;/code&gt; &lt;code&gt;&lt;em&gt;Objects::Object::ownedPerformance&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Behaviors-Step-checkStepOwnedPerformanceSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Behaviors-Step-checkStepOwnedPerformanceSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isComposite and owningType &lt;&gt; null and (owningType.oclIsKindOf(Structure) or  owningType.oclIsKindOf(Feature) and  owningType.oclAsType(Feature).type-&gt;     exists(oclIsKindOf(Structure)) implies     specializesFromLibrary('Objects::Object::ownedPerformance')" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-A_ownedMemberParameter_owningParameterMembership" xmi:type="uml:Association" name="A_ownedMemberParameter_owningParameterMembership">
          <memberEnd xmi:idref="Kernel-Behaviors-ParameterMembership-ownedMemberParameter"/>
          <memberEnd xmi:idref="Kernel-Behaviors-A_ownedMemberParameter_owningParameterMembership-owningParameterMembership"/>
          <ownedEnd xmi:id="Kernel-Behaviors-A_ownedMemberParameter_owningParameterMembership-owningParameterMembership" xmi:type="uml:Property" isDerived="true" name="owningParameterMembership">
            <association xmi:idref="Kernel-Behaviors-A_ownedMemberParameter_owningParameterMembership"/>
            <lowerValue xmi:id="Kernel-Behaviors-A_ownedMemberParameter_owningParameterMembership-owningParameterMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Features-Feature-owningFeatureMembership"/>
            <type xmi:idref="Kernel-Behaviors-ParameterMembership"/>
            <upperValue xmi:id="Kernel-Behaviors-A_ownedMemberParameter_owningParameterMembership-owningParameterMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-A_parameter_parameteredBehavior" xmi:type="uml:Association" name="A_parameter_parameteredBehavior">
          <memberEnd xmi:idref="Kernel-Behaviors-Behavior-parameter"/>
          <memberEnd xmi:idref="Kernel-Behaviors-A_parameter_parameteredBehavior-parameteredBehavior"/>
          <ownedEnd xmi:id="Kernel-Behaviors-A_parameter_parameteredBehavior-parameteredBehavior" xmi:type="uml:Property" isDerived="true" name="parameteredBehavior">
            <association xmi:idref="Kernel-Behaviors-A_parameter_parameteredBehavior"/>
            <lowerValue xmi:id="Kernel-Behaviors-A_parameter_parameteredBehavior-parameteredBehavior-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Kernel-Behaviors-Behavior"/>
            <upperValue xmi:id="Kernel-Behaviors-A_parameter_parameteredBehavior-parameteredBehavior-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-A_behavior_typedStep" xmi:type="uml:Association" name="A_behavior_typedStep">
          <memberEnd xmi:idref="Kernel-Behaviors-Step-behavior"/>
          <memberEnd xmi:idref="Kernel-Behaviors-A_behavior_typedStep-typedStep"/>
          <ownedEnd xmi:id="Kernel-Behaviors-A_behavior_typedStep-typedStep" xmi:type="uml:Property" isDerived="true" name="typedStep">
            <association xmi:idref="Kernel-Behaviors-A_behavior_typedStep"/>
            <lowerValue xmi:id="Kernel-Behaviors-A_behavior_typedStep-typedStep-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Features-A_typedFeature_type-typedFeature"/>
            <type xmi:idref="Kernel-Behaviors-Step"/>
            <upperValue xmi:id="Kernel-Behaviors-A_behavior_typedStep-typedStep-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Behaviors-A_parameter_parameteredStep" xmi:type="uml:Association" name="A_parameter_parameteredStep">
          <memberEnd xmi:idref="Kernel-Behaviors-Step-parameter"/>
          <memberEnd xmi:idref="Kernel-Behaviors-A_parameter_parameteredStep-parameteredStep"/>
          <ownedEnd xmi:id="Kernel-Behaviors-A_parameter_parameteredStep-parameteredStep" xmi:type="uml:Property" isDerived="true" name="parameteredStep">
            <association xmi:idref="Kernel-Behaviors-A_parameter_parameteredStep"/>
            <lowerValue xmi:id="Kernel-Behaviors-A_parameter_parameteredStep-parameteredStep-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Kernel-Behaviors-Step"/>
            <upperValue xmi:id="Kernel-Behaviors-A_parameter_parameteredStep-parameteredStep-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Expressions" xmi:type="uml:Package" URI="" name="Expressions">
        <packagedElement xmi:id="Kernel-Expressions-FeatureChainExpression" xmi:type="uml:Class" name="FeatureChainExpression">
          <generalization xmi:id="Kernel-Expressions-FeatureChainExpression-_generalization.Kernel-Expressions-OperatorExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-OperatorExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-FeatureChainExpression-operator" xmi:type="uml:Property" name="operator">
            <defaultValue xmi:id="Kernel-Expressions-FeatureChainExpression-operator-defaultValue" xmi:type="uml:LiteralString" name="" value="."/>
            <redefinedProperty xmi:idref="Kernel-Expressions-OperatorExpression-operator"/>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Expressions-FeatureChainExpression-targetFeature" xmi:type="uml:Property" isDerived="true" name="targetFeature">
            <association xmi:idref="Kernel-Expressions-A_targetFeature_chainExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-FeatureChainExpression-targetFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-targetFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is accessed by this &lt;code&gt;FeatureChainExpression&lt;code&gt;, which is its first non-&lt;code&gt;parameter&lt;/code&gt; &lt;code&gt;member&lt;/code&gt;.&lt;p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-targetFeature"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-member"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Expressions-FeatureChainExpression-targetFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureChainExpression&lt;/code&gt; is an &lt;code&gt;OperatorExpression&lt;/code&gt; whose operator is &lt;code&gt;&quot;.&quot;&lt;/code&gt;, which resolves to the &lt;code&gt;Function&lt;/code&gt; &lt;em&gt;&lt;code&gt;ControlFunctions::'.'&lt;/code&gt;&lt;/em&gt; from the Kernel Functions Library. It evaluates to the result of chaining the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;Feature&lt;/code&gt; of its single &lt;code&gt;argument&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; with its &lt;code&gt;targetFeature&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_" xmi:type="uml:Operation" name="sourceTargetFeature">
            <bodyCondition xmi:id="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let inputParameters : Feature = ownedFeatures-&gt;     select(direction = _'in') in if inputParameters-&gt;isEmpty() or     inputParameters-&gt;first().ownedFeature-&gt;isEmpty() then null else inputParameters-&gt;first().ownedFeature-&gt;first() endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the first &lt;code&gt;ownedFeature&lt;/code&gt; of the first owned input &lt;code&gt;parameter&lt;/code&gt; of this &lt;code&gt;FeatureChainExpression&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-FeatureChainExpression-sourceTargetFeature_-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionResultSpecialization" xmi:type="uml:Constraint" name="checkFeatureChainExpressionResultSpecialization">
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionResultSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; parameter of a &lt;code&gt;FeatureChainExpression&lt;/code&gt; must specialize the feature chain of the &lt;code&gt;FeatureChainExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionResultSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionResultSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="let inputParameters : Sequence(Feature) =      ownedFeatures-&gt;select(direction = _'in') in let sourceTargetFeature : Feature =      owningExpression.sourceTargetFeature() in sourceTargetFeature &lt;&gt; null and result.subsetsChain(inputParameters-&gt;first(), sourceTargetFeature) and result.owningType = self" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionOperator" xmi:type="uml:Constraint" name="validateFeatureChainExpressionOperator">
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionOperator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;operator&lt;/code&gt; of a &lt;code&gt;FeatureChainExpression&lt;/code&gt; must be &lt;code&gt;&quot;.&quot;&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionOperator"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionOperator-specification0" xmi:type="uml:OpaqueExpression" body="operator = '.'" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionConformance" xmi:type="uml:Constraint" name="validateFeatureChainExpressionConformance">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureChainExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionConformance-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;targetFeature&lt;/code&gt; of a &lt;code&gt;FeatureChainExpression&lt;/code&gt; must be featured within the &lt;code&gt;result&lt;/code&gt; parameter of the &lt;code&gt;argument&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; of the &lt;code&gt;FeatureChainExpression&lt;/code&gt;.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionConformance"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureChainExpression-validateFeatureChainExpressionConformance-specification0" xmi:type="uml:OpaqueExpression" body="argument-&gt;notEmpty() implies targetFeature.isFeaturedWithin(argument-&gt;first().result)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureChainExpression-deriveFeatureChainExpressionTargetFeature" xmi:type="uml:Constraint" name="deriveFeatureChainExpressionTargetFeature">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureChainExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-deriveFeatureChainExpressionTargetFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;targetFeature&lt;/code&gt; of a &lt;code&gt;FeatureChainExpression&lt;/code&gt; is the &lt;code&gt;memberElement&lt;/code&gt; of its first &lt;code&gt;ownedMembership&lt;/code&gt; that is not a &lt;code&gt;ParameterMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-deriveFeatureChainExpressionTargetFeature"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureChainExpression-deriveFeatureChainExpressionTargetFeature-specification0" xmi:type="uml:OpaqueExpression" body="targetFeature =     let nonParameterMemberships : Sequence(Membership) = ownedMembership-&gt;         reject(oclIsKindOf(ParameterMembership)) in     if nonParameterMemberships-&gt;isEmpty() or        not nonParameterMemberships-&gt;first().memberElement.oclIsKindOf(Feature)     then null     else nonParameterMemberships-&gt;first().memberElement.oclAsType(Feature)     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionTargetRedefinition" xmi:type="uml:Constraint" name="checkFeatureChainExpressionTargetRedefinition">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureChainExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionTargetRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The first &lt;code&gt;ownedFeature&lt;/code&gt; of the first owned input &lt;code&gt;parameter&lt;/code&gt; of a &lt;code&gt;FeatureChainExpression&lt;/code&gt; must redefine the &lt;code&gt;Feature&lt;/code&gt; &lt;code&gt;&lt;em&gt;ControlFunctions::'.'::source::target&lt;/em&gt;&lt;/code&gt; from the Kernel Functions Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionTargetRedefinition"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionTargetRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="let sourceParameter : Feature = sourceTargetFeature() in sourceTargetFeature &lt;&gt; null and sourceTargetFeature.redefinesFromLibrary('ControlFunctions::\'.\'::source::target')" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionSourceTargetRedefinition" xmi:type="uml:Constraint" name="checkFeatureChainExpressionSourceTargetRedefinition">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureChainExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionSourceTargetRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The first &lt;code&gt;ownedFeature&lt;/code&gt; of the first owned input &lt;code&gt;parameter&lt;/code&gt; of a &lt;code&gt;FeatureChainExpression&lt;/code&gt; must redefine its &lt;code&gt;targetFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionSourceTargetRedefinition"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureChainExpression-checkFeatureChainExpressionSourceTargetRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="let sourceParameter : Feature = sourceTargetFeature() in sourceTargetFeature &lt;&gt; null and sourceTargetFeature.redefines(targetFeature)" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-LiteralString" xmi:type="uml:Class" name="LiteralString">
          <generalization xmi:id="Kernel-Expressions-LiteralString-_generalization.Kernel-Expressions-LiteralExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-LiteralExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-LiteralString-value" xmi:type="uml:Property" name="value">
            <ownedComment xmi:id="Kernel-Expressions-LiteralString-value-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The String value that is the result of evaluating this Expression.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralString-value"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-Expressions-LiteralString-value-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;&lt;em&gt;String&lt;/em&gt;&lt;/code&gt; value that is the result of evaluating this &lt;code&gt;LiteralString&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralString-value"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-LiteralString-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralString&lt;/code&gt; is a &lt;code&gt;LiteralExpression&lt;/code&gt; that provides a &lt;code&gt;&lt;em&gt;String&lt;/em&gt;&lt;/code&gt; value as a result. Its &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; must have the type &lt;code&gt;&lt;em&gt;String&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-LiteralString"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-LiteralString-checkLiteralStringSpecialization" xmi:type="uml:Constraint" name="checkLiteralStringSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-LiteralString"/>
            <ownedComment xmi:id="Kernel-Expressions-LiteralString-checkLiteralStringSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralString&lt;/code&gt; must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Performances::literalStringEvaluations&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralString-checkLiteralStringSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-LiteralString-checkLiteralStringSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::literalStringEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-LiteralInteger" xmi:type="uml:Class" name="LiteralInteger">
          <generalization xmi:id="Kernel-Expressions-LiteralInteger-_generalization.Kernel-Expressions-LiteralExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-LiteralExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-LiteralInteger-value" xmi:type="uml:Property" name="value">
            <ownedComment xmi:id="Kernel-Expressions-LiteralInteger-value-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;&lt;em&gt;Integer&lt;/em&gt;&lt;/code&gt; value that is the result of evaluating this &lt;code&gt;LiteralInteger&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralInteger-value"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-Expressions-LiteralInteger-value-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The Integer value that is the result of evaluating this Expression.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralInteger-value"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Integer"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-LiteralInteger-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralInteger&lt;/code&gt; is a &lt;code&gt;LiteralExpression&lt;/code&gt; that provides an &lt;code&gt;&lt;em&gt;Integer&lt;/em&gt;&lt;/code&gt; value as a result. Its &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; must have the type &lt;code&gt;&lt;em&gt;Integer&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-LiteralInteger"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-LiteralInteger-checkLiteralIntegerSpecialization" xmi:type="uml:Constraint" name="checkLiteralIntegerSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-LiteralInteger"/>
            <ownedComment xmi:id="Kernel-Expressions-LiteralInteger-checkLiteralIntegerSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralInteger&lt;/code&gt; must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Performances::literalIntegerEvaluations&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralInteger-checkLiteralIntegerSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-LiteralInteger-checkLiteralIntegerSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::literalIntegerEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-InstantiationExpression" xmi:type="uml:Class" isAbstract="true" name="InstantiationExpression">
          <generalization xmi:id="Kernel-Expressions-InstantiationExpression-_generalization.Kernel-Functions-Expression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-Expression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-InstantiationExpression-argument" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="argument">
            <association xmi:idref="Kernel-Expressions-A_argument_instantiation"/>
            <lowerValue xmi:id="Kernel-Expressions-InstantiationExpression-argument-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Expressions-InstantiationExpression-argument-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Expressions&lt;/code&gt; whose &lt;code&gt;results&lt;/code&gt; are bound to &lt;code&gt;features&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt;. The &lt;code&gt;arguments&lt;/code&gt; are ordered consistent with the order of the &lt;code&gt;features&lt;/code&gt;, though they may not be one-to-one with all the &lt;code&gt;features&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; The derivation of &lt;code&gt;argument&lt;/code&gt; is given in the concrete subclasses of &lt;code&gt;InstantiationExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InstantiationExpression-argument"/>
</ownedComment>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Expressions-InstantiationExpression-argument-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType" xmi:type="uml:Property" isDerived="true" name="instantiatedType">
            <association xmi:idref="Kernel-Expressions-A_instantiatedType_instantiationExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that is being instantiated.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InstantiationExpression-instantiatedType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-member"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-InstantiationExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;InstantiationExpression&lt;/code&gt; is an &lt;code&gt;Expression&lt;/code&gt; that instantiates its &lt;code&gt;instantiatedType&lt;/code&gt;, binding some or all of the &lt;code&gt;features&lt;/code&gt; of that &lt;code&gt;Type&lt;/code&gt; to the &lt;code&gt;results&lt;/code&gt; of its &lt;code&gt;arguments&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;&lt;code&gt;InstantiationExpression&lt;/code&gt; is abstract, with concrete subclasses &lt;code&gt;InvocationExpression&lt;/code&gt; and &lt;code&gt;ConstructorExpression&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-InstantiationExpression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType_" xmi:type="uml:Operation" name="instantiatedType">
            <bodyCondition xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let members : Sequence(Element) = ownedMembership-&gt;     reject(oclIsKindOf(FeatureMembership)).memberElement in if members-&gt;isEmpty() or not members-&gt;first().oclIsKindOf(Type) then null else typeMembers-&gt;first().oclAsType(Type) endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the &lt;code&gt;Type&lt;/code&gt; to act as the &lt;code&gt;instantiatedType&lt;/code&gt; for this &lt;code&gt;InstantiationExpression&lt;/code&gt;. By default, this is the &lt;code&gt;memberElement&lt;/code&gt; of the first &lt;code&gt;ownedMembership&lt;/code&gt; that is not a &lt;code&gt;FeatureMembership&lt;/code&gt;, which must be a &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;&lt;b&gt;Note.&lt;/b&gt; This operation is overridden in the subclass &lt;code&gt;OperatorExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InstantiationExpression-instantiatedType_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Kernel-Expressions-InstantiationExpression-instantiatedType_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-InstantiationExpression-instantiatedType_-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-InstantiationExpression-deriveInstantiationExpressionInstantiatedType" xmi:type="uml:Constraint" name="deriveInstantiationExpressionInstantiatedType">
            <constrainedElement xmi:idref="Kernel-Expressions-InstantiationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InstantiationExpression-deriveInstantiationExpressionInstantiatedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;instantiatedType&lt;/code&gt; of an &lt;code&gt;InstantiationExpression&lt;/code&gt; is given by the result of the &lt;code&gt;instantiatedType()&lt;/code&gt; operation.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InstantiationExpression-deriveInstantiationExpressionInstantiatedType"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InstantiationExpression-deriveInstantiationExpressionInstantiatedType-specification0" xmi:type="uml:OpaqueExpression" body="instantiatedType = instantiatedType()" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionResult" xmi:type="uml:Constraint" name="validateInstantiationExpressionResult">
            <constrainedElement xmi:idref="Kernel-Expressions-InstantiationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionResult-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;InstantiationExpression&lt;/code&gt; must own its &lt;code&gt;result&lt;/code&gt; parameter.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionResult"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionResult-specification0" xmi:type="uml:OpaqueExpression" body="result.owningType = self" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionInstantiatedType" xmi:type="uml:Constraint" name="validateInstantiationExpressionInstantiatedType">
            <constrainedElement xmi:idref="Kernel-Expressions-InstantiationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionInstantiatedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;InstantiationExpression&lt;/code&gt; must have an &lt;code&gt;InstantiatedType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionInstantiatedType"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-InstantiationExpression-validateInstantiationExpressionInstantiatedType-specification0" xmi:type="uml:OpaqueExpression" body="instantiatedType() &lt;&gt; null" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-MetadataAccessExpression" xmi:type="uml:Class" name="MetadataAccessExpression">
          <generalization xmi:id="Kernel-Expressions-MetadataAccessExpression-_generalization.Kernel-Functions-Expression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-Expression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-MetadataAccessExpression-referencedElement" xmi:type="uml:Property" isDerived="true" name="referencedElement">
            <association xmi:idref="Kernel-Expressions-A_referencedElement_accessExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-MetadataAccessExpression-referencedElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-referencedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; whose metadata is being accessed.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression-referencedElement"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-member"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Kernel-Expressions-MetadataAccessExpression-referencedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MetadataAccessExpression&lt;/code&gt; is an &lt;code&gt;Expression&lt;/code&gt; whose &lt;code&gt;result&lt;/code&gt; is a sequence of instances of &lt;code&gt;Metaclasses&lt;/code&gt; representing all the &lt;code&gt;MetadataFeature&lt;/code&gt; annotations of the &lt;code&gt;referencedElement&lt;/code&gt;. In addition, the sequence includes an instance of the reflective &lt;code&gt;Metaclass&lt;/code&gt; corresponding to the MOF class of the &lt;code&gt;referencedElement&lt;/code&gt;, with values for all the abstract syntax properties of the &lt;code&gt;referencedElement&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature" xmi:type="uml:Operation" name="modelLevelEvaluable">
            <bodyCondition xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="true" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MetadataAccessExpression&lt;/code&gt; is always model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-visited" xmi:type="uml:Parameter" name="visited">
              <lowerValue xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-visited-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-visited-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-MetadataAccessExpression-modelLevelEvaluable_Feature-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element" xmi:type="uml:Operation" name="evaluate">
            <bodyCondition xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="referencedElement.ownedElement-&gt;     select(oclIsKindOf(MetadataFeature)          and annotatedElement-&gt;includes(referencedElement))-&gt;     including(metaclassFeature())" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the &lt;code&gt;ownedElements&lt;/code&gt; of the &lt;code&gt;referencedElement&lt;/code&gt; that are &lt;code&gt;MetadataFeatures&lt;/code&gt; and have the &lt;code&gt;referencedElement&lt;/code&gt; as an &lt;code&gt;annotatedElement&lt;/code&gt;, plus a &lt;code&gt;MetadataFeature&lt;/code&gt; whose &lt;code&gt;annotatedElement&lt;/code&gt; is the &lt;code&gt;referencedElement&lt;/code&gt;, whose &lt;code&gt;metaclass&lt;/code&gt; is the reflective &lt;code&gt;Metaclass&lt;/code&gt; corresponding to the MOF class of the &lt;code&gt;referencedElement&lt;/code&gt; and whose &lt;code&gt;ownedFeatures&lt;/code&gt; are bound to the values of the MOF properties of the &lt;code&gt;referencedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression-evaluate_Element"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-target" xmi:type="uml:Parameter" name="target">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-result" xmi:type="uml:Parameter" isOrdered="true" isUnique="false" name="result">
              <lowerValue xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-result-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-MetadataAccessExpression-evaluate_Element-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-evaluate_Element"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Expressions-MetadataAccessExpression-metaclassFeature_" xmi:type="uml:Operation" name="metaclassFeature">
            <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-metaclassFeature_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return a &lt;code&gt;MetadataFeature&lt;/code&gt; whose &lt;code&gt;annotatedElement&lt;/code&gt; is the &lt;code&gt;referencedElement&lt;/code&gt;, whose &lt;code&gt;metaclass&lt;/code&gt; is the reflective &lt;code&gt;Metaclass&lt;/code&gt; corresponding to the MOF class of the &lt;code&gt;referencedElement&lt;/code&gt; and whose &lt;code&gt;ownedFeatures&lt;/code&gt; are bound to the MOF properties of the &lt;code&gt;referencedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression-metaclassFeature_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-MetadataAccessExpression-metaclassFeature_-" xmi:type="uml:Parameter" name="">
              <type xmi:idref="Kernel-Metadata-MetadataFeature"/>
            </ownedParameter>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-MetadataAccessExpression-validateMetadataAccessExpressionReferencedElement" xmi:type="uml:Constraint" name="validateMetadataAccessExpressionReferencedElement">
            <constrainedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-validateMetadataAccessExpressionReferencedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MetadataAccessExpression&lt;/code&gt; must have at least one &lt;code&gt;ownedMember&lt;/code&gt; that is not a &lt;code&gt;FeatureMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression-validateMetadataAccessExpressionReferencedElement"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-MetadataAccessExpression-validateMetadataAccessExpressionReferencedElement-specification0" xmi:type="uml:OpaqueExpression" body="ownedMembership-&gt;exists(not oclIsKindOf(FeatureMembership))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-MetadataAccessExpression-deriveMetadataAccessExpressionReferencdElement" xmi:type="uml:Constraint" name="deriveMetadataAccessExpressionReferencdElement">
            <constrainedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-deriveMetadataAccessExpressionReferencdElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;referencedElement&lt;/code&gt; of a &lt;code&gt;MetadataAccessExpression&lt;/code&gt; is the &lt;code&gt;memberElement&lt;/code&gt; of its first &lt;code&gt;ownedMembership&lt;/code&gt; that is not a &lt;code&gt;FeatureMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression-deriveMetadataAccessExpressionReferencdElement"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-MetadataAccessExpression-deriveMetadataAccessExpressionReferencdElement-specification0" xmi:type="uml:OpaqueExpression" body="referencedElement =     let elements : Sequence(Element) = ownedMembership-&gt;         reject(oclIsKindOf(FeatureMembership)).memberElement in     if elements-&gt;isEmpty() then null     else elements-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-MetadataAccessExpression-checkMetadataAccessExpressionSpecialization" xmi:type="uml:Constraint" name="checkMetadataAccessExpressionSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-MetadataAccessExpression-checkMetadataAccessExpressionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MetadataAccessExpression&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;MetadataAccessExpression&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::metadataAccessEvaluations&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-MetadataAccessExpression-checkMetadataAccessExpressionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-MetadataAccessExpression-checkMetadataAccessExpressionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::metadataAccessEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-A_referent_referenceExpression" xmi:type="uml:Association" name="A_referent_referenceExpression">
          <memberEnd xmi:idref="Kernel-Expressions-FeatureReferenceExpression-referent"/>
          <memberEnd xmi:idref="Kernel-Expressions-A_referent_referenceExpression-referenceExpression"/>
          <ownedEnd xmi:id="Kernel-Expressions-A_referent_referenceExpression-referenceExpression" xmi:type="uml:Property" isDerived="true" name="referenceExpression">
            <association xmi:idref="Kernel-Expressions-A_referent_referenceExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-A_referent_referenceExpression-referenceExpression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Expressions-A_referent_referenceExpression-referenceExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; that has a certain &lt;code&gt;referent&lt;/code&gt; &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-A_referent_referenceExpression-referenceExpression"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            <type xmi:idref="Kernel-Expressions-FeatureReferenceExpression"/>
            <upperValue xmi:id="Kernel-Expressions-A_referent_referenceExpression-referenceExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-A_instantiatedType_instantiationExpression" xmi:type="uml:Association" name="A_instantiatedType_instantiationExpression">
          <memberEnd xmi:idref="Kernel-Expressions-InstantiationExpression-instantiatedType"/>
          <memberEnd xmi:idref="Kernel-Expressions-A_instantiatedType_instantiationExpression-instantiationExpression"/>
          <ownedEnd xmi:id="Kernel-Expressions-A_instantiatedType_instantiationExpression-instantiationExpression" xmi:type="uml:Property" isDerived="true" name="instantiationExpression">
            <association xmi:idref="Kernel-Expressions-A_instantiatedType_instantiationExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-A_instantiatedType_instantiationExpression-instantiationExpression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            <type xmi:idref="Kernel-Expressions-InstantiationExpression"/>
            <upperValue xmi:id="Kernel-Expressions-A_instantiatedType_instantiationExpression-instantiationExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-A_referencedElement_accessExpression" xmi:type="uml:Association" name="A_referencedElement_accessExpression">
          <memberEnd xmi:idref="Kernel-Expressions-MetadataAccessExpression-referencedElement"/>
          <memberEnd xmi:idref="Kernel-Expressions-A_referencedElement_accessExpression-accessExpression"/>
          <ownedEnd xmi:id="Kernel-Expressions-A_referencedElement_accessExpression-accessExpression" xmi:type="uml:Property" isDerived="true" name="accessExpression">
            <association xmi:idref="Kernel-Expressions-A_referencedElement_accessExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-A_referencedElement_accessExpression-accessExpression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Expressions-A_referencedElement_accessExpression-accessExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;MetadataAccessExpressions&lt;/code&gt; having a certain &lt;code&gt;Element&lt;/code&gt; as their &lt;code&gt;referencedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-A_referencedElement_accessExpression-accessExpression"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            <type xmi:idref="Kernel-Expressions-MetadataAccessExpression"/>
            <upperValue xmi:id="Kernel-Expressions-A_referencedElement_accessExpression-accessExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-InvocationExpression" xmi:type="uml:Class" name="InvocationExpression">
          <generalization xmi:id="Kernel-Expressions-InvocationExpression-_generalization.Kernel-Expressions-InstantiationExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-InstantiationExpression"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;InvocationExpression&lt;/code&gt; is an &lt;code&gt;InstantiationExpression&lt;/code&gt; whose &lt;code&gt;instantiatedType&lt;/code&gt; must be a &lt;code&gt;Behavior&lt;/code&gt; or a &lt;code&gt;Feature&lt;/code&gt; typed by a single &lt;code&gt;Behavior&lt;/code&gt; (such as a &lt;code&gt;Step&lt;/code&gt;). Each of the input &lt;code&gt;parameters&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; are bound to the &lt;code&gt;result&lt;/code&gt; of an &lt;code&gt;argument&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt;. If the &lt;code&gt;instantiatedType&lt;/code&gt; is a &lt;code&gt;Function&lt;/code&gt; or a &lt;code&gt;Feature&lt;/code&gt; typed by a &lt;code&gt;Function&lt;/code&gt;, then the &lt;code&gt;result&lt;/code&gt; of the &lt;code&gt;InvocationExpression&lt;/code&gt; is the &lt;code&gt;result&lt;/code&gt; of the invoked &lt;code&gt;Function&lt;/code&gt;. Otherwise, the &lt;code&gt;result&lt;/code&gt; is an instance of the &lt;code&gt;instantiatedType&lt;/code&gt; (essentially like a behavioral &lt;code&gt;ConstructorExpression&lt;/code&gt;).&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature" xmi:type="uml:Operation" name="modelLevelEvaluable">
            <bodyCondition xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="argument-&gt;forAll(modelLevelEvaluable(visited)) and function.isModelLevelEvaluable" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;InvocationExpression&lt;/code&gt; is model-level evaluable if all its &lt;code&gt;argument&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt; are model-level evaluable and its &lt;code&gt;function&lt;/code&gt; is model-level evaluable.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-visited" xmi:type="uml:Parameter" name="visited">
              <lowerValue xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-visited-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-visited-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-InvocationExpression-modelLevelEvaluable_Feature-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Expressions-InvocationExpression-evaluate_Element" xmi:type="uml:Operation" name="evaluate">
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-evaluate_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Apply the &lt;code&gt;Function&lt;/code&gt; that is the &lt;code&gt;type&lt;/code&gt; of this &lt;code&gt;InvocationExpression&lt;/code&gt; to the argument values resulting from evaluating each of the &lt;code&gt;argument&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt; on the given &lt;code&gt;target&lt;/code&gt;. If the application is not possible, then return an empty sequence.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-evaluate_Element"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-InvocationExpression-evaluate_Element-target" xmi:type="uml:Parameter" name="target">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-InvocationExpression-evaluate_Element-result" xmi:type="uml:Parameter" isOrdered="true" isUnique="false" name="result">
              <lowerValue xmi:id="Kernel-Expressions-InvocationExpression-evaluate_Element-result-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Expressions-InvocationExpression-evaluate_Element-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-evaluate_Element"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionParameterRedefinition" xmi:type="uml:Constraint" name="validateInvocationExpressionParameterRedefinition">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionParameterRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Each &lt;code&gt;input&lt;/code&gt; parameter of an &lt;code&gt;InvocationExpression&lt;/code&gt; must redefine exactly one &lt;code&gt;input&lt;/code&gt; parameter of the &lt;code&gt;instantiatedType&lt;/code&gt; of the &lt;code&gt;InvocationExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-validateInvocationExpressionParameterRedefinition"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionParameterRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="let parameters : OrderedSet(Feature) = instantiatedType.input in input-&gt;forAll(inp |      inp.ownedRedefinition.redefinedFeature-&gt;         intersection(parameters)-&gt;size() = 1)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorResultSpecialization" xmi:type="uml:Constraint" name="checkInvocationExpressionBehaviorResultSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorResultSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;instantiatedType&lt;/code&gt; of an &lt;code&gt;InvocationExpression&lt;/code&gt; is neither a &lt;code&gt;Function&lt;/code&gt; nor a &lt;code&gt;Feature&lt;/code&gt; whose type is a &lt;code&gt;Function&lt;/code&gt;, then the &lt;code&gt;result&lt;/code&gt; of the &lt;code&gt;InvocationExpression&lt;/code&gt; must specialize the &lt;code&gt;instantiatedType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorResultSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorResultSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="not instantiatedType.oclIsKindOf(Function) and not (instantiatedType.oclIsKindOf(Feature) and       instantiatedType.oclAsType(Feature).type-&gt;exists(oclIsKindOf(Function))) implies     result.specializes(instantiatedType)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionNoDuplicateParameterRedefinition" xmi:type="uml:Constraint" name="validateInvocationExpressionNoDuplicateParameterRedefinition">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionNoDuplicateParameterRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Two different &lt;code&gt;ownedFeatures&lt;/code&gt; of an &lt;code&gt;InvocationExpression&lt;/code&gt; must not redefine the same &lt;code&gt;feature&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; of the &lt;code&gt;InvocationExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-validateInvocationExpressionNoDuplicateParameterRedefinition"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionNoDuplicateParameterRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="let features : OrderedSet(Feature) = instantiatedType.feature in input-&gt;forAll(inp1 | input-&gt;forAll(inp2 |     inp1 &lt;&gt; inp2 implies         inp1.ownedRedefinition.redefinedFeature-&gt;             intersection(inp2.ownedRedefinition.redefinedFeature)-&gt;             intersection(features)-&gt;isEmpty()))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionSpecialization" xmi:type="uml:Constraint" name="checkInvocationExpressionSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;InvocationExpression&lt;/code&gt; must specialize its &lt;code&gt;instantiatedType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-checkInvocationExpressionSpecialization"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializes(instantiatedType)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-deriveInvocationExpressionArgument" xmi:type="uml:Constraint" name="deriveInvocationExpressionArgument">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-deriveInvocationExpressionArgument-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;arguments&lt;/code&gt; of an &lt;code&gt;InvocationExpression&lt;/code&gt; are the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt; of the &lt;code&gt;FeatureValues&lt;/code&gt; of its &lt;code&gt;ownedFeatures&lt;/code&gt;, in an order corresponding to the order of the &lt;code&gt;input&lt;/code&gt; parameters of the &lt;code&gt;instantiatedType&lt;/code&gt; that the &lt;code&gt;ownedFeatures&lt;/code&gt; redefine.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-deriveInvocationExpressionArgument"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-deriveInvocationExpressionArgument-specification0" xmi:type="uml:OpaqueExpression" body="instantiatedType.input-&gt;collect(inp |      ownedFeatures-&gt;select(redefines(inp)).valuation-&gt;     select(v | v &lt;&gt; null).value )" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorBindingConnector" xmi:type="uml:Constraint" name="checkInvocationExpressionBehaviorBindingConnector">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorBindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;instantiatedType&lt;/code&gt; of an &lt;code&gt;InvocationExpression&lt;/code&gt; is neither a &lt;code&gt;Function&lt;/code&gt; nor a &lt;code&gt;Feature&lt;/code&gt; whose type is a &lt;code&gt;Function&lt;/code&gt;, then the &lt;code&gt;InvocationExpression&lt;/code&gt; must own a &lt;code&gt;BindingConnector&lt;/code&gt; between itself and its &lt;code&gt;result&lt;/code&gt; parameter.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorBindingConnector"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionBehaviorBindingConnector-specification0" xmi:type="uml:OpaqueExpression" body="not instantiatedType.oclIsKindOf(Function) and not (instantiatedType.oclIsKindOf(Feature) and       instantiatedType.oclAsType(Feature).type-&gt;exists(oclIsKindOf(Function))) implies     ownedFeature.selectByKind(BindingConnector)-&gt;exists(         relatedFeature-&gt;includes(self) and         relatedFeature-&gt;includes(result))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionOwnedFeatures" xmi:type="uml:Constraint" name="validateInvocationExpressionOwnedFeatures">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionOwnedFeatures-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Other than its &lt;code&gt;result&lt;/code&gt;, all the &lt;code&gt;ownedFeatures&lt;/code&gt; of an &lt;code&gt;InvocationExpression&lt;/code&gt; must have &lt;code&gt;direction = in&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-validateInvocationExpressionOwnedFeatures"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionOwnedFeatures-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeature-&gt;forAll(f | f &lt;&gt; result implies f.direction = FeatureDirectionKind::_'in')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionDefaultValueBindingConnector" xmi:type="uml:Constraint" name="checkInvocationExpressionDefaultValueBindingConnector">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionDefaultValueBindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;InvocationExpression&lt;/code&gt; must own a &lt;code&gt;BindingConnector&lt;/code&gt; between the &lt;code&gt;featureWithValue&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; of any &lt;code&gt;FeatureValue&lt;/code&gt; that is the effective default value for a &lt;code&gt;feature&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; of the &lt;code&gt;InvocationExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-checkInvocationExpressionDefaultValueBindingConnector"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-checkInvocationExpressionDefaultValueBindingConnector-specification0" xmi:type="uml:OpaqueExpression" body="TBD" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionInstantiatedType" xmi:type="uml:Constraint" name="validateInvocationExpressionInstantiatedType">
            <constrainedElement xmi:idref="Kernel-Expressions-InvocationExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionInstantiatedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;instantiatedType&lt;/code&gt; of an &lt;code&gt;InvocationExpression&lt;/code&gt; must be either a &lt;code&gt;Behavior&lt;/code&gt; or a &lt;code&gt;Feature&lt;/code&gt; with a single &lt;code&gt;type&lt;/code&gt;, which is a &lt;code&gt;Behavior&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-InvocationExpression-validateInvocationExpressionInstantiatedType"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-InvocationExpression-validateInvocationExpressionInstantiatedType-specification0" xmi:type="uml:OpaqueExpression" body="instantiatedType.oclIsKindOf(Behavior) or instantiatedType.oclIsKindOf(Feature) and     instantiatedType.type-&gt;exists(oclIsKindOf(Behavior)) and     instantiatedType.type-&gt;size(1)" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-LiteralExpression" xmi:type="uml:Class" name="LiteralExpression">
          <generalization xmi:id="Kernel-Expressions-LiteralExpression-_generalization.Kernel-Functions-Expression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-Expression"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Expressions-LiteralExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralExpression&lt;/code&gt; is an &lt;code&gt;Expression&lt;/code&gt; that provides a basic &lt;code&gt;&lt;em&gt;DataValue&lt;/em&gt;&lt;/code&gt; as a result.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-LiteralExpression"/>
          </ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature" xmi:type="uml:Operation" name="modelLevelEvaluable">
            <bodyCondition xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="true" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralExpression&lt;/code&gt; is always model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-visited" xmi:type="uml:Parameter" name="visited">
              <lowerValue xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-visited-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-visited-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-LiteralExpression-modelLevelEvaluable_Feature-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element" xmi:type="uml:Operation" name="evaluate">
            <bodyCondition xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="Sequence{self}" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The model-level value of a &lt;code&gt;LiteralExpression&lt;/code&gt; is itself.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralExpression-evaluate_Element"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element-target" xmi:type="uml:Parameter" name="target">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element-result" xmi:type="uml:Parameter" isOrdered="true" isUnique="false" name="result">
              <lowerValue xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element-result-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Expressions-LiteralExpression-evaluate_Element-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-LiteralExpression-evaluate_Element-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-evaluate_Element"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-LiteralExpression-deriveLiteralExpressionIsModelLevelEvaluable" xmi:type="uml:Constraint" name="deriveLiteralExpressionIsModelLevelEvaluable">
            <constrainedElement xmi:idref="Kernel-Expressions-LiteralExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-LiteralExpression-deriveLiteralExpressionIsModelLevelEvaluable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralExpression&lt;/code&gt; is always model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralExpression-deriveLiteralExpressionIsModelLevelEvaluable"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-LiteralExpression-deriveLiteralExpressionIsModelLevelEvaluable-specification0" xmi:type="uml:OpaqueExpression" body="isModelLevelEvaluable = true" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-LiteralExpression-checkLiteralExpressionSpecialization" xmi:type="uml:Constraint" name="checkLiteralExpressionSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-LiteralExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-LiteralExpression-checkLiteralExpressionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralExpression&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;LiteralExpression&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::literalEvaluations&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralExpression-checkLiteralExpressionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-LiteralExpression-checkLiteralExpressionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::literalEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-OperatorExpression" xmi:type="uml:Class" name="OperatorExpression">
          <generalization xmi:id="Kernel-Expressions-OperatorExpression-_generalization.Kernel-Expressions-InvocationExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-InvocationExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-OperatorExpression-operator" xmi:type="uml:Property" name="operator">
            <ownedComment xmi:id="Kernel-Expressions-OperatorExpression-operator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;operator&lt;/code&gt; symbol that names a corresponding &lt;code&gt;Function&lt;/code&gt; from one of the standard packages from the Kernel Function Library .&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-OperatorExpression-operator"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-OperatorExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;OperatorExpression&lt;/code&gt; is an &lt;code&gt;InvocationExpression&lt;/code&gt; whose &lt;code&gt;function&lt;/code&gt; is determined by resolving its &lt;code&gt;operator&lt;/code&gt; in the context of one of the standard packages from the Kernel Function Library.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-OperatorExpression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-OperatorExpression-instantiatedType_" xmi:type="uml:Operation" name="instantiatedType">
            <bodyCondition xmi:id="Kernel-Expressions-OperatorExpression-instantiatedType_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-OperatorExpression-instantiatedType_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let libFunctions : Sequence(Element) =     Sequence{'BaseFunctions', 'DataFunctions', 'ControlFunctions'}-&gt;     collect(ns | resolveGlobal(ns + &quot;::'&quot; + operator + &quot;'&quot;).     memberElement) in if libFunctions-&gt;isEmpty() then null else libFunctions-&gt;first().oclAsType(Type) endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-OperatorExpression-instantiatedType_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;instantiatedType&lt;/code&gt; of an &lt;code&gt;OperatorExpression&lt;/code&gt; is the resolution of it's &lt;code&gt;operator&lt;/code&gt; from one of the packages &lt;em&gt;&lt;code&gt;BaseFunctions&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;DataFunctions&lt;/code&gt;&lt;/em&gt;, or &lt;em&gt;&lt;code&gt;ControlFunctions&lt;/code&gt;&lt;/em&gt; from the Kernel Function Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-OperatorExpression-instantiatedType_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-OperatorExpression-instantiatedType_-" xmi:type="uml:Parameter" name="">
              <type xmi:idref="Core-Types-Type"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-OperatorExpression-instantiatedType_-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Expressions-InstantiationExpression-instantiatedType_"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-ConstructorExpression" xmi:type="uml:Class" name="ConstructorExpression">
          <generalization xmi:id="Kernel-Expressions-ConstructorExpression-_generalization.Kernel-Expressions-InstantiationExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-InstantiationExpression"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ConstructorExpression&lt;/code&gt; is an &lt;code&gt;InstantiationExpression&lt;/code&gt; whose &lt;code&gt;result&lt;/code&gt; specializes its &lt;code&gt;instantiatedType&lt;/code&gt;, binding some or all of the &lt;code&gt;features&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; to the &lt;code&gt;results&lt;/code&gt; of its &lt;code&gt;argument&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature" xmi:type="uml:Operation" name="modelLevelEvaluable">
            <bodyCondition xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="argument-&gt;forAll(modelLevelEvaluable(visited))" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ConstructorExpression&lt;/code&gt; is model-level evaluable if all its argument &lt;code&gt;Expressions&lt;/code&gt; are model-level evaluable.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-visited" xmi:type="uml:Parameter" name="visited">
              <lowerValue xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-visited-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-visited-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-ConstructorExpression-modelLevelEvaluable_Feature-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionSpecialization" xmi:type="uml:Constraint" name="checkConstructorExpressionSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ConstructorExpression&lt;/code&gt; must directly or indirectly specialize the &lt;code&gt;Expression&lt;/code&gt; &lt;em&gt;&lt;code&gt;Performances::constructorEvaluations&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializes('Performances::constructorEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultDefaultValueBindingConnector" xmi:type="uml:Constraint" name="checkConstructorExpressionResultDefaultValueBindingConnector">
            <constrainedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultDefaultValueBindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; of a &lt;code&gt;ConstructorExpression&lt;/code&gt; must own a &lt;code&gt;BindingConnector&lt;/code&gt; between the &lt;code&gt;featureWithValue&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; of any &lt;code&gt;FeatureValue&lt;/code&gt; that is the effective default value for a &lt;code&gt;feature&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; of the &lt;code&gt;InvocationExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultDefaultValueBindingConnector"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultDefaultValueBindingConnector-specification0" xmi:type="uml:OpaqueExpression" body="TBD" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-ConstructorExpression-deriveConstructorExpressionArgument" xmi:type="uml:Constraint" name="deriveConstructorExpressionArgument">
            <constrainedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-deriveConstructorExpressionArgument-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;arguments&lt;/code&gt; of a &lt;code&gt;ConstructorExpression&lt;/code&gt; are the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt; of the &lt;code&gt;FeatureValues&lt;/code&gt; of the &lt;code&gt;ownedFeatures&lt;/code&gt; of its &lt;code&gt;result&lt;/code&gt; parameter, in an order corresponding to the order of the &lt;code&gt;features&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; that the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;ownedFeatures&lt;/code&gt; redefine.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-deriveConstructorExpressionArgument"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-ConstructorExpression-deriveConstructorExpressionArgument-specification0" xmi:type="uml:OpaqueExpression" body="instantiatedType.feature-&gt;collect(f |      result.ownedFeatures-&gt;select(redefines(f)).valuation-&gt;     select(v | v &lt;&gt; null).value )" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultSpecialization" xmi:type="uml:Constraint" name="checkConstructorExpressionResultSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; of a &lt;code&gt;ConstructorExpression&lt;/code&gt; must specialize the &lt;code&gt;instantiatedType&lt;/code&gt; of the &lt;code&gt;ConstructorExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="result.specializes(instantiatedType)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionNoDuplicateFeatureRedefinition" xmi:type="uml:Constraint" name="validateConstructorExpressionNoDuplicateFeatureRedefinition">
            <constrainedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionNoDuplicateFeatureRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Two different &lt;code&gt;ownedFeatures&lt;/code&gt; of the &lt;code&gt;result&lt;/code&gt; of a &lt;code&gt;ConstructorExpression&lt;/code&gt; must not redefine the same &lt;code&gt;feature&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; of the &lt;code&gt;ConstructorExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionNoDuplicateFeatureRedefinition"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionNoDuplicateFeatureRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="let features : OrderedSet(Feature) = instantiatedType.feature-&gt;     select(visibility = VisibilityKind::public) in result.ownedFeature-&gt;forAll(f1 | result.ownedFeature-&gt;forAll(f2 |     f1 &lt;&gt; f2 implies         f1.ownedRedefinition.redefinedFeature-&gt;             intersection(f2.ownedRedefinition.redefinedFeature)-&gt;             intersection(features)-&gt;isEmpty()))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionOwnedFeatures" xmi:type="uml:Constraint" name="validateConstructorExpressionOwnedFeatures">
            <constrainedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionOwnedFeatures-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ConstructorExpression&lt;/code&gt; must not have any &lt;code&gt;ownedFeatures&lt;/code&gt; other than its &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionOwnedFeatures"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-ConstructorExpression-validateConstructorExpressionOwnedFeatures-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeatures-&gt;excluding(result)-&gt;isEmpty()" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultFeatureRedefinition" xmi:type="uml:Constraint" name="checkConstructorExpressionResultFeatureRedefinition">
            <constrainedElement xmi:idref="Kernel-Expressions-ConstructorExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultFeatureRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Each &lt;code&gt;ownedFeature&lt;/code&gt; of the result of a &lt;code&gt;ConstructionExpression&lt;/code&gt; must redefine exactly one public &lt;code&gt;feature&lt;/code&gt; of the &lt;code&gt;instantiatedType&lt;/code&gt; of the &lt;code&gt;ConstructorExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultFeatureRedefinition"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-ConstructorExpression-checkConstructorExpressionResultFeatureRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="let features : OrderedSet(Feature) = instantiatedType.feature-&gt;     select(owningMembership.visibility = VisibilityKind::public) in result.ownedFeature-&gt;forAll(f |      f.ownedRedefinition.redefinedFeature-&gt;         intersection(features)-&gt;size() = 1)" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-LiteralRational" xmi:type="uml:Class" name="LiteralRational">
          <generalization xmi:id="Kernel-Expressions-LiteralRational-_generalization.Kernel-Expressions-LiteralExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-LiteralExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-LiteralRational-value" xmi:type="uml:Property" name="value">
            <ownedComment xmi:id="Kernel-Expressions-LiteralRational-value-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The value whose rational approximation is the result of evaluating this &lt;code&gt;LiteralRational&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralRational-value"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-Expressions-LiteralRational-value-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Real value that is the result of evaluating this Expression.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralRational-value"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Real"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-LiteralRational-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralRational&lt;/code&gt; is a &lt;code&gt;LiteralExpression&lt;/code&gt; that provides a &lt;code&gt;&lt;em&gt;Rational&lt;/em&gt;&lt;/code&gt; value as a result. Its &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; must have the type &lt;code&gt;&lt;em&gt;Rational&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-LiteralRational"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-LiteralRational-checkLiteralRationalSpecialization" xmi:type="uml:Constraint" name="checkLiteralRationalSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-LiteralRational"/>
            <ownedComment xmi:id="Kernel-Expressions-LiteralRational-checkLiteralRationalSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralRational&lt;/code&gt; must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Performances::literalRationalEvaluations&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralRational-checkLiteralRationalSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-LiteralRational-checkLiteralRationalSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::literalRationalEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-LiteralBoolean" xmi:type="uml:Class" name="LiteralBoolean">
          <generalization xmi:id="Kernel-Expressions-LiteralBoolean-_generalization.Kernel-Expressions-LiteralExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-LiteralExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-LiteralBoolean-value" xmi:type="uml:Property" name="value">
            <ownedComment xmi:id="Kernel-Expressions-LiteralBoolean-value-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/code&gt; value that is the result of evaluating this &lt;code&gt;LiteralBoolean&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralBoolean-value"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-Expressions-LiteralBoolean-value-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The Boolean value that is the result of evaluating this Expression.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralBoolean-value"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-LiteralBoolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;LiteralBoolean&lt;/code&gt; is a &lt;code&gt;LiteralExpression&lt;/code&gt; that provides a &lt;code&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/code&gt; value as a result. Its &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; must have type &lt;code&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-LiteralBoolean"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-LiteralBoolean-checkLiteralBooleanSpecialization" xmi:type="uml:Constraint" name="checkLiteralBooleanSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-LiteralBoolean"/>
            <ownedComment xmi:id="Kernel-Expressions-LiteralBoolean-checkLiteralBooleanSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralBoolean&lt;/code&gt; must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Performances::literalBooleanEvaluations&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralBoolean-checkLiteralBooleanSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-LiteralBoolean-checkLiteralBooleanSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::literalBooleanEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-LiteralInfinity" xmi:type="uml:Class" name="LiteralInfinity">
          <generalization xmi:id="Kernel-Expressions-LiteralInfinity-_generalization.Kernel-Expressions-LiteralExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-LiteralExpression"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Expressions-LiteralInfinity-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralInfinity&lt;/code&gt; is a &lt;code&gt;LiteralExpression&lt;/code&gt; that provides the positive infinity value (&lt;code&gt;*&lt;/code&gt;). It's &lt;code&gt;result&lt;/code&gt; must have the type &lt;code&gt;&lt;em&gt;Positive&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-LiteralInfinity"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-LiteralInfinity-checkLiteralInfinitySpecialization" xmi:type="uml:Constraint" name="checkLiteralInfinitySpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-LiteralInfinity"/>
            <ownedComment xmi:id="Kernel-Expressions-LiteralInfinity-checkLiteralInfinitySpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LiteralInfinity&lt;/code&gt; must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Performances::literalIntegerEvaluations&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-LiteralInfinity-checkLiteralInfinitySpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-LiteralInfinity-checkLiteralInfinitySpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::literalIntegerEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-NullExpression" xmi:type="uml:Class" name="NullExpression">
          <generalization xmi:id="Kernel-Expressions-NullExpression-_generalization.Kernel-Functions-Expression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-Expression"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Expressions-NullExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;NullExpression&lt;/code&gt; is an &lt;code&gt;Expression&lt;/code&gt; that results in a null value.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Expressions-NullExpression"/>
          </ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature" xmi:type="uml:Operation" name="modelLevelEvaluable">
            <bodyCondition xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="true" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;NullExpression&lt;/code&gt; is always model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-visited" xmi:type="uml:Parameter" name="visited">
              <lowerValue xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-visited-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-visited-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-NullExpression-modelLevelEvaluable_Feature-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Expressions-NullExpression-evaluate_Element" xmi:type="uml:Operation" name="evaluate">
            <bodyCondition xmi:id="Kernel-Expressions-NullExpression-evaluate_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-NullExpression-evaluate_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="Sequence{}" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-NullExpression-evaluate_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The model-level value of a &lt;code&gt;NullExpression&lt;/code&gt; is an empty sequence.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-NullExpression-evaluate_Element"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-NullExpression-evaluate_Element-target" xmi:type="uml:Parameter" name="target">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-NullExpression-evaluate_Element-result" xmi:type="uml:Parameter" isOrdered="true" isUnique="false" name="result">
              <lowerValue xmi:id="Kernel-Expressions-NullExpression-evaluate_Element-result-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Expressions-NullExpression-evaluate_Element-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-NullExpression-evaluate_Element-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-evaluate_Element"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-NullExpression-checkNullExpressionSpecialization" xmi:type="uml:Constraint" name="checkNullExpressionSpecialization">
            <constrainedElement xmi:idref="Kernel-Expressions-NullExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-NullExpression-checkNullExpressionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;NullExpression&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;NullExpression&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::nullEvaluations&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-NullExpression-checkNullExpressionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-NullExpression-checkNullExpressionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::nullEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-A_targetFeature_chainExpression" xmi:type="uml:Association" name="A_targetFeature_chainExpression">
          <memberEnd xmi:idref="Kernel-Expressions-FeatureChainExpression-targetFeature"/>
          <memberEnd xmi:idref="Kernel-Expressions-A_targetFeature_chainExpression-chainExpression"/>
          <ownedEnd xmi:id="Kernel-Expressions-A_targetFeature_chainExpression-chainExpression" xmi:type="uml:Property" isDerived="true" name="chainExpression">
            <association xmi:idref="Kernel-Expressions-A_targetFeature_chainExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-A_targetFeature_chainExpression-chainExpression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            <type xmi:idref="Kernel-Expressions-FeatureChainExpression"/>
            <upperValue xmi:id="Kernel-Expressions-A_targetFeature_chainExpression-chainExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-SelectExpression" xmi:type="uml:Class" name="SelectExpression">
          <generalization xmi:id="Kernel-Expressions-SelectExpression-_generalization.Kernel-Expressions-OperatorExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-OperatorExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-SelectExpression-operator" xmi:type="uml:Property" name="operator">
            <defaultValue xmi:id="Kernel-Expressions-SelectExpression-operator-defaultValue" xmi:type="uml:LiteralString" name="" value="select"/>
            <redefinedProperty xmi:idref="Kernel-Expressions-OperatorExpression-operator"/>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-SelectExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;SelectExpression&lt;/code&gt; is an &lt;code&gt;OperatorExpression&lt;/code&gt; whose operator is &lt;code&gt;&quot;select&quot;&lt;/code&gt;, which resolves to the &lt;code&gt;Function&lt;/code&gt; &lt;em&gt;&lt;code&gt;ControlFunctions::select&lt;/code&gt;&lt;/em&gt; from the Kernel Functions Library.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-SelectExpression"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-SelectExpression-validateSelectExpressionOperator" xmi:type="uml:Constraint" name="validateSelectExpressionOperator">
            <constrainedElement xmi:idref="Kernel-Expressions-SelectExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-SelectExpression-validateSelectExpressionOperator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;operator&lt;/code&gt; of a &lt;code&gt;SelectExpression&lt;/code&gt; must be &lt;code&gt;'select'&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-SelectExpression-validateSelectExpressionOperator"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-SelectExpression-validateSelectExpressionOperator-specification0" xmi:type="uml:OpaqueExpression" body="operator = 'select'" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-SelectExpression-checkSelectExpressionResultSpecialization" xmi:type="uml:Constraint" name="checkSelectExpressionResultSpecialization">
            <ownedComment xmi:id="Kernel-Expressions-SelectExpression-checkSelectExpressionResultSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; of a &lt;code&gt;SelectExpression&lt;/code&gt; must specialize the &lt;code&gt;result&lt;/code&gt; parameter of the first &lt;code&gt;argument&lt;/code&gt; of the &lt;code&gt;SelectExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-SelectExpression-checkSelectExpressionResultSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-SelectExpression-checkSelectExpressionResultSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="arguments-&gt;notEmpty() implies result.specializes(arguments-&gt;first().result)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-A_argument_instantiation" xmi:type="uml:Association" name="A_argument_instantiation">
          <memberEnd xmi:idref="Kernel-Expressions-InstantiationExpression-argument"/>
          <memberEnd xmi:idref="Kernel-Expressions-A_argument_instantiation-instantiation"/>
          <ownedEnd xmi:id="Kernel-Expressions-A_argument_instantiation-instantiation" xmi:type="uml:Property" isDerived="true" name="instantiation">
            <association xmi:idref="Kernel-Expressions-A_argument_instantiation"/>
            <lowerValue xmi:id="Kernel-Expressions-A_argument_instantiation-instantiation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Expressions-A_argument_instantiation-instantiation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;InstantiationExpression&lt;/code&gt; that has a certain &lt;code&gt;argument&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-A_argument_instantiation-instantiation"/>
            </ownedComment>
            <type xmi:idref="Kernel-Expressions-InstantiationExpression"/>
            <upperValue xmi:id="Kernel-Expressions-A_argument_instantiation-instantiation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-FeatureReferenceExpression" xmi:type="uml:Class" name="FeatureReferenceExpression">
          <generalization xmi:id="Kernel-Expressions-FeatureReferenceExpression-_generalization.Kernel-Functions-Expression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-Expression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-FeatureReferenceExpression-referent" xmi:type="uml:Property" isDerived="true" name="referent">
            <association xmi:idref="Kernel-Expressions-A_referent_referenceExpression"/>
            <lowerValue xmi:id="Kernel-Expressions-FeatureReferenceExpression-referent-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-referent-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is referenced by this &lt;code&gt;FeatureReferenceExpression&lt;/code&gt;, which is its first non-&lt;code&gt;parameter&lt;/code&gt; &lt;code&gt;member&lt;/code&gt;.&lt;p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-referent"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-member"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Expressions-FeatureReferenceExpression-referent-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; is an &lt;code&gt;Expression&lt;/code&gt; whose &lt;code&gt;result&lt;/code&gt; is bound to a &lt;code&gt;referent&lt;/code&gt; &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature" xmi:type="uml:Operation" name="modelLevelEvaluable">
            <bodyCondition xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="referent.conformsTo('Anything::self') or visited-&gt;excludes(referent) and  (referent.oclIsKindOf(Expression) and      referent.oclAsType(Expression).modelLevelEvaluable(visited-&gt;including(referent)) or referent.owningType &lt;&gt; null and      (referent.owningType.isOclKindOf(MetaClass) or      referent.owningType.isOclKindOf(MetadataFeature)) or referent.featuringType-&gt;isEmpty() and     (referent.valuation = null or      referent.valuation.modelLevelEvaluable(visited-&gt;including(referent))))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; is model-level evaluable if it&amp;#39;s &lt;code&gt;referent&lt;/code&gt;&lt;/p&gt;  &lt;ul&gt;  &lt;li&gt;conforms to the self-reference feature &lt;code&gt;&lt;em&gt;Anything::self&lt;/em&gt;&lt;/code&gt;;&lt;/li&gt;  &lt;li&gt;is an &lt;code&gt;Expression&lt;/code&gt; that is model-level evaluable;&lt;/li&gt;  &lt;li&gt;has an &lt;code&gt;owningType&lt;/code&gt; that is a &lt;code&gt;Metaclass&lt;/code&gt; or &lt;code&gt;MetadataFeature&lt;/code&gt;; or&lt;/li&gt;  &lt;li&gt;has no &lt;code&gt;featuringTypes&lt;/code&gt; and, if it has a &lt;code&gt;FeatureValue&lt;/code&gt;, the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; is model-level evaluable.&lt;/li&gt; &lt;/ul&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-visited" xmi:type="uml:Parameter" name="visited">
              <lowerValue xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-visited-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-visited-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-FeatureReferenceExpression-modelLevelEvaluable_Feature-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element" xmi:type="uml:Operation" name="evaluate">
            <bodyCondition xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if not target.oclIsKindOf(Type) then Sequence{} else     let feature: Sequence(Feature) =          target.oclAsType(Type).feature-&gt;select(f |             f.ownedRedefinition.redefinedFeature-&gt;                 includes(referent)) in         if feature-&gt;notEmpty() then              feature.valuation.value.evaluate(target)         else if referent.featuringType-&gt;isEmpty()              then referent         else Sequence{}          endif endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;First, determine a &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; for the &lt;code&gt;referent&lt;/code&gt;:&lt;/p&gt;  &lt;ul&gt;  &lt;li&gt;If the &lt;code&gt;target&lt;/code&gt; &lt;code&gt;Element&lt;/code&gt; is a Type that has a &lt;code&gt;feature&lt;/code&gt; that is the &lt;code&gt;referent&lt;/code&gt; or (directly or indirectly) redefines it, then the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; of the &lt;code&gt;FeatureValue&lt;/code&gt; for that &lt;code&gt;feature&lt;/code&gt; (if any).&lt;/li&gt;  &lt;li&gt;Else, if the &lt;code&gt;referent&lt;/code&gt; has no &lt;code&gt;featuringTypes&lt;/code&gt;, the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; of the &lt;code&gt;FeatureValue&lt;/code&gt; for the &lt;code&gt;referent&lt;/code&gt; (if any).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Then:&lt;/p&gt;  &lt;ul&gt;  &lt;li&gt;If such a value &lt;code&gt;Expression&lt;/code&gt; exists, return the result of evaluating that &lt;code&gt;Expression&lt;/code&gt; on the &lt;code&gt;target&lt;/code&gt;.&lt;/li&gt;  &lt;li&gt;Else, if the &lt;code&gt;referent&lt;/code&gt; is not an &lt;code&gt;Expression&lt;/code&gt;, return the &lt;code&gt;referent&lt;/code&gt;.&lt;/li&gt;  &lt;li&gt;Else return the empty sequence.&lt;/li&gt; &lt;/ul&gt; ">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-target" xmi:type="uml:Parameter" name="target">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-result" xmi:type="uml:Parameter" isOrdered="true" isUnique="false" name="result">
              <lowerValue xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-result-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Expressions-FeatureReferenceExpression-evaluate_Element-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Functions-Expression-evaluate_Element"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionReferentIsFeature" xmi:type="uml:Constraint" name="validateFeatureReferenceExpressionReferentIsFeature">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionReferentIsFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The first &lt;code&gt;ownedMembership&lt;/code&gt; of a &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; that is not a &lt;code&gt;ParameterMembership&lt;/code&gt; must have a &lt;code&gt;Feature&lt;/code&gt; as its &lt;code&gt;memberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionReferentIsFeature"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionReferentIsFeature-specification0" xmi:type="uml:OpaqueExpression" body="let membership : Membership =      ownedMembership-&gt;reject(m | m.oclIsKindOf(ParameterMembership)) in membership-&gt;notEmpty() and membership-&gt;at(1).memberElement.oclIsKindOf(Feature)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionBindingConnector" xmi:type="uml:Constraint" name="checkFeatureReferenceExpressionBindingConnector">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionBindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; must have an &lt;code&gt;ownedMember&lt;/code&gt; that is a &lt;code&gt;BindingConnector&lt;/code&gt; between the &lt;code&gt;referent&lt;/code&gt; and &lt;code&gt;result&lt;/code&gt; of the &lt;code&gt;FeatureReferenceExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionBindingConnector"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionBindingConnector-specification0" xmi:type="uml:OpaqueExpression" body="ownedMember-&gt;selectByKind(BindingConnector)-&gt;exists(b |     b.relatedFeatures-&gt;includes(targetFeature) and     b.relatedFeatures-&gt;includes(result))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionResultSpecialization" xmi:type="uml:Constraint" name="checkFeatureReferenceExpressionResultSpecialization">
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionResultSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; parameter of a &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; must specialize the &lt;code&gt;referent&lt;/code&gt; of the &lt;code&gt;FeatureReferenceExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionResultSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureReferenceExpression-checkFeatureReferenceExpressionResultSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="result.owningType() = self and result.specializes(referent)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureReferenceExpression-deriveFeatureReferenceExpressionReferent" xmi:type="uml:Constraint" name="deriveFeatureReferenceExpressionReferent">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-deriveFeatureReferenceExpressionReferent-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;referent&lt;/code&gt; of a &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; is the &lt;code&gt;memberElement&lt;/code&gt; of its first &lt;code&gt;ownedMembership&lt;/code&gt; that is not a &lt;code&gt;ParameterMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-deriveFeatureReferenceExpressionReferent"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureReferenceExpression-deriveFeatureReferenceExpressionReferent-specification0" xmi:type="uml:OpaqueExpression" body="referent =     let nonParameterMemberships : Sequence(Membership) = ownedMembership-&gt;         reject(oclIsKindOf(ParameterMembership)) in     if nonParameterMemberships-&gt;isEmpty() or        not nonParameterMemberships-&gt;first().memberElement.oclIsKindOf(Feature)     then null     else nonParameterMemberships-&gt;first().memberElement.oclAsType(Feature)     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionResult" xmi:type="uml:Constraint" name="validateFeatureReferenceExpressionResult">
            <constrainedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionResult-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureReferenceExpression&lt;/code&gt; must own its &lt;code&gt;result&lt;/code&gt; parameter.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionResult"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-FeatureReferenceExpression-validateFeatureReferenceExpressionResult-specification0" xmi:type="uml:OpaqueExpression" body="result.owningType = self" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-CollectExpression" xmi:type="uml:Class" name="CollectExpression">
          <generalization xmi:id="Kernel-Expressions-CollectExpression-_generalization.Kernel-Expressions-OperatorExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-OperatorExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-CollectExpression-operator" xmi:type="uml:Property" name="operator">
            <defaultValue xmi:id="Kernel-Expressions-CollectExpression-operator-defaultValue" xmi:type="uml:LiteralString" name="" value="collect"/>
            <redefinedProperty xmi:idref="Kernel-Expressions-OperatorExpression-operator"/>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-CollectExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;CollectExpression&lt;/code&gt; is an &lt;code&gt;OperatorExpression&lt;/code&gt; whose &lt;code&gt;operator&lt;/code&gt; is &lt;code&gt;&quot;collect&quot;&lt;/code&gt;, which resolves to the &lt;code&gt;Function&lt;/code&gt; &lt;em&gt;&lt;code&gt;ControlFunctions::collect&lt;/code&gt;&lt;/em&gt; from the Kernel Functions Library.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-CollectExpression"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-CollectExpression-validateCollectExpressionOperator" xmi:type="uml:Constraint" name="validateCollectExpressionOperator">
            <constrainedElement xmi:idref="Kernel-Expressions-CollectExpression"/>
            <ownedComment xmi:id="Kernel-Expressions-CollectExpression-validateCollectExpressionOperator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;operator&lt;/code&gt; of a &lt;code&gt;CollectExpression&lt;/code&gt; must be &lt;code&gt;&quot;collect&quot;&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-CollectExpression-validateCollectExpressionOperator"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-CollectExpression-validateCollectExpressionOperator-specification0" xmi:type="uml:OpaqueExpression" body="operator = 'collect'" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Expressions-IndexExpression" xmi:type="uml:Class" name="IndexExpression">
          <generalization xmi:id="Kernel-Expressions-IndexExpression-_generalization.Kernel-Expressions-OperatorExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Expressions-OperatorExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Expressions-IndexExpression-operator" xmi:type="uml:Property" name="operator">
            <defaultValue xmi:id="Kernel-Expressions-IndexExpression-operator-defaultValue" xmi:type="uml:LiteralString" name="" value="#"/>
            <redefinedProperty xmi:idref="Kernel-Expressions-OperatorExpression-operator"/>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Expressions-IndexExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;IndexExpression&lt;/code&gt; is an &lt;code&gt;OperatorExpression&lt;/code&gt; whose operator is &lt;code&gt;&quot;#&quot;&lt;/code&gt;, which resolves to the &lt;code&gt;Function&lt;/code&gt; &lt;em&gt;&lt;code&gt;BasicFunctions::'#'&lt;/code&gt;&lt;/em&gt; from the Kernel Functions Library.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Expressions-IndexExpression"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Expressions-IndexExpression-checkIndexExpressionResultSpecialization" xmi:type="uml:Constraint" name="checkIndexExpressionResultSpecialization">
            <ownedComment xmi:id="Kernel-Expressions-IndexExpression-checkIndexExpressionResultSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; of an &lt;code&gt;IndexExpression&lt;/code&gt; must specialize the &lt;code&gt;result&lt;/code&gt; parameter of the first &lt;code&gt;argument&lt;/code&gt; of the &lt;code&gt;IndexExpression&lt;/code&gt;, unless that &lt;code&gt;result&lt;/code&gt; already directly or indirectly specializes the &lt;code&gt;DataType&lt;/code&gt; &lt;em&gt;&lt;code&gt;Collections::Array&lt;/code&gt;&lt;/em&gt; from the Kernel Data Type Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-IndexExpression-checkIndexExpressionResultSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Expressions-IndexExpression-checkIndexExpressionResultSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="arguments-&gt;notEmpty() and  not arguments-&gt;first().result.specializesFromLibrary('Collections::Array') implies     result.specializes(arguments-&gt;first().result)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Expressions-IndexExpression-validateIndexExpressionOperator" xmi:type="uml:Constraint" name="validateIndexExpressionOperator">
            <ownedComment xmi:id="Kernel-Expressions-IndexExpression-validateIndexExpressionOperator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;operator&lt;/code&gt; of an &lt;code&gt;IndexExpression&lt;/code&gt; must be &lt;code&gt;&quot;#&quot;&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Expressions-IndexExpression-validateIndexExpressionOperator"/>
            </ownedComment>
            <specification xmi:id="Kernel-Expressions-IndexExpression-validateIndexExpressionOperator-specification0" xmi:type="uml:OpaqueExpression" body="operator = '#'" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Functions" xmi:type="uml:Package" URI="" name="Functions">
        <packagedElement xmi:id="Kernel-Functions-ReturnParameterMembership" xmi:type="uml:Class" name="ReturnParameterMembership">
          <generalization xmi:id="Kernel-Functions-ReturnParameterMembership-_generalization.Kernel-Behaviors-ParameterMembership" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Behaviors-ParameterMembership"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Functions-ReturnParameterMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ReturnParameterMembership&lt;/code&gt; is a &lt;code&gt;ParameterMembership&lt;/code&gt; that indicates that the &lt;code&gt;ownedMemberParameter&lt;/code&gt; is the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt;. The &lt;code&gt;direction&lt;/code&gt; of the &lt;code&gt;ownedMemberParameter&lt;/code&gt; must be &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Functions-ReturnParameterMembership"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Functions-ReturnParameterMembership-parameterDirection_" xmi:type="uml:Operation" isLeaf="true" name="parameterDirection">
            <bodyCondition xmi:id="Kernel-Functions-ReturnParameterMembership-parameterDirection_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Functions-ReturnParameterMembership-parameterDirection_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="FeatureDirectionKind::out" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Functions-ReturnParameterMembership-parameterDirection_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberParameter&lt;/code&gt; of a &lt;code&gt;ReturnParameterMembership&lt;/code&gt; must have direction &lt;code&gt;out&lt;/code&gt;. (This is a leaf operation that cannot be further redefined.)&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-ReturnParameterMembership-parameterDirection_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Functions-ReturnParameterMembership-parameterDirection_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Functions-ReturnParameterMembership-parameterDirection_--lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
              <type xmi:idref="Core-Types-FeatureDirectionKind"/>
              <upperValue xmi:id="Kernel-Functions-ReturnParameterMembership-parameterDirection_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Functions-ReturnParameterMembership-parameterDirection_-unnamed1"/>
            <redefinedOperation xmi:idref="Kernel-Behaviors-ParameterMembership-parameterDirection_"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Functions-ReturnParameterMembership-validateReturnParameterMembershipOwningType" xmi:type="uml:Constraint" name="validateReturnParameterMembershipOwningType">
            <constrainedElement xmi:idref="Kernel-Functions-ReturnParameterMembership"/>
            <ownedComment xmi:id="Kernel-Functions-ReturnParameterMembership-validateReturnParameterMembershipOwningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;owningType&lt;/code&gt; of a &lt;code&gt;ReturnParameterMembership&lt;/code&gt; must be a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-ReturnParameterMembership-validateReturnParameterMembershipOwningType"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-ReturnParameterMembership-validateReturnParameterMembershipOwningType-specification0" xmi:type="uml:OpaqueExpression" body="owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership" xmi:type="uml:Association" name="A_ownedResultExpression_owningResultExpressionMembership">
          <memberEnd xmi:idref="Kernel-Functions-ResultExpressionMembership-ownedResultExpression"/>
          <memberEnd xmi:idref="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership-owningResultExpressionMembership"/>
          <ownedEnd xmi:id="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership-owningResultExpressionMembership" xmi:type="uml:Property" isDerived="true" name="owningResultExpressionMembership">
            <association xmi:idref="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership"/>
            <lowerValue xmi:id="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership-owningResultExpressionMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership-owningResultExpressionMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The ResultExpressionMembership that owns the &lt;code&gt;ownedResultExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership-owningResultExpressionMembership"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Feature-owningFeatureMembership"/>
            <type xmi:idref="Kernel-Functions-ResultExpressionMembership"/>
            <upperValue xmi:id="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership-owningResultExpressionMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-Predicate" xmi:type="uml:Class" name="Predicate">
          <generalization xmi:id="Kernel-Functions-Predicate-_generalization.Kernel-Functions-Function" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-Function"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Functions-Predicate-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Predicate&lt;/code&gt; is a &lt;code&gt;Function&lt;/code&gt; whose &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; has type &lt;code&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/code&gt; and multiplicity &lt;code&gt;1..1&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Functions-Predicate"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Functions-Predicate-checkPredicateSpecialization" xmi:type="uml:Constraint" name="checkPredicateSpecialization">
            <constrainedElement xmi:idref="Kernel-Functions-Predicate"/>
            <ownedComment xmi:id="Kernel-Functions-Predicate-checkPredicateSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Predicate&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Predicate&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::BooleanEvaluation&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Predicate-checkPredicateSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Predicate-checkPredicateSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::BooleanEvaluation')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-A_predicate_typedBooleanExpression" xmi:type="uml:Association" name="A_predicate_typedBooleanExpression">
          <memberEnd xmi:idref="Kernel-Functions-BooleanExpression-predicate"/>
          <memberEnd xmi:idref="Kernel-Functions-A_predicate_typedBooleanExpression-typedBooleanExpression"/>
          <ownedEnd xmi:id="Kernel-Functions-A_predicate_typedBooleanExpression-typedBooleanExpression" xmi:type="uml:Property" isDerived="true" name="typedBooleanExpression">
            <association xmi:idref="Kernel-Functions-A_predicate_typedBooleanExpression"/>
            <lowerValue xmi:id="Kernel-Functions-A_predicate_typedBooleanExpression-typedBooleanExpression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Kernel-Functions-A_function_typedExpression-typedExpression"/>
            <type xmi:idref="Kernel-Functions-BooleanExpression"/>
            <upperValue xmi:id="Kernel-Functions-A_predicate_typedBooleanExpression-typedBooleanExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-Expression" xmi:type="uml:Class" name="Expression">
          <generalization xmi:id="Kernel-Functions-Expression-_generalization.Kernel-Behaviors-Step" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Behaviors-Step"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Functions-Expression-function" xmi:type="uml:Property" isDerived="true" name="function">
            <association xmi:idref="Kernel-Functions-A_function_typedExpression"/>
            <lowerValue xmi:id="Kernel-Functions-Expression-function-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-Expression-function-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Function&lt;/code&gt; that types this &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-function"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-Functions-Expression-function-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;This is the Function that types the Expression.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-function"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Kernel-Behaviors-Step-behavior"/>
            <type xmi:idref="Kernel-Functions-Function"/>
            <upperValue xmi:id="Kernel-Functions-Expression-function-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Functions-Expression-result" xmi:type="uml:Property" isDerived="true" name="result">
            <association xmi:idref="Kernel-Functions-A_result_computingExpression"/>
            <lowerValue xmi:id="Kernel-Functions-Expression-result-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-result-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;p&gt;An &lt;code&gt;output&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of the &lt;code&gt;Expression&lt;/code&gt; whose value is the result of the &lt;code&gt;Expression&lt;/code&gt;. The result of an &lt;code&gt;Expression&lt;/code&gt; is either inherited from its &lt;code&gt;function&lt;/code&gt; or it is related to the &lt;code&gt;Expression&lt;/code&gt; via a &lt;code&gt;ReturnParameterMembership&lt;/code&gt;, in which case it redefines the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of its &lt;code&gt;function&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-result"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-output"/>
            <subsettedProperty xmi:idref="Kernel-Behaviors-Step-parameter"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Functions-Expression-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Functions-Expression-isModelLevelEvaluable" xmi:type="uml:Property" isDerived="true" name="isModelLevelEvaluable">
            <ownedComment xmi:id="Kernel-Functions-Expression-isModelLevelEvaluable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this &lt;code&gt;Expression&lt;/code&gt; meets the constraints necessary to be evaluated at &lt;em&gt;model level&lt;/em&gt;, that is, using metadata within the model.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-isModelLevelEvaluable"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Functions-Expression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Expression&lt;/code&gt; is a &lt;code&gt;Step&lt;/code&gt; that is typed by a &lt;code&gt;Function&lt;/code&gt;. An &lt;code&gt;Expression&lt;/code&gt; that also has a &lt;code&gt;Function&lt;/code&gt; as its &lt;code&gt;featuringType&lt;/code&gt; is a computational step within that &lt;code&gt;Function&lt;/code&gt;. An &lt;code&gt;Expression&lt;/code&gt; always has a single &lt;code&gt;result&lt;/code&gt; parameter, which redefines the &lt;code&gt;result&lt;/code&gt; parameter of its defining &lt;code&gt;function&lt;/code&gt;. This allows &lt;code&gt;Expressions&lt;/code&gt; to be interconnected in tree structures, in which inputs to each &lt;code&gt;Expression&lt;/code&gt; in the tree are determined as the results of other &lt;code&gt;Expression&lt;/code&gt; in the tree.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Functions-Expression"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature" xmi:type="uml:Operation" name="modelLevelEvaluable">
            <bodyCondition xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="ownedSpecialization-&gt;forAll(isImplied) and  ownedFeature-&gt;forAll(f |     (directionOf(f) = FeatureDirectionKind::_'in' or f = result) and         f.ownedFeature-&gt;isEmpty() and f.valuation = null or     f.owningFeatureMembership.oclIsKindOf(ResultExpressionMembership) and         f.oclAsType(Expression).modelLevelEvaluable(visited)     " language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return whether this &lt;code&gt;Expression&lt;/code&gt; is model-level evaluable. The &lt;code&gt;visited&lt;/code&gt; parameter is used to track possible circular &lt;code&gt;Feature&lt;/code&gt; references made from &lt;code&gt;FeatureReferenceExpressions&lt;/code&gt; (see the redefinition of this operation for &lt;code&gt;FeatureReferenceExpression&lt;/code&gt;). Such circular references are not allowed in model-level evaluable expressions.&lt;/p&gt;  &lt;p&gt;An &lt;code&gt;Expression&lt;/code&gt; that is not otherwise specialized is model-level evaluable if it has no (non-implied) &lt;code&gt;ownedSpecializations&lt;/code&gt; and all its &lt;code&gt;ownedFeatures&lt;/code&gt; are either &lt;code&gt;in&lt;/code&gt; parameters, the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; or a result &lt;code&gt;Expression&lt;/code&gt; owned via a &lt;code&gt;ResultExpressionMembership&lt;/code&gt;. The &lt;code&gt;parameters&lt;/code&gt;  must not have any &lt;code&gt;ownedFeatures&lt;/code&gt; or a &lt;code&gt;FeatureValue&lt;/code&gt;, and the result &lt;code&gt;Expression&lt;/code&gt; must be model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature-visited" xmi:type="uml:Parameter" name="visited">
              <lowerValue xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature-visited-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature-visited-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Functions-Expression-modelLevelEvaluable_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Functions-Expression-modelLevelEvaluable_Feature-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Functions-Expression-evaluate_Element" xmi:type="uml:Operation" name="evaluate">
            <bodyCondition xmi:id="Kernel-Functions-Expression-evaluate_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Functions-Expression-evaluate_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let resultExprs : Sequence(Expression) =     ownedFeatureMembership-&gt;         selectByKind(ResultExpressionMembership).         ownedResultExpression in if resultExpr-&gt;isEmpty() then Sequence{} else resultExprs-&gt;first().evaluate(target) endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Functions-Expression-evaluate_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Expression&lt;/code&gt; &lt;code&gt;isModelLevelEvaluable&lt;/code&gt;, then evaluate it using the &lt;code&gt;target&lt;/code&gt; as the context &lt;code&gt;Element&lt;/code&gt; for resolving &lt;code&gt;Feature&lt;/code&gt; names and testing classification. The result is a collection of &lt;code&gt;Elements&lt;/code&gt;, which, for a fully evaluable &lt;code&gt;Expression&lt;/code&gt;, will be a &lt;code&gt;LiteralExpression&lt;/code&gt; or a &lt;code&gt;Feature&lt;/code&gt; that is not an &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-evaluate_Element"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Functions-Expression-evaluate_Element-target" xmi:type="uml:Parameter" name="target">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Functions-Expression-evaluate_Element-result" xmi:type="uml:Parameter" isOrdered="true" isUnique="false" name="result">
              <lowerValue xmi:id="Kernel-Functions-Expression-evaluate_Element-result-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Functions-Expression-evaluate_Element-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Functions-Expression-evaluate_Element-evaluatePre"/>
            <ownedRule xmi:idref="Kernel-Functions-Expression-evaluate_Element-unnamed1"/>
            <precondition xmi:id="Kernel-Functions-Expression-evaluate_Element-evaluatePre" xmi:type="uml:Constraint" name="evaluatePre">
              <constrainedElement xmi:idref="Kernel-Functions-Expression-evaluate_Element"/>
              <specification xmi:id="Kernel-Functions-Expression-evaluate_Element-evaluatePre-specification0" xmi:type="uml:OpaqueExpression" body="isModelLevelEvaluable" language="OCL2.0" name=""/>
            </precondition>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Functions-Expression-checkCondition_Element" xmi:type="uml:Operation" name="checkCondition">
            <bodyCondition xmi:id="Kernel-Functions-Expression-checkCondition_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Functions-Expression-checkCondition_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let results: Sequence(Element) = evaluate(target) in     result-&gt;size() = 1 and     results-&gt;first().oclIsKindOf(LiteralBoolean) and      results-&gt;first().oclAsType(LiteralBoolean).value" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Functions-Expression-checkCondition_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Model-level evaluate this &lt;code&gt;Expression&lt;/code&gt; with the given &lt;code&gt;target&lt;/code&gt;. If the result is a &lt;code&gt;LiteralBoolean&lt;/code&gt;, return its &lt;code&gt;value&lt;/code&gt;. Otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-checkCondition_Element"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Functions-Expression-checkCondition_Element-target" xmi:type="uml:Parameter" name="target">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Functions-Expression-checkCondition_Element-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Functions-Expression-checkCondition_Element-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Functions-Expression-validateExpressionResultParameterMembership" xmi:type="uml:Constraint" name="validateExpressionResultParameterMembership">
            <constrainedElement xmi:idref="Kernel-Functions-Expression"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-validateExpressionResultParameterMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Expression&lt;/code&gt; must have exactly one &lt;code&gt;featureMembership&lt;/code&gt; (owned or inherited) that is a &lt;code&gt;ResultParameterMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-validateExpressionResultParameterMembership"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Expression-validateExpressionResultParameterMembership-specification0" xmi:type="uml:OpaqueExpression" body="featureMembership-&gt; selectByKind(ReturnParameterMembership)-&gt; size() = 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Expression-deriveExpressionIsModelLevelEvaluable" xmi:type="uml:Constraint" name="deriveExpressionIsModelLevelEvaluable">
            <constrainedElement xmi:idref="Kernel-Functions-Expression"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-deriveExpressionIsModelLevelEvaluable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether an &lt;code&gt;Expression&lt;/code&gt; &lt;code&gt;isModelLevelEvaluable&lt;/code&gt; is determined by the &lt;code&gt;modelLevelEvaluable()&lt;/code&gt; operation.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-deriveExpressionIsModelLevelEvaluable"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Expression-deriveExpressionIsModelLevelEvaluable-specification0" xmi:type="uml:OpaqueExpression" body="isModelLevelEvaluable = modelLevelEvaluable(Set(Element){})" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Expression-deriveExpressionResult" xmi:type="uml:Constraint" name="deriveExpressionResult">
            <constrainedElement xmi:idref="Kernel-Functions-Expression"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-deriveExpressionResult-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; parameter of an &lt;code&gt;Expression&lt;/code&gt; is its &lt;code&gt;parameter&lt;/code&gt; owned (possibly in a supertype) via a &lt;code&gt;ReturnParameterMembership&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-deriveExpressionResult"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Expression-deriveExpressionResult-specification0" xmi:type="uml:OpaqueExpression" body="result =     let resultParams : Sequence(Feature) =         featureMemberships-&gt;             selectByKind(ReturnParameterMembership).             ownedMemberParameter in     if resultParams-&gt;notEmpty() then resultParams-&gt;first()     else null     endif " language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Expression-checkExpressionResultBindingConnector" xmi:type="uml:Constraint" name="checkExpressionResultBindingConnector">
            <constrainedElement xmi:idref="Kernel-Functions-Expression"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-checkExpressionResultBindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If an &lt;code&gt;Expression&lt;/code&gt; has an &lt;code&gt;Expression&lt;/code&gt; owned via a &lt;code&gt;ResultExpressionMembership&lt;/code&gt;, then the owning &lt;code&gt;Expression&lt;/code&gt; must also own a &lt;code&gt;BindingConnector&lt;/code&gt; between its &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; and the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of the result &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-checkExpressionResultBindingConnector"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Expression-checkExpressionResultBindingConnector-specification0" xmi:type="uml:OpaqueExpression" body="ownedMembership.selectByKind(ResultExpressionMembership)-&gt;     forAll(mem | ownedFeature.selectByKind(BindingConnector)-&gt;         exists(binding |             binding.relatedFeature-&gt;includes(result) and             binding.relatedFeature-&gt;includes(mem.ownedResultExpression.result)))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Expression-checkExpressionSpecialization" xmi:type="uml:Constraint" name="checkExpressionSpecialization">
            <constrainedElement xmi:idref="Kernel-Functions-Expression"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-checkExpressionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Expression&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Expression&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::evaluations&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-checkExpressionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Expression-checkExpressionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::evaluations')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Expression-checkExpressionTypeFeaturing" xmi:type="uml:Constraint" name="checkExpressionTypeFeaturing">
            <constrainedElement xmi:idref="Kernel-Functions-Expression"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-checkExpressionTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Expression&lt;/code&gt; is owned by a &lt;code&gt;FeatureValue&lt;/code&gt;, then it must have the same &lt;code&gt;featuringTypes&lt;/code&gt; as the &lt;code&gt;featureWithValue&lt;/code&gt; of the &lt;code&gt;FeatureValue&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-checkExpressionTypeFeaturing"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Expression-checkExpressionTypeFeaturing-specification0" xmi:type="uml:OpaqueExpression" body="owningMembership &lt;&gt; null and  owningMembership.oclIsKindOf(FeatureValue) implies     let featureWithValue : Feature =          owningMembership.oclAsType(FeatureValue).featureWithValue in     featuringType = featureWithValue.featuringType" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Expression-validateExpressionResultExpressionMembership" xmi:type="uml:Constraint" name="validateExpressionResultExpressionMembership">
            <constrainedElement xmi:idref="Kernel-Functions-Expression"/>
            <ownedComment xmi:id="Kernel-Functions-Expression-validateExpressionResultExpressionMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Expression&lt;/code&gt; must have at most one &lt;code&gt;ResultExpressionMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Expression-validateExpressionResultExpressionMembership"/>
            </ownedComment>
            <specification xmi:id="Kernel-Functions-Expression-validateExpressionResultExpressionMembership-specification0" xmi:type="uml:OpaqueExpression" body="membership-&gt;selectByKind(ResultExpressionMembership)-&gt;size() &lt;= 1" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-A_result_computingExpression" xmi:type="uml:Association" name="A_result_computingExpression">
          <memberEnd xmi:idref="Kernel-Functions-Expression-result"/>
          <memberEnd xmi:idref="Kernel-Functions-A_result_computingExpression-computingExpression"/>
          <ownedEnd xmi:id="Kernel-Functions-A_result_computingExpression-computingExpression" xmi:type="uml:Property" isDerived="true" name="computingExpression">
            <association xmi:idref="Kernel-Functions-A_result_computingExpression"/>
            <lowerValue xmi:id="Kernel-Functions-A_result_computingExpression-computingExpression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-A_result_computingExpression-computingExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Expressions that have a certain Feature its owned or inherited &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-A_result_computingExpression-computingExpression"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Kernel-Behaviors-A_parameter_parameteredStep-parameteredStep"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Functions-A_result_computingExpression-computingExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-A_result_computingFunction" xmi:type="uml:Association" name="A_result_computingFunction">
          <memberEnd xmi:idref="Kernel-Functions-Function-result"/>
          <memberEnd xmi:idref="Kernel-Functions-A_result_computingFunction-computingFunction"/>
          <ownedEnd xmi:id="Kernel-Functions-A_result_computingFunction-computingFunction" xmi:type="uml:Property" isDerived="true" name="computingFunction">
            <association xmi:idref="Kernel-Functions-A_result_computingFunction"/>
            <lowerValue xmi:id="Kernel-Functions-A_result_computingFunction-computingFunction-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-A_result_computingFunction-computingFunction-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Functions that have a certain Feature its owned or inherited &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-A_result_computingFunction-computingFunction"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Kernel-Behaviors-A_parameter_parameteredBehavior-parameteredBehavior"/>
            <type xmi:idref="Kernel-Functions-Function"/>
            <upperValue xmi:id="Kernel-Functions-A_result_computingFunction-computingFunction-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-A_expression_computedFunction" xmi:type="uml:Association" name="A_expression_computedFunction">
          <memberEnd xmi:idref="Kernel-Functions-Function-expression"/>
          <memberEnd xmi:idref="Kernel-Functions-A_expression_computedFunction-computedFunction"/>
          <ownedEnd xmi:id="Kernel-Functions-A_expression_computedFunction-computedFunction" xmi:type="uml:Property" name="computedFunction">
            <association xmi:idref="Kernel-Functions-A_expression_computedFunction"/>
            <lowerValue xmi:id="Kernel-Functions-A_expression_computedFunction-computedFunction-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-A_expression_computedFunction-computedFunction-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Functions that hasve a certain &lt;code&gt;expression&lt;/code&gt; as a step.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-A_expression_computedFunction-computedFunction"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Kernel-Behaviors-A_step_featuringBehavior-featuringBehavior"/>
            <type xmi:idref="Kernel-Functions-Function"/>
            <upperValue xmi:id="Kernel-Functions-A_expression_computedFunction-computedFunction-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-A_function_typedExpression" xmi:type="uml:Association" name="A_function_typedExpression">
          <memberEnd xmi:idref="Kernel-Functions-Expression-function"/>
          <memberEnd xmi:idref="Kernel-Functions-A_function_typedExpression-typedExpression"/>
          <ownedEnd xmi:id="Kernel-Functions-A_function_typedExpression-typedExpression" xmi:type="uml:Property" isDerived="true" name="typedExpression">
            <association xmi:idref="Kernel-Functions-A_function_typedExpression"/>
            <lowerValue xmi:id="Kernel-Functions-A_function_typedExpression-typedExpression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-A_function_typedExpression-typedExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Expressions that are typed by a certain &lt;code&gt;function&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-A_function_typedExpression-typedExpression"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Kernel-Behaviors-A_behavior_typedStep-typedStep"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Functions-A_function_typedExpression-typedExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-ResultExpressionMembership" xmi:type="uml:Class" name="ResultExpressionMembership">
          <generalization xmi:id="Kernel-Functions-ResultExpressionMembership-_generalization.Core-Types-FeatureMembership" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-FeatureMembership"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Functions-ResultExpressionMembership-ownedResultExpression" xmi:type="uml:Property" isDerived="true" name="ownedResultExpression">
            <association xmi:idref="Kernel-Functions-A_ownedResultExpression_owningResultExpressionMembership"/>
            <lowerValue xmi:id="Kernel-Functions-ResultExpressionMembership-ownedResultExpression-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Functions-ResultExpressionMembership-ownedResultExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Expression&lt;/code&gt; that provides the result for the owner of the &lt;code&gt;ResultExpressionMembership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-ResultExpressionMembership-ownedResultExpression"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-FeatureMembership-ownedMemberFeature"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Functions-ResultExpressionMembership-ownedResultExpression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Functions-ResultExpressionMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;ResultExpressionMembership&lt;/code&gt; is a &lt;code&gt;FeatureMembership&lt;/code&gt; that indicates that the &lt;code&gt;ownedResultExpression&lt;/code&gt; provides the result values for the &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt; that owns it. The owning &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt; must contain a &lt;code&gt;BindingConnector&lt;/code&gt; between the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of the &lt;code&gt;ownedResultExpression&lt;/code&gt; and the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of the owning &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Functions-ResultExpressionMembership"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Functions-ResultExpressionMembership-validateResultExpressionMembershipOwningType" xmi:type="uml:Constraint" name="validateResultExpressionMembershipOwningType">
            <constrainedElement xmi:idref="Kernel-Functions-ResultExpressionMembership"/>
            <ownedComment xmi:id="Kernel-Functions-ResultExpressionMembership-validateResultExpressionMembershipOwningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;owningType&lt;/code&gt; of a &lt;code&gt;ResultExpressionMembership&lt;/code&gt; must be a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-ResultExpressionMembership-validateResultExpressionMembershipOwningType"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-ResultExpressionMembership-validateResultExpressionMembershipOwningType-specification0" xmi:type="uml:OpaqueExpression" body="owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-BooleanExpression" xmi:type="uml:Class" name="BooleanExpression">
          <generalization xmi:id="Kernel-Functions-BooleanExpression-_generalization.Kernel-Functions-Expression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-Expression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Functions-BooleanExpression-predicate" xmi:type="uml:Property" isDerived="true" name="predicate">
            <association xmi:idref="Kernel-Functions-A_predicate_typedBooleanExpression"/>
            <lowerValue xmi:id="Kernel-Functions-BooleanExpression-predicate-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-BooleanExpression-predicate-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The Predicate that types the Expression.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-BooleanExpression-predicate"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-Functions-BooleanExpression-predicate-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Predicate&lt;/code&gt; that types this &lt;code&gt;BooleanExpression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-BooleanExpression-predicate"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Kernel-Functions-Expression-function"/>
            <type xmi:idref="Kernel-Functions-Predicate"/>
            <upperValue xmi:id="Kernel-Functions-BooleanExpression-predicate-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Functions-BooleanExpression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;BooleanExpression&lt;/code&gt; is a &lt;em&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/em&gt;-valued &lt;code&gt;Expression&lt;/code&gt; whose type is a &lt;code&gt;Predicate&lt;/code&gt;. It represents a logical condition resulting from the evaluation of the &lt;code&gt;Predicate&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Functions-BooleanExpression"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Functions-BooleanExpression-checkBooleanExpressionSpecialization" xmi:type="uml:Constraint" name="checkBooleanExpressionSpecialization">
            <constrainedElement xmi:idref="Kernel-Functions-BooleanExpression"/>
            <ownedComment xmi:id="Kernel-Functions-BooleanExpression-checkBooleanExpressionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;BooleanExpression&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;BooleanExpression&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::booleanEvaluations&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-BooleanExpression-checkBooleanExpressionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-BooleanExpression-checkBooleanExpressionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::booleanEvaluations')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-Invariant" xmi:type="uml:Class" name="Invariant">
          <generalization xmi:id="Kernel-Functions-Invariant-_generalization.Kernel-Functions-BooleanExpression" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Functions-BooleanExpression"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Functions-Invariant-isNegated" xmi:type="uml:Property" name="isNegated">
            <defaultValue xmi:id="Kernel-Functions-Invariant-isNegated-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Kernel-Functions-Invariant-isNegated-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this &lt;code&gt;Invariant&lt;/code&gt; is asserted to be false rather than true.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Invariant-isNegated"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Functions-Invariant-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Invariant&lt;/code&gt; is a &lt;code&gt;BooleanExpression&lt;/code&gt; that is asserted to have a specific &lt;code&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/code&gt; result value. If &lt;code&gt;isNegated = false&lt;/code&gt;, then the result is asserted to be true. If &lt;code&gt;isNegated = true&lt;/code&gt;, then the result is asserted to be false.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Functions-Invariant"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Functions-Invariant-checkInvariantSpecialization" xmi:type="uml:Constraint" name="checkInvariantSpecialization">
            <constrainedElement xmi:idref="Kernel-Functions-Invariant"/>
            <ownedComment xmi:id="Kernel-Functions-Invariant-checkInvariantSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Invariant&lt;/code&gt; must directly or indirectly specialize either of the following &lt;code&gt;BooleanExpressions&lt;/code&gt; from the Kernel Semantic Library: &lt;code&gt;&lt;em&gt;Performances::trueEvaluations&lt;/em&gt;&lt;/code&gt;, if &lt;code&gt;isNegated = false&lt;/code&gt;, or  &lt;code&gt;&lt;em&gt;Performances::falseEvaluations&lt;/em&gt;&lt;/code&gt;, if &lt;code&gt;isNegated = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Invariant-checkInvariantSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Invariant-checkInvariantSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="if isNegated then     specializesFromLibrary('Performances::falseEvaluations') else     specializesFromLibrary('Performances::trueEvaluations') endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Functions-Function" xmi:type="uml:Class" name="Function">
          <generalization xmi:id="Kernel-Functions-Function-_generalization.Kernel-Behaviors-Behavior" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Behaviors-Behavior"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Functions-Function-expression" xmi:type="uml:Property" isDerived="true" name="expression">
            <association xmi:idref="Kernel-Functions-A_expression_computedFunction"/>
            <lowerValue xmi:id="Kernel-Functions-Function-expression-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Functions-Function-expression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Expressions&lt;/code&gt; that are &lt;code&gt;steps&lt;/code&gt; in the calculation of the &lt;code&gt;result&lt;/code&gt; of this &lt;code&gt;Function&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Function-expression"/>
</ownedComment>
            <ownedComment xmi:id="Kernel-Functions-Function-expression-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The set of expressions that represent computational steps or parts of a system of equations within the Function.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Function-expression"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Kernel-Behaviors-Behavior-step"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Functions-Function-expression-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Functions-Function-result" xmi:type="uml:Property" isDerived="true" name="result">
            <association xmi:idref="Kernel-Functions-A_result_computingFunction"/>
            <lowerValue xmi:id="Kernel-Functions-Function-result-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Functions-Function-result-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The object or value that is the result of evaluating the Function.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Function-result"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-Functions-Function-result-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of the &lt;code&gt;Function&lt;/code&gt;, which is owned by the &lt;code&gt;Function&lt;/code&gt; via a &lt;code&gt;ReturnParameterMembership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Functions-Function-result"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-output"/>
            <subsettedProperty xmi:idref="Kernel-Behaviors-Behavior-parameter"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Functions-Function-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Functions-Function-isModelLevelEvaluable" xmi:type="uml:Property" isDerived="true" name="isModelLevelEvaluable">
            <ownedComment xmi:id="Kernel-Functions-Function-isModelLevelEvaluable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this &lt;code&gt;Function&lt;/code&gt; can be used as the &lt;code&gt;function&lt;/code&gt; of a model-level evaluable &lt;code&gt;InvocationExpression&lt;/code&gt;. Certain &lt;code&gt;Functions&lt;/code&gt; from the Kernel Functions Library are considered to have &lt;code&gt;isModelLevelEvaluable = true&lt;/code&gt;. For all other &lt;code&gt;Functions&lt;/code&gt; it is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; See the specification of the KerML concrete syntax notation for &lt;code&gt;Expressions&lt;/code&gt; for an identification of which library &lt;code&gt;Functions&lt;/code&gt; are model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Function-isModelLevelEvaluable"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Functions-Function-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Function&lt;/code&gt; is a &lt;code&gt;Behavior&lt;/code&gt; that has an &lt;code&gt;out&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; that is identified as its &lt;code&gt;result&lt;/code&gt;. A &lt;code&gt;Function&lt;/code&gt; represents the performance of a calculation that produces the values of its &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt;. This calculation may be decomposed into &lt;code&gt;Expressions&lt;/code&gt; that are &lt;code&gt;steps&lt;/code&gt; of the &lt;code&gt;Function&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Functions-Function"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Functions-Function-validateFunctionResultParameterMembership" xmi:type="uml:Constraint" name="validateFunctionResultParameterMembership">
            <constrainedElement xmi:idref="Kernel-Functions-Function"/>
            <ownedComment xmi:id="Kernel-Functions-Function-validateFunctionResultParameterMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Function&lt;/code&gt; must have exactly one &lt;code&gt;featureMembership&lt;/code&gt; (owned or inherited) that is a &lt;code&gt;ResultParameterMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Function-validateFunctionResultParameterMembership"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Function-validateFunctionResultParameterMembership-specification0" xmi:type="uml:OpaqueExpression" body="featureMembership-&gt; selectByKind(ReturnParameterMembership)-&gt; size() = 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Function-checkFunctionResultBindingConnector" xmi:type="uml:Constraint" name="checkFunctionResultBindingConnector">
            <constrainedElement xmi:idref="Kernel-Functions-Function"/>
            <ownedComment xmi:id="Kernel-Functions-Function-checkFunctionResultBindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Function&lt;/code&gt; has an &lt;code&gt;Expression&lt;/code&gt; owned via a &lt;code&gt;ResultExpressionMembership&lt;/code&gt;, then the owning &lt;code&gt;Function&lt;/code&gt; must also own a &lt;code&gt;BindingConnector&lt;/code&gt; between its &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; and the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of the result &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Function-checkFunctionResultBindingConnector"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Function-checkFunctionResultBindingConnector-specification0" xmi:type="uml:OpaqueExpression" body="ownedMembership.selectByKind(ResultExpressionMembership)-&gt;     forAll(mem | ownedFeature.selectByKind(BindingConnector)-&gt;         exists(binding |             binding.relatedFeature-&gt;includes(result) and             binding.relatedFeature-&gt;includes(mem.ownedResultExpression.result)))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Function-deriveFunctionResult" xmi:type="uml:Constraint" name="deriveFunctionResult">
            <constrainedElement xmi:idref="Kernel-Functions-Function"/>
            <ownedComment xmi:id="Kernel-Functions-Function-deriveFunctionResult-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of a &lt;code&gt;Function&lt;/code&gt; is its &lt;code&gt;parameter&lt;/code&gt; owned (possibly in a supertype) via a &lt;code&gt;ReturnParameterMembership&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Function-deriveFunctionResult"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Function-deriveFunctionResult-specification0" xmi:type="uml:OpaqueExpression" body="result =     let resultParams : Sequence(Feature) =         featureMemberships-&gt;             selectByKind(ReturnParameterMembership).             ownedMemberParameter in     if resultParams-&gt;notEmpty() then resultParams-&gt;first()     else null     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Function-validateFunctionResultExpressionMembership" xmi:type="uml:Constraint" name="validateFunctionResultExpressionMembership">
            <constrainedElement xmi:idref="Kernel-Functions-Function"/>
            <ownedComment xmi:id="Kernel-Functions-Function-validateFunctionResultExpressionMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Function&lt;/code&gt; must have at most one &lt;code&gt;ResultExpressionMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Function-validateFunctionResultExpressionMembership"/>
            </ownedComment>
            <specification xmi:id="Kernel-Functions-Function-validateFunctionResultExpressionMembership-specification0" xmi:type="uml:OpaqueExpression" body="membership-&gt;selectByKind(ResultExpressionMembership)-&gt;size() &lt;= 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Functions-Function-checkFunctionSpecialization" xmi:type="uml:Constraint" name="checkFunctionSpecialization">
            <constrainedElement xmi:idref="Kernel-Functions-Function"/>
            <ownedComment xmi:id="Kernel-Functions-Function-checkFunctionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Function&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Function&lt;/code&gt; &lt;code&gt;&lt;em&gt;Performances::Evaluation&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Functions-Function-checkFunctionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Functions-Function-checkFunctionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Performances::Evaluation')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Interactions" xmi:type="uml:Package" URI="" name="Interactions">
        <packagedElement xmi:id="Kernel-Interactions-A_flowEnd_featuringFlow" xmi:type="uml:Association" name="A_flowEnd_featuringFlow">
          <memberEnd xmi:idref="Kernel-Interactions-Flow-flowEnd"/>
          <memberEnd xmi:idref="Kernel-Interactions-A_flowEnd_featuringFlow-featuringFlow"/>
          <ownedEnd xmi:id="Kernel-Interactions-A_flowEnd_featuringFlow-featuringFlow" xmi:type="uml:Property" isDerived="true" name="featuringFlow">
            <association xmi:idref="Kernel-Interactions-A_flowEnd_featuringFlow"/>
            <lowerValue xmi:id="Kernel-Interactions-A_flowEnd_featuringFlow-featuringFlow-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Kernel-Connectors-A_connectorEnd_featuringConnector-featuringConnector"/>
            <type xmi:idref="Kernel-Interactions-Flow"/>
            <upperValue xmi:id="Kernel-Interactions-A_flowEnd_featuringFlow-featuringFlow-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-Flow" xmi:type="uml:Class" name="Flow">
          <generalization xmi:id="Kernel-Interactions-Flow-_generalization.Kernel-Connectors-Connector" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Connectors-Connector"/>
          </generalization>
          <generalization xmi:id="Kernel-Interactions-Flow-_generalization.Kernel-Behaviors-Step" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Behaviors-Step"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Interactions-Flow-payloadType" xmi:type="uml:Property" isDerived="true" isOrdered="true" isUnique="false" name="payloadType">
            <association xmi:idref="Kernel-Interactions-A_payloadType_flowForPayloadType"/>
            <lowerValue xmi:id="Kernel-Interactions-Flow-payloadType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-payloadType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The type of values transferred, which is the &lt;code&gt;type&lt;/code&gt; of the &lt;code&gt;payloadFeature&lt;/code&gt; of the &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-payloadType"/>
            </ownedComment>
            <type xmi:idref="Core-Classifiers-Classifier"/>
            <upperValue xmi:id="Kernel-Interactions-Flow-payloadType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Interactions-Flow-targetInputFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" isUnique="false" name="targetInputFeature">
            <association xmi:idref="Kernel-Interactions-A_targetInputFeature_flowToInput"/>
            <lowerValue xmi:id="Kernel-Interactions-Flow-targetInputFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-targetInputFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that receives the values carried by the &lt;code&gt;Flow&lt;/code&gt;. It must be a &lt;code&gt;feature&lt;/code&gt; of the &lt;code&gt;target&lt;/code&gt; of the &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-targetInputFeature"/>
</ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Interactions-Flow-targetInputFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Interactions-Flow-sourceOutputFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" isUnique="false" name="sourceOutputFeature">
            <association xmi:idref="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput"/>
            <lowerValue xmi:id="Kernel-Interactions-Flow-sourceOutputFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-sourceOutputFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that provides the items carried by the &lt;code&gt;Flow&lt;/code&gt;. It must be a &lt;code&gt;feature&lt;/code&gt; of the &lt;code&gt;source&lt;/code&gt; of the &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-sourceOutputFeature"/>
</ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Interactions-Flow-sourceOutputFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Interactions-Flow-flowEnd" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="flowEnd">
            <association xmi:idref="Kernel-Interactions-A_flowEnd_featuringFlow"/>
            <lowerValue xmi:id="Kernel-Interactions-Flow-flowEnd-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-flowEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;connectorEnds&lt;/code&gt; of this &lt;code&gt;Flow&lt;/code&gt; that are &lt;code&gt;FlowEnds&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-flowEnd"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Kernel-Connectors-Connector-connectorEnd"/>
            <type xmi:idref="Kernel-Interactions-FlowEnd"/>
            <upperValue xmi:id="Kernel-Interactions-Flow-flowEnd-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="2"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Interactions-Flow-payloadFeature" xmi:type="uml:Property" isDerived="true" name="payloadFeature">
            <association xmi:idref="Kernel-Interactions-A_payloadFeature_flowWithPayloadFeature"/>
            <lowerValue xmi:id="Kernel-Interactions-Flow-payloadFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-payloadFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedFeature&lt;/code&gt; of the &lt;code&gt;Flow&lt;/code&gt; that is a &lt;code&gt;PayloadFeature&lt;/code&gt; (if any).&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-payloadFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-ownedFeature"/>
            <type xmi:idref="Kernel-Interactions-PayloadFeature"/>
            <upperValue xmi:id="Kernel-Interactions-Flow-payloadFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Interactions-Flow-interaction" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="interaction">
            <association xmi:idref="Kernel-Interactions-A_interaction_typedFlow"/>
            <lowerValue xmi:id="Kernel-Interactions-Flow-interaction-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-interaction-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Interactions&lt;/code&gt; that type this &lt;code&gt;Flow&lt;/code&gt;. &lt;code&gt;Interactions&lt;/code&gt; are both &lt;code&gt;Associations&lt;/code&gt; and &lt;code&gt;Behaviors&lt;/code&gt;, which can type &lt;code&gt;Connectors&lt;/code&gt; and &lt;code&gt;Steps&lt;/code&gt;, respectively.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-interaction"/>
</ownedComment>
            <redefinedProperty xmi:idref="Kernel-Connectors-Connector-association"/>
            <redefinedProperty xmi:idref="Kernel-Behaviors-Step-behavior"/>
            <type xmi:idref="Kernel-Interactions-Interaction"/>
            <upperValue xmi:id="Kernel-Interactions-Flow-interaction-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Interactions-Flow-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Flow&lt;/code&gt; is a &lt;code&gt;Step&lt;/code&gt; that represents the transfer of values from one &lt;code&gt;Feature&lt;/code&gt; to another. &lt;code&gt;Flows&lt;/code&gt; can take non-zero time to complete.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Interactions-Flow"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Interactions-Flow-deriveFlowFlowEnd" xmi:type="uml:Constraint" name="deriveFlowFlowEnd">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-deriveFlowFlowEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;flowEnds&lt;/code&gt; of a &lt;code&gt;Flow&lt;/code&gt; are all its &lt;code&gt;connectorEnds&lt;/code&gt; that are &lt;code&gt;FlowEnds&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-deriveFlowFlowEnd"/>
            </ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-deriveFlowFlowEnd-specification0" xmi:type="uml:OpaqueExpression" body="flowEnd = connectorEnd-&gt;selectByKind(FlowEnd)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-Flow-validateFlowPayloadFeature" xmi:type="uml:Constraint" name="validateFlowPayloadFeature">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-validateFlowPayloadFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Flow&lt;/code&gt; must have at most one &lt;code&gt;ownedFeature&lt;/code&gt; that is an &lt;code&gt;PayloadFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-validateFlowPayloadFeature"/>
            </ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-validateFlowPayloadFeature-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeature-&gt;selectByKind(PayloadFeature)-&gt;size() &lt;= 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-Flow-deriveFlowTargetInputFeature" xmi:type="uml:Constraint" name="deriveFlowTargetInputFeature">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-deriveFlowTargetInputFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;targetInputFeature&lt;/code&gt; of a &lt;code&gt;Flow&lt;/code&gt; is the first &lt;code&gt;ownedFeature&lt;/code&gt; of the second &lt;code&gt;connectorEnd&lt;/code&gt; of the &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-deriveFlowTargetInputFeature"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-deriveFlowTargetInputFeature-specification0" xmi:type="uml:OpaqueExpression" body="targetInputFeature =     if connectorEnd-&gt;size() &lt; 2 or          connectorEnd-&gt;at(2).ownedFeature-&gt;isEmpty()     then null     else connectorEnd-&gt;at(2).ownedFeature-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-Flow-deriveFlowPayloadType" xmi:type="uml:Constraint" name="deriveFlowPayloadType">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-deriveFlowPayloadType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;payloadTypes&lt;/code&gt; of a &lt;code&gt;Flow&lt;/code&gt; are the &lt;code&gt;types&lt;/code&gt; of the &lt;code&gt;payloadFeature&lt;/code&gt; of the &lt;code&gt;Flow&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-deriveFlowPayloadType"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-deriveFlowPayloadType-specification0" xmi:type="uml:OpaqueExpression" body="payloadType = if payloadFeature = null then Sequence{} else payloadFeature.type endif" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-Flow-deriveFlowPayloadFeature" xmi:type="uml:Constraint" name="deriveFlowPayloadFeature">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-deriveFlowPayloadFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;payloadFeature&lt;/code&gt; of a &lt;code&gt;Flow&lt;/code&gt; is the single one of its &lt;code&gt;ownedFeatures&lt;/code&gt; that is a &lt;code&gt;PayloadFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-deriveFlowPayloadFeature"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-deriveFlowPayloadFeature-specification0" xmi:type="uml:OpaqueExpression" body="payloadFeature =     let payloadFeatures : Sequence(PayloadFeature) =         ownedFeature-&gt;selectByKind(PayloadFeature) in     if payloadFeatures-&gt;isEmpty() then null     else payloadFeatures-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-Flow-checkFlowSpecialization" xmi:type="uml:Constraint" name="checkFlowSpecialization">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-checkFlowSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Flow&lt;/code&gt; must directly or indirectly specialize the &lt;code&gt;Step&lt;/code&gt; &lt;code&gt;&lt;em&gt;Transfers::transfers&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-checkFlowSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-checkFlowSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Transfers::transfers')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-Flow-checkFlowWithEndsSpecialization" xmi:type="uml:Constraint" name="checkFlowWithEndsSpecialization">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-checkFlowWithEndsSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Flow&lt;/code&gt; with &lt;code&gt;ownedEndFeatures&lt;/code&gt; must specialize the &lt;code&gt;Step&lt;/code&gt; &lt;code&gt;&lt;em&gt;Transfers::flowTransfers&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-checkFlowWithEndsSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-checkFlowWithEndsSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedEndFeatures-&gt;notEmpty() implies specializesFromLibrary('Transfers::flowTransfers')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-Flow-deriveFlowSourceOutputFeature" xmi:type="uml:Constraint" name="deriveFlowSourceOutputFeature">
            <constrainedElement xmi:idref="Kernel-Interactions-Flow"/>
            <ownedComment xmi:id="Kernel-Interactions-Flow-deriveFlowSourceOutputFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;sourceOutputFeature&lt;/code&gt; of a &lt;code&gt;Flow&lt;/code&gt; is the first &lt;code&gt;ownedFeature&lt;/code&gt; of the first &lt;code&gt;connectorEnd&lt;/code&gt; of the &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-Flow-deriveFlowSourceOutputFeature"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-Flow-deriveFlowSourceOutputFeature-specification0" xmi:type="uml:OpaqueExpression" body="sourceOutputFeature =     if connectorEnd-&gt;isEmpty() or          connectorEnd.ownedFeature-&gt;isEmpty()     then null     else connectorEnd.ownedFeature-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-A_interaction_typedFlow" xmi:type="uml:Association" name="A_interaction_typedFlow">
          <memberEnd xmi:idref="Kernel-Interactions-Flow-interaction"/>
          <memberEnd xmi:idref="Kernel-Interactions-A_interaction_typedFlow-typedFlow"/>
          <ownedEnd xmi:id="Kernel-Interactions-A_interaction_typedFlow-typedFlow" xmi:type="uml:Property" isDerived="true" name="typedFlow">
            <association xmi:idref="Kernel-Interactions-A_interaction_typedFlow"/>
            <lowerValue xmi:id="Kernel-Interactions-A_interaction_typedFlow-typedFlow-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Kernel-Connectors-A_association_typedConnector-typedConnector"/>
            <subsettedProperty xmi:idref="Kernel-Behaviors-A_behavior_typedStep-typedStep"/>
            <type xmi:idref="Kernel-Interactions-Flow"/>
            <upperValue xmi:id="Kernel-Interactions-A_interaction_typedFlow-typedFlow-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-A_participantFeature_Interaction" xmi:type="uml:Association" name="A_participantFeature_Interaction">
          <generalization xmi:id="Kernel-Interactions-A_participantFeature_Interaction-_generalization.Kernel-Connectors-A_participantFeature_Association" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Connectors-A_participantFeature_Association"/>
          </generalization>
          <memberEnd xmi:idref="Kernel-Interactions-A_participantFeature_Interaction-participantFeature"/>
          <memberEnd xmi:idref="Kernel-Interactions-A_participantFeature_Interaction-"/>
          <navigableOwnedEnd xmi:idref="Kernel-Interactions-A_participantFeature_Interaction-participantFeature"/>
          <ownedEnd xmi:id="Kernel-Interactions-A_participantFeature_Interaction-" xmi:type="uml:Property" name="">
            <association xmi:idref="Kernel-Interactions-A_participantFeature_Interaction"/>
            <type xmi:idref="Kernel-Interactions-Interaction"/>
          </ownedEnd>
          <ownedEnd xmi:id="Kernel-Interactions-A_participantFeature_Interaction-participantFeature" xmi:type="uml:Property" name="participantFeature">
            <association xmi:idref="Kernel-Interactions-A_participantFeature_Interaction"/>
            <lowerValue xmi:id="Kernel-Interactions-A_participantFeature_Interaction-participantFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="2"/>
            <redefinedProperty xmi:idref="Kernel-Connectors-A_participantFeature_Association-participantFeature"/>
            <subsettedProperty xmi:idref="Kernel-Behaviors-A_involvesFeature_Behavior-involvesFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Interactions-A_participantFeature_Interaction-participantFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-A_payloadType_flowForPayloadType" xmi:type="uml:Association" name="A_payloadType_flowForPayloadType">
          <memberEnd xmi:idref="Kernel-Interactions-Flow-payloadType"/>
          <memberEnd xmi:idref="Kernel-Interactions-A_payloadType_flowForPayloadType-flowForPayloadType"/>
          <ownedComment xmi:id="Kernel-Interactions-A_payloadType_flowForPayloadType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The ItemFlow that has a certain &lt;code&gt;itemType&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Interactions-A_payloadType_flowForPayloadType"/>
          </ownedComment>
          <ownedEnd xmi:id="Kernel-Interactions-A_payloadType_flowForPayloadType-flowForPayloadType" xmi:type="uml:Property" isDerived="true" name="flowForPayloadType">
            <association xmi:idref="Kernel-Interactions-A_payloadType_flowForPayloadType"/>
            <lowerValue xmi:id="Kernel-Interactions-A_payloadType_flowForPayloadType-flowForPayloadType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <type xmi:idref="Kernel-Interactions-Flow"/>
            <upperValue xmi:id="Kernel-Interactions-A_payloadType_flowForPayloadType-flowForPayloadType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput" xmi:type="uml:Association" name="A_sourceOutputFeature_flowFromOutput">
          <memberEnd xmi:idref="Kernel-Interactions-Flow-sourceOutputFeature"/>
          <memberEnd xmi:idref="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput-flowFromOutput"/>
          <ownedEnd xmi:id="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput-flowFromOutput" xmi:type="uml:Property" isDerived="true" name="flowFromOutput">
            <association xmi:idref="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput"/>
            <lowerValue xmi:id="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput-flowFromOutput-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput-flowFromOutput-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The ItemFlow that has a certain &lt;code&gt;sourceOutputFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput-flowFromOutput"/>
            </ownedComment>
            <type xmi:idref="Kernel-Interactions-Flow"/>
            <upperValue xmi:id="Kernel-Interactions-A_sourceOutputFeature_flowFromOutput-flowFromOutput-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-SuccessionFlow" xmi:type="uml:Class" name="SuccessionFlow">
          <generalization xmi:id="Kernel-Interactions-SuccessionFlow-_generalization.Kernel-Connectors-Succession" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Connectors-Succession"/>
          </generalization>
          <generalization xmi:id="Kernel-Interactions-SuccessionFlow-_generalization.Kernel-Interactions-Flow" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Interactions-Flow"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Interactions-SuccessionFlow-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;SuccessionFlow&lt;/code&gt; is a &lt;code&gt;Flow&lt;/code&gt; that also provides temporal ordering. It classifies &lt;code&gt;&lt;em&gt;Transfers&lt;/em&gt;&lt;/code&gt; that cannot start until the source &lt;code&gt;&lt;em&gt;Occurrence&lt;/em&gt;&lt;/code&gt; has completed and that must complete before the target &lt;code&gt;&lt;em&gt;Occurrence&lt;/em&gt;&lt;/code&gt; can start.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Interactions-SuccessionFlow"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Interactions-SuccessionFlow-checkSuccessionFlowSpecialization" xmi:type="uml:Constraint" name="checkSuccessionFlowSpecialization">
            <constrainedElement xmi:idref="Kernel-Interactions-SuccessionFlow"/>
            <ownedComment xmi:id="Kernel-Interactions-SuccessionFlow-checkSuccessionFlowSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;SuccessionFlow&lt;/code&gt; must directly or indirectly specialize the &lt;code&gt;Step&lt;/code&gt; &lt;code&gt;&lt;em&gt;Transfers::flowTransfersBefore&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-SuccessionFlow-checkSuccessionFlowSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-SuccessionFlow-checkSuccessionFlowSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Transfers::flowTransfersBefore')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-PayloadFeature" xmi:type="uml:Class" name="PayloadFeature">
          <generalization xmi:id="Kernel-Interactions-PayloadFeature-_generalization.Core-Features-Feature" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Feature"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Interactions-PayloadFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;PayloadFeature&lt;/code&gt; is the &lt;code&gt;ownedFeature&lt;/code&gt; of a &lt;code&gt;Flow&lt;/code&gt; that identifies the things carried by the kinds of transfers that are instances of the &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Interactions-PayloadFeature"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Interactions-PayloadFeature-checkPayloadFeatureRedefinition" xmi:type="uml:Constraint" name="checkPayloadFeatureRedefinition">
            <constrainedElement xmi:idref="Kernel-Interactions-PayloadFeature"/>
            <ownedComment xmi:id="Kernel-Interactions-PayloadFeature-checkPayloadFeatureRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;PayloadFeature&lt;/code&gt; must redefine the &lt;code&gt;Feature&lt;/code&gt; &lt;code&gt;&lt;em&gt;Transfers::Transfer::payload&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-PayloadFeature-checkPayloadFeatureRedefinition"/>
</ownedComment>
            <specification xmi:id="Kernel-Interactions-PayloadFeature-checkPayloadFeatureRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="redefinesFromLibrary('Transfers::Transfer::payload')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-A_targetInputFeature_flowToInput" xmi:type="uml:Association" name="A_targetInputFeature_flowToInput">
          <memberEnd xmi:idref="Kernel-Interactions-Flow-targetInputFeature"/>
          <memberEnd xmi:idref="Kernel-Interactions-A_targetInputFeature_flowToInput-flowToInput"/>
          <ownedEnd xmi:id="Kernel-Interactions-A_targetInputFeature_flowToInput-flowToInput" xmi:type="uml:Property" isDerived="true" name="flowToInput">
            <association xmi:idref="Kernel-Interactions-A_targetInputFeature_flowToInput"/>
            <lowerValue xmi:id="Kernel-Interactions-A_targetInputFeature_flowToInput-flowToInput-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Interactions-A_targetInputFeature_flowToInput-flowToInput-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The ItemFlow that has a certain &lt;code&gt;targetInputFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-A_targetInputFeature_flowToInput-flowToInput"/>
            </ownedComment>
            <type xmi:idref="Kernel-Interactions-Flow"/>
            <upperValue xmi:id="Kernel-Interactions-A_targetInputFeature_flowToInput-flowToInput-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-A_payloadFeature_flowWithPayloadFeature" xmi:type="uml:Association" name="A_payloadFeature_flowWithPayloadFeature">
          <memberEnd xmi:idref="Kernel-Interactions-Flow-payloadFeature"/>
          <memberEnd xmi:idref="Kernel-Interactions-A_payloadFeature_flowWithPayloadFeature-flowWithPayloadFeature"/>
          <ownedEnd xmi:id="Kernel-Interactions-A_payloadFeature_flowWithPayloadFeature-flowWithPayloadFeature" xmi:type="uml:Property" isDerived="true" name="flowWithPayloadFeature">
            <association xmi:idref="Kernel-Interactions-A_payloadFeature_flowWithPayloadFeature"/>
            <lowerValue xmi:id="Kernel-Interactions-A_payloadFeature_flowWithPayloadFeature-flowWithPayloadFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Features-Feature-owningType"/>
            <type xmi:idref="Kernel-Interactions-Flow"/>
            <upperValue xmi:id="Kernel-Interactions-A_payloadFeature_flowWithPayloadFeature-flowWithPayloadFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-FlowEnd" xmi:type="uml:Class" name="FlowEnd">
          <generalization xmi:id="Kernel-Interactions-FlowEnd-_generalization.Core-Features-Feature" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Feature"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Interactions-FlowEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FlowEnd&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt; that is one of the &lt;code&gt;connectorEnds&lt;/code&gt; giving the &lt;code&gt;&lt;em&gt;source&lt;/em&gt;&lt;/code&gt; or &lt;code&gt;&lt;em&gt;target&lt;/em&gt;&lt;/code&gt; of a &lt;code&gt;Flow&lt;/code&gt;. For &lt;code&gt;Flows&lt;/code&gt; typed by &lt;code&gt;&lt;em&gt;FlowTransfer&lt;/em&gt;&lt;/code&gt; or its specializations, &lt;code&gt;FlowEnds&lt;/code&gt; must have exactly one &lt;code&gt;ownedFeature&lt;/code&gt;, which redefines &lt;code&gt;&lt;em&gt;Transfer::source::sourceOutput&lt;/em&gt;&lt;/code&gt; or &lt;code&gt;&lt;em&gt;Transfer::target::targetInput&lt;/em&gt;&lt;/code&gt; and redefines the corresponding feature of the &lt;code&gt;relatedElement&lt;/code&gt; for its end.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Interactions-FlowEnd"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndIsEnd" xmi:type="uml:Constraint" name="validateFlowEndIsEnd">
            <constrainedElement xmi:idref="Kernel-Interactions-FlowEnd"/>
            <ownedComment xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndIsEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FlowEnd&lt;/code&gt; must be an end &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-FlowEnd-validateFlowEndIsEnd"/>
            </ownedComment>
            <specification xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndIsEnd-specification0" xmi:type="uml:OpaqueExpression" body="isEnd" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndNestedFeature" xmi:type="uml:Constraint" name="validateFlowEndNestedFeature">
            <constrainedElement xmi:idref="Kernel-Interactions-FlowEnd"/>
            <ownedComment xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndNestedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FlowEnd&lt;/code&gt; must have exactly one &lt;code&gt;ownedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-FlowEnd-validateFlowEndNestedFeature"/>
            </ownedComment>
            <specification xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndNestedFeature-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeature-&gt;size() = 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndOwningType" xmi:type="uml:Constraint" name="validateFlowEndOwningType">
            <constrainedElement xmi:idref="Kernel-Interactions-FlowEnd"/>
            <ownedComment xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndOwningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;owningType&lt;/code&gt; of a &lt;code&gt;FlowEnd&lt;/code&gt; must be a &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Interactions-FlowEnd-validateFlowEndOwningType"/>
            </ownedComment>
            <specification xmi:id="Kernel-Interactions-FlowEnd-validateFlowEndOwningType-specification0" xmi:type="uml:OpaqueExpression" body="owningType &lt;&gt; null and owningType.oclIsKindOf(Flow)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Interactions-Interaction" xmi:type="uml:Class" name="Interaction">
          <generalization xmi:id="Kernel-Interactions-Interaction-_generalization.Kernel-Associations-Association" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Associations-Association"/>
          </generalization>
          <generalization xmi:id="Kernel-Interactions-Interaction-_generalization.Kernel-Behaviors-Behavior" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Behaviors-Behavior"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Interactions-Interaction-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Interaction&lt;/code&gt; is a &lt;code&gt;Behavior&lt;/code&gt; that is also an &lt;code&gt;Association&lt;/code&gt;, providing a context for multiple objects that have behaviors that impact one another.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Interactions-Interaction"/>
</ownedComment>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-FeatureValues" xmi:type="uml:Package" URI="" name="FeatureValues">
        <packagedElement xmi:id="Kernel-FeatureValues-A_featureWithValue_valuation" xmi:type="uml:Association" name="A_featureWithValue_valuation">
          <memberEnd xmi:idref="Kernel-FeatureValues-FeatureValue-featureWithValue"/>
          <memberEnd xmi:idref="Kernel-FeatureValues-A_featureWithValue_valuation-valuation"/>
          <ownedEnd xmi:id="Kernel-FeatureValues-A_featureWithValue_valuation-valuation" xmi:type="uml:Property" isDerived="true" name="valuation">
            <association xmi:idref="Kernel-FeatureValues-A_featureWithValue_valuation"/>
            <lowerValue xmi:id="Kernel-FeatureValues-A_featureWithValue_valuation-valuation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-FeatureValues-A_featureWithValue_valuation-valuation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The (at most one) &lt;code&gt;ownedMembership&lt;/code&gt; of this Feature that is the FeatureValue that provides the value of the Feature.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-A_featureWithValue_valuation-valuation"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-ownedMembership"/>
            <type xmi:idref="Kernel-FeatureValues-FeatureValue"/>
            <upperValue xmi:id="Kernel-FeatureValues-A_featureWithValue_valuation-valuation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-FeatureValues-A_value_expressedValuation" xmi:type="uml:Association" name="A_value_expressedValuation">
          <memberEnd xmi:idref="Kernel-FeatureValues-FeatureValue-value"/>
          <memberEnd xmi:idref="Kernel-FeatureValues-A_value_expressedValuation-expressedValuation"/>
          <ownedEnd xmi:id="Kernel-FeatureValues-A_value_expressedValuation-expressedValuation" xmi:type="uml:Property" isDerived="true" name="expressedValuation">
            <association xmi:idref="Kernel-FeatureValues-A_value_expressedValuation"/>
            <lowerValue xmi:id="Kernel-FeatureValues-A_value_expressedValuation-expressedValuation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-FeatureValues-A_value_expressedValuation-expressedValuation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The FeatureValue that owns the &lt;code&gt;value&lt;/code&gt; Expression.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-A_value_expressedValuation-expressedValuation"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-owningMembership"/>
            <type xmi:idref="Kernel-FeatureValues-FeatureValue"/>
            <upperValue xmi:id="Kernel-FeatureValues-A_value_expressedValuation-expressedValuation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-FeatureValues-FeatureValue" xmi:type="uml:Class" name="FeatureValue">
          <generalization xmi:id="Kernel-FeatureValues-FeatureValue-_generalization.Root-Namespaces-OwningMembership" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-OwningMembership"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-FeatureValues-FeatureValue-featureWithValue" xmi:type="uml:Property" isDerived="true" name="featureWithValue">
            <association xmi:idref="Kernel-FeatureValues-A_featureWithValue_valuation"/>
            <lowerValue xmi:id="Kernel-FeatureValues-FeatureValue-featureWithValue-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-featureWithValue-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The Feature to be provided a value.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-featureWithValue"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-featureWithValue-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; to be provided a value.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-featureWithValue"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Membership-membershipOwningNamespace"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-FeatureValues-FeatureValue-featureWithValue-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-FeatureValues-FeatureValue-value" xmi:type="uml:Property" isDerived="true" name="value">
            <association xmi:idref="Kernel-FeatureValues-A_value_expressedValuation"/>
            <lowerValue xmi:id="Kernel-FeatureValues-FeatureValue-value-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-value-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The Expression that provides the value as a result.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-value"/>
            </ownedComment>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-value-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Expression&lt;/code&gt; that provides the value of the &lt;code&gt;featureWithValue&lt;/code&gt; as its &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-value"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-OwningMembership-ownedMemberElement"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-FeatureValues-FeatureValue-value-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-FeatureValues-FeatureValue-isInitial" xmi:type="uml:Property" name="isInitial">
            <defaultValue xmi:id="Kernel-FeatureValues-FeatureValue-isInitial-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-isInitial-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this &lt;code&gt;FeatureValue&lt;/code&gt; specifies a bound value or an initial value for the &lt;code&gt;featureWithValue&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-isInitial"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-FeatureValues-FeatureValue-isDefault" xmi:type="uml:Property" name="isDefault">
            <defaultValue xmi:id="Kernel-FeatureValues-FeatureValue-isDefault-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-isDefault-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this &lt;code&gt;FeatureValue&lt;/code&gt; is a concrete specification of the bound or initial value of the &lt;code&gt;featureWithValue&lt;/code&gt;, or just a default value that may be overridden.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-isDefault"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureValue&lt;/code&gt; is a &lt;code&gt;Membership&lt;/code&gt; that identifies a particular member &lt;code&gt;Expression&lt;/code&gt; that provides the value of the &lt;code&gt;Feature&lt;/code&gt; that owns the &lt;code&gt;FeatureValue&lt;/code&gt;. The value is specified as either a bound value or an initial value, and as either a concrete or default value. A &lt;code&gt;Feature&lt;/code&gt; can have at most one &lt;code&gt;FeatureValue&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;The result of the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; is bound to the &lt;code&gt;featureWithValue&lt;/code&gt; using a &lt;code&gt;BindingConnector&lt;/code&gt;. If &lt;code&gt;isInitial = false&lt;/code&gt;, then the &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;BindingConnector&lt;/code&gt; is the same as the &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;featureWithValue&lt;/code&gt;. If &lt;code&gt;isInitial = true&lt;/code&gt;, then the &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;BindingConnector&lt;/code&gt; is restricted to its &lt;code&gt;startShot&lt;/code&gt;.  &lt;p&gt;If &lt;code&gt;isDefault = false&lt;/code&gt;, then the above semantics of the &lt;code&gt;FeatureValue&lt;/code&gt; are realized for the given &lt;code&gt;featureWithValue&lt;/code&gt;. Otherwise, the semantics are realized for any individual of the &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;featureWithValue&lt;/code&gt;, unless another value is explicitly given for the &lt;code&gt;featureWithValue&lt;/code&gt; for that individual.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-FeatureValues-FeatureValue-validateFeatureValueIsInitial" xmi:type="uml:Constraint" name="validateFeatureValueIsInitial">
            <constrainedElement xmi:idref="Kernel-FeatureValues-FeatureValue"/>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-validateFeatureValueIsInitial-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;FeatureValue&lt;/code&gt; has &lt;code&gt;isInitial = true&lt;/code&gt;, then its &lt;code&gt;featureWithValue&lt;/code&gt; must have &lt;code&gt;isVariable = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-validateFeatureValueIsInitial"/>
</ownedComment>
            <specification xmi:id="Kernel-FeatureValues-FeatureValue-validateFeatureValueIsInitial-specification0" xmi:type="uml:OpaqueExpression" body="isInitial implies featureWithValue.isVariable" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-FeatureValues-FeatureValue-validateFeatureValueOverriding" xmi:type="uml:Constraint" name="validateFeatureValueOverriding">
            <constrainedElement xmi:idref="Kernel-FeatureValues-FeatureValue"/>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-validateFeatureValueOverriding-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;Features&lt;/code&gt; directly or indirectly redefined by the &lt;code&gt;featureWithValue&lt;/code&gt; of a &lt;code&gt;FeatureValue&lt;/code&gt; must have only default &lt;code&gt;FeatureValues&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-validateFeatureValueOverriding"/>
</ownedComment>
            <specification xmi:id="Kernel-FeatureValues-FeatureValue-validateFeatureValueOverriding-specification0" xmi:type="uml:OpaqueExpression" body="featureWithValue.redefinition.redefinedFeature-&gt; closure(redefinition.redefinedFeature).valuation-&gt; forAll(isDefault)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-FeatureValues-FeatureValue-checkFeatureValueBindingConnector" xmi:type="uml:Constraint" name="checkFeatureValueBindingConnector">
            <constrainedElement xmi:idref="Kernel-FeatureValues-FeatureValue"/>
            <ownedComment xmi:id="Kernel-FeatureValues-FeatureValue-checkFeatureValueBindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If &lt;code&gt;isDefault = false&lt;/code&gt;, then the &lt;code&gt;featureWithValue&lt;/code&gt; must have an &lt;code&gt;ownedMember&lt;/code&gt; that is a &lt;code&gt;BindingConnector&lt;/code&gt; whose &lt;code&gt;relatedElements&lt;/code&gt; are the &lt;code&gt;featureWithValue&lt;/code&gt; and a feature chain consisting of the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; and its &lt;code&gt;result&lt;/code&gt;. If &lt;code&gt;isInitial = false&lt;/code&gt;, then this &lt;code&gt;BindingConnector&lt;/code&gt; must have &lt;code&gt;featuringTypes&lt;/code&gt; that are the same as those of the &lt;code&gt;featureWithValue&lt;/code&gt;. If &lt;code&gt;isInitial = true&lt;/code&gt;, then the &lt;code&gt;BindingConnector&lt;/code&gt; must have &lt;code&gt;&lt;em&gt;that.startShot&lt;/em&gt;&lt;code&gt; as its &lt;code&gt;featuringType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-FeatureValues-FeatureValue-checkFeatureValueBindingConnector"/>
</ownedComment>
            <specification xmi:id="Kernel-FeatureValues-FeatureValue-checkFeatureValueBindingConnector-specification0" xmi:type="uml:OpaqueExpression" body="not isDefault implies     featureWithValue.ownedMember-&gt;         selectByKind(BindingConnector)-&gt;exists(b |             b.relatedFeature-&gt;includes(featureWithValue) and             b.relatedFeature-&gt;exists(f |                  f.chainingFeature = Sequence{value, value.result}) and             if not isInitial then                  b.featuringType = featureWithValue.featuringType             else                  b.featuringType-&gt;exists(t |                     t.oclIsKindOf(Feature) and                     t.oclAsType(Feature).chainingFeature =                         Sequence{                             resolveGlobal('Base::things::that').                                 memberElement,                             resolveGlobal('Occurrences::Occurrence::startShot').                                 memberElement                         }                 )             endif)" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Packages" xmi:type="uml:Package" URI="" name="Packages">
        <packagedElement xmi:id="Kernel-Packages-A_filterCondition_conditionedPackage" xmi:type="uml:Association" name="A_filterCondition_conditionedPackage">
          <memberEnd xmi:idref="Kernel-Packages-Package-filterCondition"/>
          <memberEnd xmi:idref="Kernel-Packages-A_filterCondition_conditionedPackage-conditionedPackage"/>
          <ownedEnd xmi:id="Kernel-Packages-A_filterCondition_conditionedPackage-conditionedPackage" xmi:type="uml:Property" isDerived="true" name="conditionedPackage">
            <association xmi:idref="Kernel-Packages-A_filterCondition_conditionedPackage"/>
            <lowerValue xmi:id="Kernel-Packages-A_filterCondition_conditionedPackage-conditionedPackage-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Packages-A_filterCondition_conditionedPackage-conditionedPackage-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Package that has a certain Expression as a &lt;code&gt;filterCondition&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-A_filterCondition_conditionedPackage-conditionedPackage"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-owningNamespace"/>
            <type xmi:idref="Kernel-Packages-Package"/>
            <upperValue xmi:id="Kernel-Packages-A_filterCondition_conditionedPackage-conditionedPackage-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Packages-A_condition_owningFilter" xmi:type="uml:Association" name="A_condition_owningFilter">
          <memberEnd xmi:idref="Kernel-Packages-ElementFilterMembership-condition"/>
          <memberEnd xmi:idref="Kernel-Packages-A_condition_owningFilter-owningFilter"/>
          <ownedEnd xmi:id="Kernel-Packages-A_condition_owningFilter-owningFilter" xmi:type="uml:Property" isDerived="true" name="owningFilter">
            <association xmi:idref="Kernel-Packages-A_condition_owningFilter"/>
            <lowerValue xmi:id="Kernel-Packages-A_condition_owningFilter-owningFilter-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Packages-A_condition_owningFilter-owningFilter-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The ElementFilterMembership that owns the &lt;code&gt;condition&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-A_condition_owningFilter-owningFilter"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-owningMembership"/>
            <type xmi:idref="Kernel-Packages-ElementFilterMembership"/>
            <upperValue xmi:id="Kernel-Packages-A_condition_owningFilter-owningFilter-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Packages-ElementFilterMembership" xmi:type="uml:Class" name="ElementFilterMembership">
          <generalization xmi:id="Kernel-Packages-ElementFilterMembership-_generalization.Root-Namespaces-OwningMembership" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-OwningMembership"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Packages-ElementFilterMembership-condition" xmi:type="uml:Property" isDerived="true" name="condition">
            <association xmi:idref="Kernel-Packages-A_condition_owningFilter"/>
            <lowerValue xmi:id="Kernel-Packages-ElementFilterMembership-condition-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Packages-ElementFilterMembership-condition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The model-level evaluable &lt;code&gt;Boolean&lt;/code&gt;-valued &lt;code&gt;Expression&lt;/code&gt; used to filter the imported &lt;code&gt;members&lt;/code&gt; of the &lt;code&gt;membershipOwningNamespace&lt;/code&gt; of this &lt;code&gt;ElementFilterMembership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Packages-ElementFilterMembership-condition"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-OwningMembership-ownedMemberElement"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Packages-ElementFilterMembership-condition-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Packages-ElementFilterMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;ElementFilterMembership&lt;/code&gt; is a &lt;code&gt;Membership&lt;/code&gt; between a &lt;code&gt;Namespace&lt;/code&gt; and a model-level evaluable &lt;code&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/code&gt;-valued &lt;code&gt;Expression&lt;/code&gt;, asserting that imported &lt;code&gt;members&lt;/code&gt; of the &lt;code&gt;Namespace&lt;/code&gt; should be filtered using the &lt;code&gt;condition&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt;. A general &lt;code&gt;Namespace&lt;/code&gt; does not define any specific filtering behavior, but such behavior may be defined for various specialized kinds of &lt;code&gt;Namespaces&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Packages-ElementFilterMembership"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsModelLevelEvaluable" xmi:type="uml:Constraint" name="validateElementFilterMembershipConditionIsModelLevelEvaluable">
            <constrainedElement xmi:idref="Kernel-Packages-ElementFilterMembership"/>
            <ownedComment xmi:id="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsModelLevelEvaluable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;condition&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; must be model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsModelLevelEvaluable"/>
            </ownedComment>
            <specification xmi:id="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsModelLevelEvaluable-specification0" xmi:type="uml:OpaqueExpression" body="condition.isModelLevelEvaluable" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsBoolean" xmi:type="uml:Constraint" name="validateElementFilterMembershipConditionIsBoolean">
            <constrainedElement xmi:idref="Kernel-Packages-ElementFilterMembership"/>
            <ownedComment xmi:id="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsBoolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of the &lt;code&gt;condition&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; must directly or indirectly specialize &lt;code&gt;&lt;em&gt;ScalarValues::Boolean&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsBoolean"/>
</ownedComment>
            <specification xmi:id="Kernel-Packages-ElementFilterMembership-validateElementFilterMembershipConditionIsBoolean-specification0" xmi:type="uml:OpaqueExpression" body="condition.result.specializesFromLibrary('ScalarValues::Boolean')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Packages-LibraryPackage" xmi:type="uml:Class" name="LibraryPackage">
          <generalization xmi:id="Kernel-Packages-LibraryPackage-_generalization.Kernel-Packages-Package" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Packages-Package"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Packages-LibraryPackage-isStandard" xmi:type="uml:Property" name="isStandard">
            <defaultValue xmi:id="Kernel-Packages-LibraryPackage-isStandard-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Kernel-Packages-LibraryPackage-isStandard-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this &lt;code&gt;LibraryPackage&lt;/code&gt; contains a standard library model. This should only be set to true for &lt;code&gt;LibraryPackages&lt;/code&gt; in the standard Kernel Model Libraries or in normative model libraries for a language built on KerML.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-LibraryPackage-isStandard"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Packages-LibraryPackage-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;LibraryPackage&lt;/code&gt; is a &lt;code&gt;Package&lt;/code&gt; that is the container for a model library. A &lt;code&gt;LibraryPackage&lt;/code&gt; is itself a library &lt;code&gt;Element&lt;/code&gt; as are all &lt;code&gt;Elements&lt;/code&gt; that are directly or indirectly contained in it.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Packages-LibraryPackage"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Packages-LibraryPackage-libraryNamespace_" xmi:type="uml:Operation" name="libraryNamespace">
            <bodyCondition xmi:id="Kernel-Packages-LibraryPackage-libraryNamespace_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Packages-LibraryPackage-libraryNamespace_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="self" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Packages-LibraryPackage-libraryNamespace_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;libraryNamespace&lt;/code&gt; for a &lt;code&gt;LibraryPackage&lt;/code&gt; is itself.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-LibraryPackage-libraryNamespace_"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Packages-LibraryPackage-libraryNamespace_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Packages-LibraryPackage-libraryNamespace_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Kernel-Packages-LibraryPackage-libraryNamespace_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Packages-LibraryPackage-libraryNamespace_-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Elements-Element-libraryNamespace_"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Packages-Package" xmi:type="uml:Class" name="Package">
          <generalization xmi:id="Kernel-Packages-Package-_generalization.Root-Namespaces-Namespace" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-Namespace"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Packages-Package-filterCondition" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="filterCondition">
            <association xmi:idref="Kernel-Packages-A_filterCondition_conditionedPackage"/>
            <lowerValue xmi:id="Kernel-Packages-Package-filterCondition-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Packages-Package-filterCondition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The model-level evaluable &lt;code&gt;&lt;em&gt;Boolean&lt;/em&gt;&lt;/code&gt;-valued &lt;code&gt;Expression&lt;/code&gt; used to filter the &lt;code&gt;members&lt;/code&gt; of this &lt;code&gt;Package&lt;/code&gt;, which are owned by the &lt;code&gt;Package&lt;/code&gt; are via &lt;code&gt;ElementFilterMemberships&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Packages-Package-filterCondition"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-ownedMember"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Packages-Package-filterCondition-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Packages-Package-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Package&lt;/code&gt; is a &lt;code&gt;Namespace&lt;/code&gt; used to group &lt;code&gt;Elements&lt;/code&gt;, without any instance-level semantics. It may have one or more model-level evaluable &lt;code&gt;filterCondition&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt; used to filter its &lt;code&gt;importedMemberships&lt;/code&gt;. Any imported &lt;code&gt;member&lt;/code&gt; must meet all of the &lt;code&gt;filterConditions&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Packages-Package"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Packages-Package-importedMemberships_Namespace" xmi:type="uml:Operation" name="importedMemberships">
            <bodyCondition xmi:id="Kernel-Packages-Package-importedMemberships_Namespace-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Packages-Package-importedMemberships_Namespace-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="self.oclAsType(Namespace).importedMemberships(excluded)-&gt; select(m | self.includeAsMember(m.memberElement))" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Packages-Package-importedMemberships_Namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Exclude &lt;code&gt;Elements&lt;/code&gt; that do not meet all the &lt;code&gt;filterConditions&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Packages-Package-importedMemberships_Namespace"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Packages-Package-importedMemberships_Namespace-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Kernel-Packages-Package-importedMemberships_Namespace-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Kernel-Packages-Package-importedMemberships_Namespace-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Packages-Package-importedMemberships_Namespace-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Packages-Package-importedMemberships_Namespace--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Kernel-Packages-Package-importedMemberships_Namespace--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Packages-Package-importedMemberships_Namespace-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Namespaces-Namespace-importedMemberships_Namespace"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Packages-Package-includeAsMember_Element" xmi:type="uml:Operation" name="includeAsMember">
            <bodyCondition xmi:id="Kernel-Packages-Package-includeAsMember_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Packages-Package-includeAsMember_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let metadataFeatures: Sequence(AnnotatingElement) =      element.ownedAnnotation.annotatingElement-&gt;         selectByKind(MetadataFeature) in     self.filterCondition-&gt;forAll(cond |          metadataFeatures-&gt;exists(elem |              cond.checkCondition(elem)))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Packages-Package-includeAsMember_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Determine whether the given &lt;code&gt;element&lt;/code&gt; meets all the &lt;code&gt;filterConditions&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-Package-includeAsMember_Element"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Packages-Package-includeAsMember_Element-element" xmi:type="uml:Parameter" name="element">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Packages-Package-includeAsMember_Element-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Packages-Package-includeAsMember_Element-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Packages-Package-derivePackageFilterCondition" xmi:type="uml:Constraint" name="derivePackageFilterCondition">
            <constrainedElement xmi:idref="Kernel-Packages-Package"/>
            <ownedComment xmi:id="Kernel-Packages-Package-derivePackageFilterCondition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;filterConditions&lt;/code&gt; of a &lt;code&gt;Package&lt;/code&gt; are the &lt;code&gt;conditions&lt;/code&gt; of its owned &lt;code&gt;ElementFilterMemberships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Packages-Package-derivePackageFilterCondition"/>
</ownedComment>
            <specification xmi:id="Kernel-Packages-Package-derivePackageFilterCondition-specification0" xmi:type="uml:OpaqueExpression" body="filterCondition = ownedMembership-&gt; selectByKind(ElementFilterMembership).condition" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Multiplicities" xmi:type="uml:Package" URI="" name="Multiplicities">
        <packagedElement xmi:id="Kernel-Multiplicities-MultiplicityRange" xmi:type="uml:Class" name="MultiplicityRange">
          <generalization xmi:id="Kernel-Multiplicities-MultiplicityRange-_generalization.Core-Types-Multiplicity" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-Multiplicity"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Multiplicities-MultiplicityRange-lowerBound" xmi:type="uml:Property" isDerived="true" name="lowerBound">
            <association xmi:idref="Kernel-Multiplicities-A_lowerBound_multiplicity"/>
            <lowerValue xmi:id="Kernel-Multiplicities-MultiplicityRange-lowerBound-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-lowerBound-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Expression&lt;/code&gt; whose result provides the lower bound of the &lt;code&gt;MultiplicityRange&lt;/code&gt;. If no &lt;code&gt;lowerBound&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; is given, then the lower bound shall have the same value as the upper bound, unless the upper bound is unbounded (&lt;code&gt;*&lt;/code&gt;), in which case the lower bound shall be 0.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-lowerBound"/>
</ownedComment>
            <subsettedProperty xmi:idref="Kernel-Multiplicities-MultiplicityRange-bound"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Multiplicities-MultiplicityRange-lowerBound-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Multiplicities-MultiplicityRange-upperBound" xmi:type="uml:Property" isDerived="true" name="upperBound">
            <association xmi:idref="Kernel-Multiplicities-A_upperBound_multiplicity"/>
            <lowerValue xmi:id="Kernel-Multiplicities-MultiplicityRange-upperBound-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-upperBound-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Expression&lt;/code&gt; whose result is the upper bound of the &lt;code&gt;MultiplicityRange&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-upperBound"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Kernel-Multiplicities-MultiplicityRange-bound"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Multiplicities-MultiplicityRange-upperBound-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Multiplicities-MultiplicityRange-bound" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="bound">
            <association xmi:idref="Kernel-Multiplicities-A_bound_multiplicity"/>
            <lowerValue xmi:id="Kernel-Multiplicities-MultiplicityRange-bound-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-bound-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The owned &lt;code&gt;Expressions&lt;/code&gt; of the &lt;code&gt;MultiplicityRange&lt;/code&gt; whose results provide its bounds. These must be the first &lt;code&gt;ownedMembers&lt;/code&gt; of the &lt;code&gt;MultiplicityRange&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-bound"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-ownedMember"/>
            <type xmi:idref="Kernel-Functions-Expression"/>
            <upperValue xmi:id="Kernel-Multiplicities-MultiplicityRange-bound-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="2"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MultiplicityRange&lt;/code&gt; is a &lt;code&gt;Multiplicity&lt;/code&gt; whose value is defined to be the (inclusive) range of natural numbers given by the result of a &lt;code&gt;lowerBound&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; and the result of an &lt;code&gt;upperBound&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt;. The result of these &lt;code&gt;Expressions&lt;/code&gt; shall be of type &lt;code&gt;&lt;em&gt;Natural&lt;/em&gt;&lt;/code&gt;. If the result of the &lt;code&gt;upperBound&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; is the unbounded value &lt;code&gt;*&lt;/code&gt;, then the specified range includes all natural numbers greater than or equal to the &lt;code&gt;lowerBound&lt;/code&gt; value. If no &lt;code&gt;lowerBound&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt;, then the default is that the lower bound has the same value as the upper bound, except if the &lt;code&gt;upperBound&lt;/code&gt; evaluates to &lt;code&gt;*&lt;/code&gt;, in which case the default for the lower bound is 0.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural" xmi:type="uml:Operation" name="hasBounds">
            <bodyCondition xmi:id="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="valueOf(upperBound) = upper and let lowerValue: UnlimitedNatural = valueOf(lowerBound) in (lowerValue = lower or  lowerValue = null and      (lower = upper or       lower = 0 and upper = *))  " language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check whether this &lt;code&gt;MultiplicityRange&lt;/code&gt; represents the range bounded by the given values &lt;code&gt;lower&lt;/code&gt; and &lt;code&gt;upper&lt;/code&gt;, presuming the &lt;code&gt;lowerBound&lt;/code&gt; and &lt;code&gt;upperBound&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt; are model-level evaluable.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural-lower" xmi:type="uml:Parameter" name="lower">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Integer"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural-upper" xmi:type="uml:Parameter" name="upper">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#UnlimitedNatural"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Multiplicities-MultiplicityRange-hasBounds_Integer_UnlimitedNatural-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression" xmi:type="uml:Operation" name="valueOf">
            <bodyCondition xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if bound = null or not bound.isModelLevelEvaluable then      null else     let boundEval: Sequence(Element) = bound.evaluate(owningType) in     if boundEval-&gt;size() &lt;&gt; 1 then null else         let valueEval: Element = boundEval-&gt;at(1) in         if valueEval.oclIsKindOf(LiteralInfinity) then *         else if valueEval.oclIsKindOf(LiteralInteger) then             let value : Integer =                  valueEval.oclAsKindOf(LiteralInteger).value in             if value &gt;= 0 then value else null endif         else null         endif endif     endif endif " language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Evaluate the given &lt;code&gt;bound&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; (at model level) and return the result represented as a MOF &lt;code&gt;UnlimitedNatural&lt;/code&gt; value.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-bound" xmi:type="uml:Parameter" name="bound">
              <lowerValue xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-bound-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Kernel-Functions-Expression"/>
              <upperValue xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-bound-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#UnlimitedNatural"/>
              <upperValue xmi:id="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Multiplicities-MultiplicityRange-valueOf_Expression-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Multiplicities-MultiplicityRange-checkMultiplicityRangeExpressionTypeFeaturing" xmi:type="uml:Constraint" name="checkMultiplicityRangeExpressionTypeFeaturing">
            <constrainedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-checkMultiplicityRangeExpressionTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;bounds&lt;/code&gt; of a &lt;code&gt;MultiplicityRange&lt;/code&gt; must have the same &lt;code&gt;featuringTypes&lt;/code&gt; as the &lt;code&gt;MultiplicityRange&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-checkMultiplicityRangeExpressionTypeFeaturing"/>
</ownedComment>
            <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-checkMultiplicityRangeExpressionTypeFeaturing-specification0" xmi:type="uml:OpaqueExpression" body="bound-&gt;forAll(b | b.featuringType = self.featuringType)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeBound" xmi:type="uml:Constraint" name="deriveMultiplicityRangeBound">
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeBound-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;bounds&lt;/code&gt; of a &lt;code&gt;MultiplicityRange&lt;/code&gt; are the &lt;code&gt;lowerBound&lt;/code&gt; (if any) followed by the &lt;code&gt;upperBound&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeBound"/>
</ownedComment>
            <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeBound-specification0" xmi:type="uml:OpaqueExpression" body="bound =     if upperBound = null then Sequence{}     else if lowerBound = null then Sequence{upperBound}     else Sequence{lowerBound, upperBound}     endif endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBoundResultTypes" xmi:type="uml:Constraint" name="validateMultiplicityRangeBoundResultTypes">
            <constrainedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBoundResultTypes-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;results&lt;/code&gt; of the &lt;code&gt;bound&lt;/code&gt; &lt;code&gt;Expression(s)&lt;/code&gt; of a &lt;code&gt;MultiplicityRange&lt;/code&gt; must be typed by &lt;code&gt;&lt;em&gt;ScalarValues::Intger&lt;/em&gt;&lt;/code&gt; from the Kernel Data Types Library. If a &lt;code&gt;bound&lt;/code&gt; is model-level evaluable, then it must evaluate to a non-negative value.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBoundResultTypes"/>
</ownedComment>
            <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBoundResultTypes-specification0" xmi:type="uml:OpaqueExpression" body="bound-&gt;forAll(b |     b.result.specializesFromLibrary('ScalarValues::Integer') and     let value : UnlimitedNatural = valueOf(b) in     value &lt;&gt; null implies value &gt;= 0 )" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBounds" xmi:type="uml:Constraint" name="validateMultiplicityRangeBounds">
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBounds-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;lowerBound&lt;/code&gt; (if any) and &lt;code&gt;upperBound&lt;/code&gt; &lt;code&gt;Expressions&lt;/code&gt; must be the first &lt;code&gt;ownedMembers&lt;/code&gt; of a &lt;code&gt;MultiplicityRange&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBounds"/>
</ownedComment>
            <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-validateMultiplicityRangeBounds-specification0" xmi:type="uml:OpaqueExpression" body="if lowerBound = null then     ownedMember-&gt;notEmpty() and     ownedMember-&gt;at(1) = upperBound else     ownedMember-&gt;size() &gt; 1 and     ownedMember-&gt;at(1) = lowerBound and     ownedMember-&gt;at(2) = upperBound endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeUpperBound" xmi:type="uml:Constraint" name="deriveMultiplicityRangeUpperBound">
            <constrainedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeUpperBound-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;MultiplicityRange&lt;/code&gt; has one &lt;code&gt;ownedMember&lt;/code&gt; that is an &lt;code&gt;Expression&lt;/code&gt;, then this is the &lt;code&gt;upperBound&lt;/code&gt;. If it has more than one &lt;code&gt;ownedMember&lt;/code&gt; that is an &lt;code&gt;Expression&lt;/code&gt;, then the &lt;code&gt;upperBound&lt;/code&gt; is the second of those. Otherwise, it is null.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeUpperBound"/>
</ownedComment>
            <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeUpperBound-specification0" xmi:type="uml:OpaqueExpression" body="upperBound =     let ownedExpressions : Sequence(Expression) =         ownedMember-&gt;selectByKind(Expression) in     if ownedExpressions-&gt;isEmpty() then null     else if ownedExpressions-&gt;size() = 1 then ownedExpressions-&gt;at(1)     else ownedExpressions-&gt;at(2)     endif endif " language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeLowerBound" xmi:type="uml:Constraint" name="deriveMultiplicityRangeLowerBound">
            <constrainedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
            <ownedComment xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeLowerBound-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;MultiplicityRange&lt;/code&gt; has two &lt;code&gt;ownedMembers&lt;/code&gt; that are &lt;code&gt;Expressions&lt;/code&gt;, then the &lt;code&gt;lowerBound&lt;/code&gt; is the first of these, otherwise it is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeLowerBound"/>
</ownedComment>
            <specification xmi:id="Kernel-Multiplicities-MultiplicityRange-deriveMultiplicityRangeLowerBound-specification0" xmi:type="uml:OpaqueExpression" body="lowerBound =     let ownedExpressions : Sequence(Expression) =         ownedMember-&gt;selectByKind(Expression) in     if ownedExpressions-&gt;size() &lt; 2 then null     else ownedExpressions-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Multiplicities-A_lowerBound_multiplicity" xmi:type="uml:Association" name="A_lowerBound_multiplicity">
          <memberEnd xmi:idref="Kernel-Multiplicities-MultiplicityRange-lowerBound"/>
          <memberEnd xmi:idref="Kernel-Multiplicities-A_lowerBound_multiplicity-multiplicity"/>
          <ownedEnd xmi:id="Kernel-Multiplicities-A_lowerBound_multiplicity-multiplicity" xmi:type="uml:Property" isDerived="true" name="multiplicity">
            <association xmi:idref="Kernel-Multiplicities-A_lowerBound_multiplicity"/>
            <lowerValue xmi:id="Kernel-Multiplicities-A_lowerBound_multiplicity-multiplicity-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Kernel-Multiplicities-A_bound_multiplicity-multiplicity"/>
            <type xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
            <upperValue xmi:id="Kernel-Multiplicities-A_lowerBound_multiplicity-multiplicity-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Multiplicities-A_upperBound_multiplicity" xmi:type="uml:Association" name="A_upperBound_multiplicity">
          <memberEnd xmi:idref="Kernel-Multiplicities-MultiplicityRange-upperBound"/>
          <memberEnd xmi:idref="Kernel-Multiplicities-A_upperBound_multiplicity-multiplicity"/>
          <ownedEnd xmi:id="Kernel-Multiplicities-A_upperBound_multiplicity-multiplicity" xmi:type="uml:Property" isDerived="true" name="multiplicity">
            <association xmi:idref="Kernel-Multiplicities-A_upperBound_multiplicity"/>
            <lowerValue xmi:id="Kernel-Multiplicities-A_upperBound_multiplicity-multiplicity-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Kernel-Multiplicities-A_bound_multiplicity-multiplicity"/>
            <type xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
            <upperValue xmi:id="Kernel-Multiplicities-A_upperBound_multiplicity-multiplicity-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Multiplicities-A_bound_multiplicity" xmi:type="uml:Association" name="A_bound_multiplicity">
          <memberEnd xmi:idref="Kernel-Multiplicities-MultiplicityRange-bound"/>
          <memberEnd xmi:idref="Kernel-Multiplicities-A_bound_multiplicity-multiplicity"/>
          <ownedEnd xmi:id="Kernel-Multiplicities-A_bound_multiplicity-multiplicity" xmi:type="uml:Property" isDerived="true" name="multiplicity">
            <association xmi:idref="Kernel-Multiplicities-A_bound_multiplicity"/>
            <lowerValue xmi:id="Kernel-Multiplicities-A_bound_multiplicity-multiplicity-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Features-Feature-owningType"/>
            <type xmi:idref="Kernel-Multiplicities-MultiplicityRange"/>
            <upperValue xmi:id="Kernel-Multiplicities-A_bound_multiplicity-multiplicity-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Connectors" xmi:type="uml:Package" URI="" name="Connectors">
        <packagedElement xmi:id="Kernel-Connectors-A_association_typedConnector" xmi:type="uml:Association" name="A_association_typedConnector">
          <memberEnd xmi:idref="Kernel-Connectors-Connector-association"/>
          <memberEnd xmi:idref="Kernel-Connectors-A_association_typedConnector-typedConnector"/>
          <ownedEnd xmi:id="Kernel-Connectors-A_association_typedConnector-typedConnector" xmi:type="uml:Property" isDerived="true" name="typedConnector">
            <association xmi:idref="Kernel-Connectors-A_association_typedConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-A_association_typedConnector-typedConnector-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Features-A_typedFeature_type-typedFeature"/>
            <type xmi:idref="Kernel-Connectors-Connector"/>
            <upperValue xmi:id="Kernel-Connectors-A_association_typedConnector-typedConnector-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-A_targetFeature_targetConnector" xmi:type="uml:Association" name="A_targetFeature_targetConnector">
          <memberEnd xmi:idref="Kernel-Connectors-Connector-targetFeature"/>
          <memberEnd xmi:idref="Kernel-Connectors-A_targetFeature_targetConnector-targetConnector"/>
          <ownedEnd xmi:id="Kernel-Connectors-A_targetFeature_targetConnector-targetConnector" xmi:type="uml:Property" isDerived="true" name="targetConnector">
            <association xmi:idref="Kernel-Connectors-A_targetFeature_targetConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-A_targetFeature_targetConnector-targetConnector-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Kernel-Connectors-A_relatedFeature_connector-connector"/>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Kernel-Connectors-Connector"/>
            <upperValue xmi:id="Kernel-Connectors-A_targetFeature_targetConnector-targetConnector-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-A_participantFeature_Association" xmi:type="uml:Association" name="A_participantFeature_Association">
          <memberEnd xmi:idref="Kernel-Connectors-A_participantFeature_Association-participantFeature"/>
          <memberEnd xmi:idref="Kernel-Connectors-A_participantFeature_Association-"/>
          <navigableOwnedEnd xmi:idref="Kernel-Connectors-A_participantFeature_Association-participantFeature"/>
          <ownedEnd xmi:id="Kernel-Connectors-A_participantFeature_Association-" xmi:type="uml:Property" name="">
            <association xmi:idref="Kernel-Connectors-A_participantFeature_Association"/>
            <type xmi:idref="Kernel-Associations-Association"/>
          </ownedEnd>
          <ownedEnd xmi:id="Kernel-Connectors-A_participantFeature_Association-participantFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="participantFeature">
            <association xmi:idref="Kernel-Connectors-A_participantFeature_Association"/>
            <lowerValue xmi:id="Kernel-Connectors-A_participantFeature_Association-participantFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="2"/>
            <subsettedProperty xmi:idref="Core-Types-Type-ownedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Connectors-A_participantFeature_Association-participantFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-Succession" xmi:type="uml:Class" name="Succession">
          <generalization xmi:id="Kernel-Connectors-Succession-_generalization.Kernel-Connectors-Connector" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Connectors-Connector"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Connectors-Succession-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Succession&lt;/code&gt; is a binary &lt;code&gt;Connector&lt;/code&gt; that requires its &lt;code&gt;relatedFeatures&lt;/code&gt; to happen separately in time.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Connectors-Succession"/>
          </ownedComment>
          <ownedRule xmi:id="Kernel-Connectors-Succession-checkSuccessionSpecialization" xmi:type="uml:Constraint" name="checkSuccessionSpecialization">
            <constrainedElement xmi:idref="Kernel-Connectors-Succession"/>
            <ownedComment xmi:id="Kernel-Connectors-Succession-checkSuccessionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Succession&lt;/code&gt; must directly or indirectly specialize the Feature &lt;code&gt;&lt;em&gt;Occurrences::happensBeforeLinks&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Succession-checkSuccessionSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Succession-checkSuccessionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Occurrences::happensBeforeLinks')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-A_sourceFeature_sourceConnector" xmi:type="uml:Association" name="A_sourceFeature_sourceConnector">
          <memberEnd xmi:idref="Kernel-Connectors-Connector-sourceFeature"/>
          <memberEnd xmi:idref="Kernel-Connectors-A_sourceFeature_sourceConnector-sourceConnector"/>
          <ownedEnd xmi:id="Kernel-Connectors-A_sourceFeature_sourceConnector-sourceConnector" xmi:type="uml:Property" isDerived="true" name="sourceConnector">
            <association xmi:idref="Kernel-Connectors-A_sourceFeature_sourceConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-A_sourceFeature_sourceConnector-sourceConnector-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <subsettedProperty xmi:idref="Kernel-Connectors-A_relatedFeature_connector-connector"/>
            <type xmi:idref="Kernel-Connectors-Connector"/>
            <upperValue xmi:id="Kernel-Connectors-A_sourceFeature_sourceConnector-sourceConnector-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-A_connectorEnd_featuringConnector" xmi:type="uml:Association" name="A_connectorEnd_featuringConnector">
          <memberEnd xmi:idref="Kernel-Connectors-Connector-connectorEnd"/>
          <memberEnd xmi:idref="Kernel-Connectors-A_connectorEnd_featuringConnector-featuringConnector"/>
          <ownedEnd xmi:id="Kernel-Connectors-A_connectorEnd_featuringConnector-featuringConnector" xmi:type="uml:Property" isDerived="true" name="featuringConnector">
            <association xmi:idref="Kernel-Connectors-A_connectorEnd_featuringConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-A_connectorEnd_featuringConnector-featuringConnector-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature"/>
            <type xmi:idref="Kernel-Connectors-Connector"/>
            <upperValue xmi:id="Kernel-Connectors-A_connectorEnd_featuringConnector-featuringConnector-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-Connector" xmi:type="uml:Class" name="Connector">
          <generalization xmi:id="Kernel-Connectors-Connector-_generalization.Core-Features-Feature" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Feature"/>
          </generalization>
          <generalization xmi:id="Kernel-Connectors-Connector-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Connectors-Connector-relatedFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" isUnique="false" name="relatedFeature">
            <association xmi:idref="Kernel-Connectors-A_relatedFeature_connector"/>
            <lowerValue xmi:id="Kernel-Connectors-Connector-relatedFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-relatedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Features&lt;/code&gt; that are related by this &lt;code&gt;Connector&lt;/code&gt; considered as a &lt;code&gt;Relationship&lt;/code&gt; and that restrict the links it identifies, given by the referenced &lt;code&gt;Features&lt;/code&gt; of the &lt;code&gt;connectorEnds&lt;/code&gt; of the &lt;code&gt;Connector&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-relatedFeature"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-relatedElement"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Connectors-Connector-relatedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Connectors-Connector-association" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="association">
            <association xmi:idref="Kernel-Connectors-A_association_typedConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-Connector-association-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-association-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Associations&lt;/code&gt; that type the &lt;code&gt;Connector&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-association"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Features-Feature-type"/>
            <type xmi:idref="Kernel-Associations-Association"/>
            <upperValue xmi:id="Kernel-Connectors-Connector-association-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Connectors-Connector-connectorEnd" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="connectorEnd">
            <association xmi:idref="Kernel-Connectors-A_connectorEnd_featuringConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-Connector-connectorEnd-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-connectorEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;endFeatures&lt;/code&gt; of a &lt;code&gt;Connector&lt;/code&gt;, which redefine the &lt;code&gt;endFeatures&lt;/code&gt; of the &lt;code&gt;associations&lt;/code&gt; of the &lt;code&gt;Connector&lt;/code&gt;. The &lt;code&gt;connectorEnds&lt;/code&gt; determine via &lt;code&gt;ReferenceSubsetting&lt;/code&gt; &lt;code&gt;Relationships&lt;/code&gt; which &lt;code&gt;Features&lt;/code&gt; are related by the &lt;code&gt;Connector&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-connectorEnd"/>
</ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Type-endFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Connectors-Connector-connectorEnd-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Connectors-Connector-sourceFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="sourceFeature">
            <association xmi:idref="Kernel-Connectors-A_sourceFeature_sourceConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-Connector-sourceFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-sourceFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The source &lt;code&gt;relatedFeature&lt;/code&gt; for this &lt;code&gt;Connector&lt;/code&gt;. It is the first &lt;code&gt;relatedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-sourceFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Kernel-Connectors-Connector-relatedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Connectors-Connector-sourceFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Connectors-Connector-targetFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="targetFeature">
            <association xmi:idref="Kernel-Connectors-A_targetFeature_targetConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-Connector-targetFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-targetFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The target &lt;code&gt;relatedFeatures&lt;/code&gt; for this &lt;code&gt;Connector&lt;/code&gt;. This includes all the &lt;code&gt;relatedFeatures&lt;/code&gt; other than the &lt;code&gt;sourceFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-targetFeature"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <subsettedProperty xmi:idref="Kernel-Connectors-Connector-relatedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Connectors-Connector-targetFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Connectors-Connector-defaultFeaturingType" xmi:type="uml:Property" isDerived="true" name="defaultFeaturingType">
            <association xmi:idref="Kernel-Connectors-A_defaultFeaturingType_featuredConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-Connector-defaultFeaturingType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-defaultFeaturingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The innermost &lt;code&gt;Type&lt;/code&gt; that is a common direct or indirect &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;relatedFeatures&lt;/code&gt;, such that, if it exists and was the &lt;code&gt;featuringType&lt;/code&gt; of this &lt;code&gt;Connector&lt;/code&gt;, the &lt;code&gt;Connector&lt;/code&gt; would satisfy the &lt;code&gt;checkConnectorTypeFeaturing&lt;/code&gt; constraint.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-defaultFeaturingType"/>
</ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Kernel-Connectors-Connector-defaultFeaturingType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Connectors-Connector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Connector&lt;/code&gt; is a usage of &lt;code&gt;Associations&lt;/code&gt;, with links restricted according to instances of the &lt;code&gt;Type&lt;/code&gt; in which they are used (domain of the &lt;code&gt;Connector&lt;/code&gt;). The &lt;code&gt;associations&lt;/code&gt; of the &lt;code&gt;Connector&lt;/code&gt; restrict what kinds of things might be linked. The &lt;code&gt;Connector&lt;/code&gt; further restricts these links to be between values of &lt;code&gt;Features&lt;/code&gt; on instances of its domain.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Connectors-Connector"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Connectors-Connector-checkConnectorBinarySpecialization" xmi:type="uml:Constraint" name="checkConnectorBinarySpecialization">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-checkConnectorBinarySpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A binary &lt;code&gt;Connector&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Connector&lt;/code&gt; &lt;code&gt;&lt;em&gt;Links::binaryLinks&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-checkConnectorBinarySpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-checkConnectorBinarySpecialization-specification0" xmi:type="uml:OpaqueExpression" body="connectorEnd-&gt;size() = 2 implies specializesFromLibrary('Links::binaryLinks')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-deriveConnectorSourceFeature" xmi:type="uml:Constraint" name="deriveConnectorSourceFeature">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-deriveConnectorSourceFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;sourceFeature&lt;/code&gt; of a &lt;code&gt;Connector&lt;/code&gt; is its first &lt;code&gt;relatedFeature&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-deriveConnectorSourceFeature"/>
            </ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-deriveConnectorSourceFeature-specification0" xmi:type="uml:OpaqueExpression" body="sourceFeature = if relatedFeature-&gt;isEmpty() then null else relatedFeature-&gt;first() endif" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-checkConnectorTypeFeaturing" xmi:type="uml:Constraint" name="checkConnectorTypeFeaturing">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-checkConnectorTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Each &lt;code&gt;relatedFeature&lt;/code&gt; of a &lt;code&gt;Connector&lt;/code&gt; must have each &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;Connector&lt;/code&gt; as a direct or indirect &lt;code&gt;featuringType&lt;/code&gt; (where a &lt;code&gt;Feature&lt;/code&gt; with no &lt;code&gt;featuringType&lt;/code&gt; is treated as if the &lt;code&gt;Classifier&lt;/code&gt; &lt;code&gt;&lt;em&gt;Base::Anything&lt;/em&gt;&lt;/code&gt; was its &lt;code&gt;featuringType&lt;/code&gt;).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-checkConnectorTypeFeaturing"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-checkConnectorTypeFeaturing-specification0" xmi:type="uml:OpaqueExpression" body="relatedFeature-&gt;forAll(f |      if featuringType-&gt;isEmpty() then f.isFeaturedWithin(null)     else featuringType-&gt;forAll(t | f.isFeaturedWithin(t))     endif)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-deriveConnectorTargetFeature" xmi:type="uml:Constraint" name="deriveConnectorTargetFeature">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-deriveConnectorTargetFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;targetFeatures&lt;/code&gt; of a &lt;code&gt;Connector&lt;/code&gt; are the &lt;code&gt;relatedFeatures&lt;/code&gt; other than the &lt;code&gt;sourceFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-deriveConnectorTargetFeature"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-deriveConnectorTargetFeature-specification0" xmi:type="uml:OpaqueExpression" body="targetFeature =     if relatedFeature-&gt;size() &lt; 2 then OrderedSet{}     else          relatedFeature-&gt;             subSequence(2, relatedFeature-&gt;size())-&gt;             asOrderedSet()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-checkConnectorObjectSpecialization" xmi:type="uml:Constraint" name="checkConnectorObjectSpecialization">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-checkConnectorObjectSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Connector&lt;/code&gt; for an &lt;code&gt;AssociationStructure&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Connector&lt;/code&gt; &lt;code&gt;&lt;em&gt;Objects::linkObjects&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-checkConnectorObjectSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-checkConnectorObjectSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="association-&gt;exists(oclIsKindOf(AssociationStructure)) implies specializesFromLibrary('Objects::linkObjects')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-validateConnectorBinarySpecialization" xmi:type="uml:Constraint" name="validateConnectorBinarySpecialization">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-validateConnectorBinarySpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Connector&lt;/code&gt; has more than two &lt;code&gt;connectorEnds&lt;/code&gt;, then it must &lt;em&gt;not&lt;/em&gt; specialize, directly or indirectly, the &lt;code&gt;Association&lt;/code&gt; &lt;em&gt;&lt;code&gt;BinaryLink&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-validateConnectorBinarySpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-validateConnectorBinarySpecialization-specification0" xmi:type="uml:OpaqueExpression" body="connectorEnds-&gt;size() &gt; 2 implies not specializesFromLibrary('Links::BinaryLink')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-deriveConnectorRelatedFeature" xmi:type="uml:Constraint" name="deriveConnectorRelatedFeature">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-deriveConnectorRelatedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;relatedFeatures&lt;/code&gt; of a &lt;code&gt;Connector&lt;/code&gt; are the referenced &lt;code&gt;Features&lt;/code&gt; of its &lt;code&gt;connectorEnds&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-deriveConnectorRelatedFeature"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-deriveConnectorRelatedFeature-specification0" xmi:type="uml:OpaqueExpression" body="relatedFeature = connectorEnd.ownedReferenceSubsetting-&gt; select(s | s &lt;&gt; null).subsettedFeature" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-checkConnectorSpecialization" xmi:type="uml:Constraint" name="checkConnectorSpecialization">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-checkConnectorSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Connector&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Connector&lt;/code&gt; &lt;code&gt;&lt;em&gt;Links::links&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-checkConnectorSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-checkConnectorSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Links::links')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-validateConnectorRelatedFeatures" xmi:type="uml:Constraint" name="validateConnectorRelatedFeatures">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-validateConnectorRelatedFeatures-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Connector&lt;/code&gt; is concrete (not abstract), then it must have at least two &lt;code&gt;relatedFeatures&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-validateConnectorRelatedFeatures"/>
            </ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-validateConnectorRelatedFeatures-specification0" xmi:type="uml:OpaqueExpression" body="not isAbstract implies relatedFeature-&gt;size() &gt;= 2" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-deriveConnectorDefaultFeaturingType" xmi:type="uml:Constraint" name="deriveConnectorDefaultFeaturingType">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-deriveConnectorDefaultFeaturingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;defaultFeaturingType&lt;/code&gt; of a &lt;code&gt;Connector&lt;/code&gt; is the innermost common direct or indirect &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;relatedFeatures&lt;/code&gt; of the &lt;code&gt;Connector&lt;/code&gt;, so that each &lt;code&gt;relatedElement&lt;/code&gt; is featured within the &lt;code&gt;defaultFeaturingType&lt;/code&gt;, if such exists.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-deriveConnectorDefaultFeaturingType"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-deriveConnectorDefaultFeaturingType-specification0" xmi:type="uml:OpaqueExpression" body="let commonFeaturingTypes : OrderedSet(Type) =      relatedFeature-&gt;closure(featuringType)-&gt;select(t |          relatedFeature-&gt;forAll(f | f.isFeaturedWithin(t))     ) in let nearestCommonFeaturingTypes : OrderedSet(Type) =     commonFeaturingTypes-&gt;reject(t1 |          commonFeaturingTypes-&gt;exists(t2 |              t2 &lt;&gt; t1 and t2-&gt;closure(featuringType)-&gt;contains(t1)     )) in if nearestCommonFeaturingTypes-&gt;isEmpty() then null else nearestCommonFeaturingTypes-&gt;first() endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-Connector-checkConnectorBinaryObjectSpecialization" xmi:type="uml:Constraint" name="checkConnectorBinaryObjectSpecialization">
            <constrainedElement xmi:idref="Kernel-Connectors-Connector"/>
            <ownedComment xmi:id="Kernel-Connectors-Connector-checkConnectorBinaryObjectSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A binary &lt;code&gt;Connector&lt;/code&gt; for an &lt;code&gt;AssociationStructure&lt;/code&gt;  must directly or indirectly specialize the base &lt;code&gt;Connector&lt;/code&gt; &lt;code&gt;&lt;em&gt;Objects::binaryLinkObjects&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-Connector-checkConnectorBinaryObjectSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-Connector-checkConnectorBinaryObjectSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="connectorEnds-&gt;size() = 2 and association-&gt;exists(oclIsKindOf(AssociationStructure)) implies     specializesFromLibrary('Objects::binaryLinkObjects')" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-A_defaultFeaturingType_featuredConnector" xmi:type="uml:Association" name="A_defaultFeaturingType_featuredConnector">
          <memberEnd xmi:idref="Kernel-Connectors-Connector-defaultFeaturingType"/>
          <memberEnd xmi:idref="Kernel-Connectors-A_defaultFeaturingType_featuredConnector-featuredConnector"/>
          <ownedEnd xmi:id="Kernel-Connectors-A_defaultFeaturingType_featuredConnector-featuredConnector" xmi:type="uml:Property" isDerived="true" name="featuredConnector">
            <association xmi:idref="Kernel-Connectors-A_defaultFeaturingType_featuredConnector"/>
            <lowerValue xmi:id="Kernel-Connectors-A_defaultFeaturingType_featuredConnector-featuredConnector-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Connectors-A_defaultFeaturingType_featuredConnector-featuredConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Connector&lt;/code&gt; with a certain &lt;code&gt;defaultFeaturingType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-A_defaultFeaturingType_featuredConnector-featuredConnector"/>
            </ownedComment>
            <type xmi:idref="Kernel-Connectors-Connector"/>
            <upperValue xmi:id="Kernel-Connectors-A_defaultFeaturingType_featuredConnector-featuredConnector-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-A_relatedFeature_connector" xmi:type="uml:Association" name="A_relatedFeature_connector">
          <memberEnd xmi:idref="Kernel-Connectors-Connector-relatedFeature"/>
          <memberEnd xmi:idref="Kernel-Connectors-A_relatedFeature_connector-connector"/>
          <ownedEnd xmi:id="Kernel-Connectors-A_relatedFeature_connector-connector" xmi:type="uml:Property" isDerived="true" name="connector">
            <association xmi:idref="Kernel-Connectors-A_relatedFeature_connector"/>
            <lowerValue xmi:id="Kernel-Connectors-A_relatedFeature_connector-connector-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Elements-A_relatedElement_relationship-relationship"/>
            <type xmi:idref="Kernel-Connectors-Connector"/>
            <upperValue xmi:id="Kernel-Connectors-A_relatedFeature_connector-connector-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Connectors-BindingConnector" xmi:type="uml:Class" name="BindingConnector">
          <generalization xmi:id="Kernel-Connectors-BindingConnector-_generalization.Kernel-Connectors-Connector" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Connectors-Connector"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Connectors-BindingConnector-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;BindingConnector&lt;/code&gt; is a binary &lt;code&gt;Connector&lt;/code&gt; that requires its &lt;code&gt;relatedFeatures&lt;/code&gt; to identify the same things (have the same values).&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Connectors-BindingConnector"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Connectors-BindingConnector-validateBindingConnectorIsBinary" xmi:type="uml:Constraint" name="validateBindingConnectorIsBinary">
            <constrainedElement xmi:idref="Kernel-Connectors-BindingConnector"/>
            <ownedComment xmi:id="Kernel-Connectors-BindingConnector-validateBindingConnectorIsBinary-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;BindingConnector&lt;/code&gt; must be binary.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-BindingConnector-validateBindingConnectorIsBinary"/>
            </ownedComment>
            <specification xmi:id="Kernel-Connectors-BindingConnector-validateBindingConnectorIsBinary-specification0" xmi:type="uml:OpaqueExpression" body="relatedFeature-&gt;size() = 2" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Connectors-BindingConnector-checkBindingConnectorSpecialization" xmi:type="uml:Constraint" name="checkBindingConnectorSpecialization">
            <constrainedElement xmi:idref="Kernel-Connectors-BindingConnector"/>
            <ownedComment xmi:id="Kernel-Connectors-BindingConnector-checkBindingConnectorSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;BindingConnector&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;BindingConnector&lt;/code&gt; &lt;code&gt;&lt;em&gt;Links::selfLinks&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Connectors-BindingConnector-checkBindingConnectorSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Connectors-BindingConnector-checkBindingConnectorSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Links::selfLinks')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Classes" xmi:type="uml:Package" URI="" name="Classes">
        <packagedElement xmi:id="Kernel-Classes-Class" xmi:type="uml:Class" name="Class">
          <generalization xmi:id="Kernel-Classes-Class-_generalization.Core-Classifiers-Classifier" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Classifiers-Classifier"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Classes-Class-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Class&lt;/code&gt; is a &lt;code&gt;Classifier&lt;/code&gt; of things (in the universe) that can be distinguished without regard to how they are related to other things (via &lt;code&gt;Features&lt;/code&gt;). This means multiple things classified by the same &lt;code&gt;Class&lt;/code&gt; can be distinguished, even when they are related other things in exactly the same way.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Classes-Class"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Classes-Class-checkClassSpecialization" xmi:type="uml:Constraint" name="checkClassSpecialization">
            <constrainedElement xmi:idref="Kernel-Classes-Class"/>
            <ownedComment xmi:id="Kernel-Classes-Class-checkClassSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Class&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Class&lt;/code&gt; &lt;code&gt;&lt;em&gt;Occurrences::Occurrence&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Classes-Class-checkClassSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Classes-Class-checkClassSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Occurrences::Occurrence')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Classes-Class-validateClassSpecialization" xmi:type="uml:Constraint" name="validateClassSpecialization">
            <constrainedElement xmi:idref="Kernel-Classes-Class"/>
            <ownedComment xmi:id="Kernel-Classes-Class-validateClassSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Class&lt;/code&gt; must not specialize a &lt;code&gt;DataType&lt;/code&gt; and it can only specialize an &lt;code&gt;Association&lt;/code&gt; if it is also itself a kind of &lt;code&gt;Association&lt;/code&gt; (such as an &lt;code&gt;AssociationStructure&lt;/code&gt; or &lt;code&gt;Interaction&lt;/code&gt;).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Classes-Class-validateClassSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Classes-Class-validateClassSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedSpecialization.general-&gt;     forAll(not oclIsKindOf(DataType)) and not oclIsKindOf(Association) implies     ownedSpecialization.general-&gt;         forAll(not oclIsKindOf(Association))" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Metadata" xmi:type="uml:Package" URI="" name="Metadata">
        <packagedElement xmi:id="Kernel-Metadata-Metaclass" xmi:type="uml:Class" name="Metaclass">
          <generalization xmi:id="Kernel-Metadata-Metaclass-_generalization.Kernel-Structures-Structure" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Structures-Structure"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Metadata-Metaclass-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Metaclass&lt;/code&gt; is a &lt;code&gt;Structure&lt;/code&gt; used to type &lt;code&gt;MetadataFeatures&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Metadata-Metaclass"/>
          </ownedComment>
          <ownedRule xmi:id="Kernel-Metadata-Metaclass-checkMetaclassSpecialization" xmi:type="uml:Constraint" name="checkMetaclassSpecialization">
            <constrainedElement xmi:idref="Kernel-Metadata-Metaclass"/>
            <ownedComment xmi:id="Kernel-Metadata-Metaclass-checkMetaclassSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Metaclass&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Metaclass&lt;/code&gt; &lt;code&gt;&lt;em&gt;Metaobjects::Metaobject&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-Metaclass-checkMetaclassSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Metadata-Metaclass-checkMetaclassSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Metaobjects::Metaobject')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Metadata-MetadataFeature" xmi:type="uml:Class" name="MetadataFeature">
          <generalization xmi:id="Kernel-Metadata-MetadataFeature-_generalization.Root-Annotations-AnnotatingElement" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Annotations-AnnotatingElement"/>
          </generalization>
          <generalization xmi:id="Kernel-Metadata-MetadataFeature-_generalization.Core-Features-Feature" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Feature"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Metadata-MetadataFeature-metaclass" xmi:type="uml:Property" isDerived="true" name="metaclass">
            <association xmi:idref="Kernel-Metadata-A_metaclass_typedMetadata"/>
            <lowerValue xmi:id="Kernel-Metadata-MetadataFeature-metaclass-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-metaclass-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; of this &lt;code&gt;MetadataFeature&lt;/code&gt;, which must be a &lt;code&gt;Metaclass&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-metaclass"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Feature-type"/>
            <type xmi:idref="Kernel-Metadata-Metaclass"/>
            <upperValue xmi:id="Kernel-Metadata-MetadataFeature-metaclass-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MetadataFeature&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt; that is an &lt;code&gt;AnnotatingElement&lt;/code&gt; used to annotate another &lt;code&gt;Element&lt;/code&gt; with metadata. It is typed by a &lt;code&gt;Metaclass&lt;/code&gt;. All its &lt;code&gt;ownedFeatures&lt;/code&gt; must redefine &lt;code&gt;features&lt;/code&gt; of its &lt;code&gt;metaclass&lt;/code&gt; and any feature bindings must be model-level evaluable.&lt;/p&gt;  ">
            <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
</ownedComment>
          <ownedOperation xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature" xmi:type="uml:Operation" name="evaluateFeature">
            <bodyCondition xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let selectedFeatures : Sequence(Feature) = feature-&gt;     select(closure(ownedRedefinition.redefinedFeature)-&gt;            includes(baseFeature)) in if selectedFeatures-&gt;isEmpty() then null else     let selectedFeature : Feature = selectedFeatures-&gt;first() in     let featureValues : FeatureValue = selectedFeature-&gt;         closure(ownedRedefinition.redefinedFeature).ownedMember-&gt;         selectAsKind(FeatureValue) in     if featureValues-&gt;isEmpty() then null     else featureValues-&gt;first().value.evaluate(self)     endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the given &lt;code&gt;baseFeature&lt;/code&gt; is a &lt;code&gt;feature&lt;/code&gt; of this &lt;code&gt;MetadataFeature&lt;/code&gt;, or is directly or indirectly redefined by a &lt;code&gt;feature&lt;/code&gt;, then return the result of evaluating the appropriate (model-level evaluable) &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; for it (if any), with the &lt;code&gt;MetadataFeature&lt;/code&gt; as the target.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature-baseFeature" xmi:type="uml:Parameter" name="baseFeature">
              <type xmi:idref="Core-Features-Feature"/>
            </ownedParameter>
            <ownedParameter xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Metadata-MetadataFeature-evaluateFeature_Feature-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Metadata-MetadataFeature-isSemantic_" xmi:type="uml:Operation" name="isSemantic">
            <bodyCondition xmi:id="Kernel-Metadata-MetadataFeature-isSemantic_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Metadata-MetadataFeature-isSemantic_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Metaobjects::SemanticMetadata')" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-isSemantic_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check if this &lt;code&gt;MetadataFeature&lt;/code&gt; has a &lt;code&gt;metaclass&lt;/code&gt; which is a kind of &lt;code&gt;&lt;em&gt;SemanticMetadata&lt;/code&gt;.&lt;p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-isSemantic_"/>
            </ownedComment>
            <ownedParameter xmi:id="Kernel-Metadata-MetadataFeature-isSemantic_-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Metadata-MetadataFeature-isSemantic_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Metadata-MetadataFeature-isSyntactic_" xmi:type="uml:Operation" name="isSyntactic">
            <bodyCondition xmi:id="Kernel-Metadata-MetadataFeature-isSyntactic_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Metadata-MetadataFeature-isSyntactic_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('KerML::Element')" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-isSyntactic_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check if this &lt;code&gt;MetadataFeature&lt;/code&gt; has a &lt;code&gt;metaclass&lt;/code&gt; that is a kind of &lt;code&gt;&lt;em&gt;KerML::Element&lt;/em&gt;&lt;/code&gt; (that is, it is from the reflective abstract syntax model).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-isSyntactic_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Metadata-MetadataFeature-isSyntactic_-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Metadata-MetadataFeature-isSyntactic_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_" xmi:type="uml:Operation" name="syntaxElement">
            <bodyCondition xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="No OCL" language="English" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;MetadataFeature&lt;/code&gt; reflectively represents a model element, then return the corresponding &lt;code&gt;Element&lt;/code&gt; instance from the MOF abstract syntax representation of the model.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-syntaxElement_"/>
</ownedComment>
            <ownedParameter xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Elements-Element"/>
              <upperValue xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Kernel-Metadata-MetadataFeature-syntaxElement_-unnamed1"/>
            <ownedRule xmi:idref="Kernel-Metadata-MetadataFeature-syntaxElement_-syntaxElement_pre"/>
            <precondition xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_-syntaxElement_pre" xmi:type="uml:Constraint" name="syntaxElement_pre">
              <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature-syntaxElement_"/>
              <specification xmi:id="Kernel-Metadata-MetadataFeature-syntaxElement_-syntaxElement_pre-specification0" xmi:type="uml:OpaqueExpression" body="isSyntactic()" language="OCL2.0" name=""/>
            </precondition>
          </ownedOperation>
          <ownedRule xmi:id="Kernel-Metadata-MetadataFeature-deriveMetadataFeatureMetaclass" xmi:type="uml:Constraint" name="deriveMetadataFeatureMetaclass">
            <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-deriveMetadataFeatureMetaclass-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;metaclass&lt;/code&gt; of a &lt;code&gt;MetadataFeature&lt;/code&gt; is one of its &lt;code&gt;types&lt;/code&gt; that is a &lt;code&gt;Metaclass&lt;/code&gt;.">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-deriveMetadataFeatureMetaclass"/>
</ownedComment>
            <specification xmi:id="Kernel-Metadata-MetadataFeature-deriveMetadataFeatureMetaclass-specification0" xmi:type="uml:OpaqueExpression" body="metaclass =      let metaclassTypes : Sequence(Type) = type-&gt;selectByKind(Metaclass) in     if metaclassTypes-&gt;isEmpty() then null     else metaClassTypes-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclass" xmi:type="uml:Constraint" name="validateMetadataFeatureMetaclass">
            <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclass-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MetadataFeature&lt;/code&gt; must have exactly one &lt;code&gt;type&lt;/code&gt; that is a &lt;code&gt;Metaclass&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclass"/>
            </ownedComment>
            <specification xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclass-specification0" xmi:type="uml:OpaqueExpression" body="type-&gt;selectByKind(Metaclass).size() = 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSpecialization" xmi:type="uml:Constraint" name="checkMetadataFeatureSpecialization">
            <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MetadataFeature&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;MetadataFeature&lt;/code&gt; &lt;code&gt;&lt;em&gt;Metaobjects::metaobjects&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Metaobjects::metaobjects')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclassNotAbstract" xmi:type="uml:Constraint" name="validateMetadataFeatureMetaclassNotAbstract">
            <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclassNotAbstract-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;metaclass&lt;/code&gt; of a &lt;code&gt;MetadataFeature&lt;/code&gt; must not be abstract.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclassNotAbstract"/>
            </ownedComment>
            <specification xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureMetaclassNotAbstract-specification0" xmi:type="uml:OpaqueExpression" body="not metaclass.isAbstract" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSemanticSpecialization" xmi:type="uml:Constraint" name="checkMetadataFeatureSemanticSpecialization">
            <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSemanticSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;MetadataFeature&lt;/code&gt; is an application of &lt;code&gt;&lt;em&gt;SemanticMetadata&lt;/em&gt;&lt;/code&gt;, then its &lt;code&gt;annotatingElement&lt;/code&gt; must be a &lt;code&gt;Type&lt;/code&gt;. The annotated &lt;code&gt;Type&lt;/code&gt; must then directly or indirectly specialize the specified value of the &lt;code&gt;&lt;em&gt;baseType&lt;/em&gt;&lt;/code&gt;, &lt;em&gt;unless&lt;/em&gt; the &lt;code&gt;Type&lt;/code&gt; is a &lt;code&gt;Classifier&lt;/code&gt; and the &lt;code&gt;&lt;em&gt;baseType&lt;/em&gt;&lt;/code&gt; represents a kind of &lt;code&gt;Feature&lt;/code&gt;, in which case the &lt;code&gt;Classifier&lt;/code&gt; must directly or indirectly specialize each of the &lt;code&gt;types&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSemanticSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Metadata-MetadataFeature-checkMetadataFeatureSemanticSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isSemantic() implies     let annotatedTypes : Sequence(Type) =          annotatedElement-&gt;selectAsKind(Type) in     let baseTypes : Sequence(MetadataFeature) =          evaluateFeature(resolveGlobal(             'Metaobjects::SemanticMetadata::baseType').             memberElement.             oclAsType(Feature))-&gt;         selectAsKind(MetadataFeature) in     annotatedTypes-&gt;notEmpty() and      baseTypes()-&gt;notEmpty() and      baseTypes()-&gt;first().isSyntactic() implies         let annotatedType : Type = annotatedTypes-&gt;first() in         let baseType : Element = baseTypes-&gt;first().syntaxElement() in         if annotatedType.oclIsKindOf(Classifier) and              baseType.oclIsKindOf(Feature) then             baseType.oclAsType(Feature).type-&gt;                 forAll(t | annotatedType.specializes(t))         else if baseType.oclIsKindOf(Type) then             annotatedType.specializes(baseType.oclAsType(Type))         else             true         endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureBody" xmi:type="uml:Constraint" name="validateMetadataFeatureBody">
            <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureBody-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Each &lt;code&gt;ownedFeature&lt;/code&gt; of a &lt;code&gt;MetadataFeature&lt;/code&gt; must have no declared name, redefine a single &lt;code&gt;Feature&lt;/code&gt;, either have no &lt;code&gt;featureValue&lt;/code&gt; or a &lt;code&gt;featureValue&lt;/code&gt; with a &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; that is model-level evaluable, and only have &lt;code&gt;ownedFeatures&lt;/code&gt; that also meet these restrictions.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-validateMetadataFeatureBody"/>
</ownedComment>
            <specification xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureBody-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeature-&gt;closure(ownedFeature)-&gt;forAll(f |     f.declaredName = null and f.declaredShortName = null and     f.valuation &lt;&gt; null implies f.valuation.value.isModelLevelEvaluable and     f.redefinition.redefinedFeature-&gt;size() = 1)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureAnnotatedElement" xmi:type="uml:Constraint" name="validateMetadataFeatureAnnotatedElement">
            <constrainedElement xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <ownedComment xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureAnnotatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;annotatedElements&lt;/code&gt; of a &lt;code&gt;MetadataFeature&lt;/code&gt; must have an abstract syntax metaclass consistent with the &lt;code&gt;annotatedElement&lt;/code&gt; declarations for the &lt;code&gt;MetadataFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-MetadataFeature-validateMetadataFeatureAnnotatedElement"/>
</ownedComment>
            <specification xmi:id="Kernel-Metadata-MetadataFeature-validateMetadataFeatureAnnotatedElement-specification0" xmi:type="uml:OpaqueExpression" body="let baseAnnotatedElementFeature : Feature =     resolveGlobal('Metaobjects::Metaobject::annotatedElement').memberElement.     oclAsType(Feature) in let annotatedElementFeatures : OrderedSet(Feature) = feature-&gt;     select(specializes(baseAnnotatedElementFeature))-&gt;     excluding(baseAnnotatedElementFeature) in annotatedElementFeatures-&gt;notEmpty() implies     let annotatedElementTypes : Set(Feature) =         annotatedElementFeatures.typing.type-&gt;asSet() in     let metaclasses : Set(Metaclass) =         annotatedElement.oclType().qualifiedName-&gt;collect(qn |              resolveGlobal(qn).memberElement.oclAsType(Metaclass)) in    metaclasses-&gt;forAll(m | annotatedElementTypes-&gt;exists(t | m.specializes(t)))" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Metadata-A_metaclass_typedMetadata" xmi:type="uml:Association" name="A_metaclass_typedMetadata">
          <memberEnd xmi:idref="Kernel-Metadata-MetadataFeature-metaclass"/>
          <memberEnd xmi:idref="Kernel-Metadata-A_metaclass_typedMetadata-typedMetadata"/>
          <ownedEnd xmi:id="Kernel-Metadata-A_metaclass_typedMetadata-typedMetadata" xmi:type="uml:Property" isDerived="true" name="typedMetadata">
            <association xmi:idref="Kernel-Metadata-A_metaclass_typedMetadata"/>
            <lowerValue xmi:id="Kernel-Metadata-A_metaclass_typedMetadata-typedMetadata-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Metadata-A_metaclass_typedMetadata-typedMetadata-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The MetadataFeatures whose &lt;code&gt;type&lt;/code&gt; is a certain Metaclass.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Metadata-A_metaclass_typedMetadata-typedMetadata"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-A_typedFeature_type-typedFeature"/>
            <type xmi:idref="Kernel-Metadata-MetadataFeature"/>
            <upperValue xmi:id="Kernel-Metadata-A_metaclass_typedMetadata-typedMetadata-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Structures" xmi:type="uml:Package" URI="" name="Structures">
        <packagedElement xmi:id="Kernel-Structures-Structure" xmi:type="uml:Class" name="Structure">
          <generalization xmi:id="Kernel-Structures-Structure-_generalization.Kernel-Classes-Class" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Classes-Class"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Structures-Structure-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Structure&lt;/code&gt; is a &lt;code&gt;Class&lt;/code&gt; of objects in the modeled universe that are primarily structural in nature. While such an object is not itself behavioral, it may be involved in and acted on by &lt;code&gt;Behaviors&lt;/code&gt;, and it may be the performer of some of them.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Structures-Structure"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Structures-Structure-checkStructureSpecialization" xmi:type="uml:Constraint" name="checkStructureSpecialization">
            <constrainedElement xmi:idref="Kernel-Structures-Structure"/>
            <ownedComment xmi:id="Kernel-Structures-Structure-checkStructureSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Structure&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Structure&lt;/code&gt; &lt;code&gt;&lt;em&gt;Objects::Object&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Structures-Structure-checkStructureSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Structures-Structure-checkStructureSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Objects::Object')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Structures-Structure-validateStructureSpecialization" xmi:type="uml:Constraint" name="validateStructureSpecialization">
            <constrainedElement xmi:idref="Kernel-Structures-Structure"/>
            <ownedComment xmi:id="Kernel-Structures-Structure-validateStructureSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Structure&lt;/code&gt; must not specialize a &lt;code&gt;Behavior&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Structures-Structure-validateStructureSpecialization"/>
            </ownedComment>
            <specification xmi:id="Kernel-Structures-Structure-validateStructureSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedSpecialization.general-&gt;forAll(not oclIsKindOf(Behavior))" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-Associations" xmi:type="uml:Package" URI="" name="Associations">
        <packagedElement xmi:id="Kernel-Associations-A_associationEnd_associationWithEnd" xmi:type="uml:Association" name="A_associationEnd_associationWithEnd">
          <memberEnd xmi:idref="Kernel-Associations-Association-associationEnd"/>
          <memberEnd xmi:idref="Kernel-Associations-A_associationEnd_associationWithEnd-associationWithEnd"/>
          <ownedEnd xmi:id="Kernel-Associations-A_associationEnd_associationWithEnd-associationWithEnd" xmi:type="uml:Property" isDerived="true" name="associationWithEnd">
            <association xmi:idref="Kernel-Associations-A_associationEnd_associationWithEnd"/>
            <lowerValue xmi:id="Kernel-Associations-A_associationEnd_associationWithEnd-associationWithEnd-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature"/>
            <type xmi:idref="Kernel-Associations-Association"/>
            <upperValue xmi:id="Kernel-Associations-A_associationEnd_associationWithEnd-associationWithEnd-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Associations-A_sourceType_sourceAssociation" xmi:type="uml:Association" name="A_sourceType_sourceAssociation">
          <memberEnd xmi:idref="Kernel-Associations-Association-sourceType"/>
          <memberEnd xmi:idref="Kernel-Associations-A_sourceType_sourceAssociation-sourceAssociation"/>
          <ownedEnd xmi:id="Kernel-Associations-A_sourceType_sourceAssociation-sourceAssociation" xmi:type="uml:Property" isDerived="true" name="sourceAssociation">
            <association xmi:idref="Kernel-Associations-A_sourceType_sourceAssociation"/>
            <lowerValue xmi:id="Kernel-Associations-A_sourceType_sourceAssociation-sourceAssociation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <subsettedProperty xmi:idref="Kernel-Associations-A_relatedType_association-association"/>
            <type xmi:idref="Kernel-Associations-Association"/>
            <upperValue xmi:id="Kernel-Associations-A_sourceType_sourceAssociation-sourceAssociation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Associations-Association" xmi:type="uml:Class" name="Association">
          <generalization xmi:id="Kernel-Associations-Association-_generalization.Core-Classifiers-Classifier" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Classifiers-Classifier"/>
          </generalization>
          <generalization xmi:id="Kernel-Associations-Association-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Kernel-Associations-Association-relatedType" xmi:type="uml:Property" isDerived="true" isOrdered="true" isUnique="false" name="relatedType">
            <association xmi:idref="Kernel-Associations-A_relatedType_association"/>
            <lowerValue xmi:id="Kernel-Associations-Association-relatedType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Associations-Association-relatedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;types&lt;/code&gt; of the &lt;code&gt;associationEnds&lt;/code&gt; of the &lt;code&gt;Association&lt;/code&gt;, which are the &lt;code&gt;relatedElements&lt;/code&gt; of the &lt;code&gt;Association&lt;/code&gt; considered as a &lt;code&gt;Relationship&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Associations-Association-relatedType"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-relatedElement"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Kernel-Associations-Association-relatedType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Associations-Association-sourceType" xmi:type="uml:Property" isDerived="true" name="sourceType">
            <association xmi:idref="Kernel-Associations-A_sourceType_sourceAssociation"/>
            <lowerValue xmi:id="Kernel-Associations-Association-sourceType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Associations-Association-sourceType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The source &lt;code&gt;relatedType&lt;/code&gt; for this &lt;code&gt;Association&lt;/code&gt;. It is the first &lt;code&gt;relatedType&lt;/code&gt; of the &lt;code&gt;Association&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Kernel-Associations-Association-sourceType"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Kernel-Associations-Association-relatedType"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Kernel-Associations-Association-sourceType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Associations-Association-targetType" xmi:type="uml:Property" isDerived="true" name="targetType">
            <association xmi:idref="Kernel-Associations-A_targetType_targetAssociation"/>
            <lowerValue xmi:id="Kernel-Associations-Association-targetType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Associations-Association-targetType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The target &lt;code&gt;relatedTypes&lt;/code&gt; for this &lt;code&gt;Association&lt;/code&gt;. This includes all the &lt;code&gt;relatedTypes&lt;/code&gt; other than the &lt;code&gt;sourceType&lt;/code&gt;.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Kernel-Associations-Association-targetType"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <subsettedProperty xmi:idref="Kernel-Associations-Association-relatedType"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Kernel-Associations-Association-targetType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Kernel-Associations-Association-associationEnd" xmi:type="uml:Property" isDerived="true" name="associationEnd">
            <association xmi:idref="Kernel-Associations-A_associationEnd_associationWithEnd"/>
            <lowerValue xmi:id="Kernel-Associations-Association-associationEnd-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Kernel-Associations-Association-associationEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;features&lt;/code&gt; of the &lt;code&gt;Association&lt;/code&gt; that identify the things that can be related by it. A concrete &lt;code&gt;Association&lt;/code&gt; must have at least two &lt;code&gt;associationEnds&lt;/code&gt;. When it has exactly two, the &lt;code&gt;Association&lt;/code&gt; is called a &lt;em&gt;binary&lt;/em&gt; &lt;code&gt;Association&lt;/code&gt;.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Kernel-Associations-Association-associationEnd"/>
</ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Type-endFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Kernel-Associations-Association-associationEnd-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Kernel-Associations-Association-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Association&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; and a &lt;code&gt;Classifier&lt;/code&gt; to enable classification of links between things (in the universe). The co-domains (&lt;code&gt;types&lt;/code&gt;) of the &lt;code&gt;associationEnd&lt;/code&gt; &lt;code&gt;Features&lt;/code&gt; are the &lt;code&gt;relatedTypes&lt;/code&gt;, as co-domain and participants (linked things) of an &lt;code&gt;Association&lt;/code&gt; identify each other.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Kernel-Associations-Association"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Associations-Association-validateAssociationStructureIntersection" xmi:type="uml:Constraint" name="validateAssociationStructureIntersection">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <ownedComment xmi:id="Kernel-Associations-Association-validateAssociationStructureIntersection-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If an &lt;code&gt;Association&lt;/code&gt; is also a kind of &lt;code&gt;Structure&lt;/code&gt;, then it must be an &lt;code&gt;AssociationStructure&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-Association-validateAssociationStructureIntersection"/>
</ownedComment>
            <specification xmi:id="Kernel-Associations-Association-validateAssociationStructureIntersection-specification0" xmi:type="uml:OpaqueExpression" body="oclIsKindOf(Structure) = oclIsKindOf(AssociationStructure)" language="English" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-validateAssociationBinarySpecialization" xmi:type="uml:Constraint" name="validateAssociationBinarySpecialization">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <ownedComment xmi:id="Kernel-Associations-Association-validateAssociationBinarySpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If an &lt;code&gt;Association&lt;/code&gt; has more than two &lt;code&gt;associationEnds&lt;/code&gt;, then it must &lt;em&gt;not&lt;/em&gt; specialize, directly or indirectly, the &lt;code&gt;Association&lt;/code&gt; &lt;em&gt;&lt;code&gt;BinaryLink&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-Association-validateAssociationBinarySpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Associations-Association-validateAssociationBinarySpecialization-specification0" xmi:type="uml:OpaqueExpression" body="associationEnds-&gt;size() &gt; 2 implies not specializesFromLibrary('Links::BinaryLink')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-validateAssociationRelatedTypes" xmi:type="uml:Constraint" name="validateAssociationRelatedTypes">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <ownedComment xmi:id="Kernel-Associations-Association-validateAssociationRelatedTypes-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If an &lt;code&gt;Association&lt;/code&gt; is concrete (not abstract), then it must have at least two &lt;code&gt;relatedTypes&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-Association-validateAssociationRelatedTypes"/>
            </ownedComment>
            <specification xmi:id="Kernel-Associations-Association-validateAssociationRelatedTypes-specification0" xmi:type="uml:OpaqueExpression" body="not isAbstract implies relatedType-&gt;size() &gt;= 2" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-deriveAssociationTargetType" xmi:type="uml:Constraint" name="deriveAssociationTargetType">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <specification xmi:id="Kernel-Associations-Association-deriveAssociationTargetType-specification0" xmi:type="uml:OpaqueExpression" body="targetType =     if relatedType-&gt;size() &lt; 2 then OrderedSet{}     else          relatedType-&gt;             subSequence(2, relatedType-&gt;size())-&gt;             asOrderedSet()      endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-checkAssociationSpecialization" xmi:type="uml:Constraint" name="checkAssociationSpecialization">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <ownedComment xmi:id="Kernel-Associations-Association-checkAssociationSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Association&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Association&lt;/code&gt; &lt;code&gt;&lt;em&gt;Links::Link&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-Association-checkAssociationSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Associations-Association-checkAssociationSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Links::Link')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-deriveAssociationRelatedType" xmi:type="uml:Constraint" name="deriveAssociationRelatedType">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <ownedComment xmi:id="Kernel-Associations-Association-deriveAssociationRelatedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;relatedTypes&lt;/code&gt; of an &lt;code&gt;Association&lt;/code&gt; are the &lt;code&gt;types&lt;/code&gt; of its &lt;code&gt;associationEnds&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-Association-deriveAssociationRelatedType"/>
</ownedComment>
            <specification xmi:id="Kernel-Associations-Association-deriveAssociationRelatedType-specification0" xmi:type="uml:OpaqueExpression" body="relatedType = associationEnd.type" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-validateAssociationEndTypes" xmi:type="uml:Constraint" name="validateAssociationEndTypes">
            <ownedComment xmi:id="Kernel-Associations-Association-validateAssociationEndTypes-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedEndFeatures&lt;/code&gt; of an &lt;code&gt;Association&lt;/code&gt; must have exactly one &lt;code&gt;type&lt;/code&gt;&lt;/p&gt;.">
              <annotatedElement xmi:idref="Kernel-Associations-Association-validateAssociationEndTypes"/>
            </ownedComment>
            <specification xmi:id="Kernel-Associations-Association-validateAssociationEndTypes-specification0" xmi:type="uml:OpaqueExpression" body="ownedEndFeature-&gt;forAll(type-&gt;size() = 1)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-deriveAssociationSourceType" xmi:type="uml:Constraint" name="deriveAssociationSourceType">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <ownedComment xmi:id="Kernel-Associations-Association-deriveAssociationSourceType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;sourceType&lt;/code&gt; of an &lt;code&gt;Association&lt;/code&gt; is its first &lt;code&gt;relatedType&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-Association-deriveAssociationSourceType"/>
            </ownedComment>
            <specification xmi:id="Kernel-Associations-Association-deriveAssociationSourceType-specification0" xmi:type="uml:OpaqueExpression" body="sourceType = if relatedType-&gt;isEmpty() then null else relatedType-&gt;first() endif" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-Association-checkAssociationBinarySpecialization" xmi:type="uml:Constraint" name="checkAssociationBinarySpecialization">
            <constrainedElement xmi:idref="Kernel-Associations-Association"/>
            <ownedComment xmi:id="Kernel-Associations-Association-checkAssociationBinarySpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A binary &lt;code&gt;Association&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;Association&lt;/code&gt; &lt;code&gt;&lt;em&gt;Links::binaryLink&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-Association-checkAssociationBinarySpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Associations-Association-checkAssociationBinarySpecialization-specification0" xmi:type="uml:OpaqueExpression" body="associationEnd-&gt;size() = 2 implies specializesFromLibrary('Links::BinaryLink')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Associations-A_targetType_targetAssociation" xmi:type="uml:Association" name="A_targetType_targetAssociation">
          <memberEnd xmi:idref="Kernel-Associations-Association-targetType"/>
          <memberEnd xmi:idref="Kernel-Associations-A_targetType_targetAssociation-targetAssociation"/>
          <ownedEnd xmi:id="Kernel-Associations-A_targetType_targetAssociation-targetAssociation" xmi:type="uml:Property" isDerived="true" name="targetAssociation">
            <association xmi:idref="Kernel-Associations-A_targetType_targetAssociation"/>
            <lowerValue xmi:id="Kernel-Associations-A_targetType_targetAssociation-targetAssociation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Kernel-Associations-A_targetType_targetAssociation-targetAssociation"/>
            <subsettedProperty xmi:idref="Kernel-Associations-A_relatedType_association-association"/>
            <type xmi:idref="Kernel-Associations-Association"/>
            <upperValue xmi:id="Kernel-Associations-A_targetType_targetAssociation-targetAssociation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Associations-AssociationStructure" xmi:type="uml:Class" name="AssociationStructure">
          <generalization xmi:id="Kernel-Associations-AssociationStructure-_generalization.Kernel-Structures-Structure" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Structures-Structure"/>
          </generalization>
          <generalization xmi:id="Kernel-Associations-AssociationStructure-_generalization.Kernel-Associations-Association" xmi:type="uml:Generalization">
            <general xmi:idref="Kernel-Associations-Association"/>
          </generalization>
          <ownedComment xmi:id="Kernel-Associations-AssociationStructure-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;AssociationStructure&lt;/code&gt; is an &lt;code&gt;Association&lt;/code&gt; that is also a &lt;code&gt;Structure&lt;/code&gt;, classifying link objects that are both links and objects. As objects, link objects can be created and destroyed, and their non-end &lt;code&gt;Features&lt;/code&gt; can change over time. However, the values of the end &lt;code&gt;Features&lt;/code&gt; of a link object are fixed and cannot change over its lifetime.&lt;/p&gt;">
            <annotatedElement xmi:idref="Kernel-Associations-AssociationStructure"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-Associations-AssociationStructure-checkAssociationStructureSpecialization" xmi:type="uml:Constraint" name="checkAssociationStructureSpecialization">
            <constrainedElement xmi:idref="Kernel-Associations-AssociationStructure"/>
            <ownedComment xmi:id="Kernel-Associations-AssociationStructure-checkAssociationStructureSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;AssociationStructure&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;AssociationStructure&lt;/code&gt; &lt;code&gt;&lt;em&gt;Objects::LinkObject&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-AssociationStructure-checkAssociationStructureSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Associations-AssociationStructure-checkAssociationStructureSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Objects::LinkObject')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-Associations-AssociationStructure-checkAssociationStructureBinarySpecialization" xmi:type="uml:Constraint" name="checkAssociationStructureBinarySpecialization">
            <constrainedElement xmi:idref="Kernel-Associations-AssociationStructure"/>
            <ownedComment xmi:id="Kernel-Associations-AssociationStructure-checkAssociationStructureBinarySpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A binary &lt;code&gt;AssociationStructure&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;AssociationStructure&lt;/code&gt; &lt;code&gt;&lt;em&gt;Objects::BinaryLinkObject&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-Associations-AssociationStructure-checkAssociationStructureBinarySpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-Associations-AssociationStructure-checkAssociationStructureBinarySpecialization-specification0" xmi:type="uml:OpaqueExpression" body="endFeature-&gt;size() = 2 implies specializesFromLibrary('Objects::BinaryLinkObject')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Kernel-Associations-A_relatedType_association" xmi:type="uml:Association" name="A_relatedType_association">
          <memberEnd xmi:idref="Kernel-Associations-Association-relatedType"/>
          <memberEnd xmi:idref="Kernel-Associations-A_relatedType_association-association"/>
          <ownedEnd xmi:id="Kernel-Associations-A_relatedType_association-association" xmi:type="uml:Property" isDerived="true" name="association">
            <association xmi:idref="Kernel-Associations-A_relatedType_association"/>
            <lowerValue xmi:id="Kernel-Associations-A_relatedType_association-association-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Elements-A_relatedElement_relationship-relationship"/>
            <type xmi:idref="Kernel-Associations-Association"/>
            <upperValue xmi:id="Kernel-Associations-A_relatedType_association-association-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Kernel-DataTypes" xmi:type="uml:Package" URI="" name="DataTypes">
        <packagedElement xmi:id="Kernel-DataTypes-DataType" xmi:type="uml:Class" name="DataType">
          <generalization xmi:id="Kernel-DataTypes-DataType-_generalization.Core-Classifiers-Classifier" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Classifiers-Classifier"/>
          </generalization>
          <ownedComment xmi:id="Kernel-DataTypes-DataType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;DataType&lt;/code&gt; is a &lt;code&gt;Classifier&lt;/code&gt; of things (in the universe) that can only be distinguished by how they are related to other things (via Features). This means multiple things classified by the same &lt;code&gt;DataType&lt;/code&gt;&lt;/p&gt;  &lt;ul&gt;  &lt;li&gt;Cannot be distinguished when they are related to other things in exactly the same way, even when they are intended to be about different things.&lt;/li&gt;  &lt;li&gt;Can be distinguished when they are related to other things in different ways, even when they are intended to be about the same thing.&lt;/li&gt; &lt;/ul&gt; ">
            <annotatedElement xmi:idref="Kernel-DataTypes-DataType"/>
</ownedComment>
          <ownedRule xmi:id="Kernel-DataTypes-DataType-validateDataTypeSpecialization" xmi:type="uml:Constraint" name="validateDataTypeSpecialization">
            <constrainedElement xmi:idref="Kernel-DataTypes-DataType"/>
            <ownedComment xmi:id="Kernel-DataTypes-DataType-validateDataTypeSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;DataType&lt;/code&gt; must not specialize a &lt;code&gt;Class&lt;/code&gt; or an &lt;code&gt;Association&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-DataTypes-DataType-validateDataTypeSpecialization"/>
            </ownedComment>
            <specification xmi:id="Kernel-DataTypes-DataType-validateDataTypeSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedSpecialization.general-&gt; forAll(not oclIsKindOf(Class) and not oclIsKindOf(Association))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Kernel-DataTypes-DataType-checkDataTypeSpecialization" xmi:type="uml:Constraint" name="checkDataTypeSpecialization">
            <constrainedElement xmi:idref="Kernel-DataTypes-DataType"/>
            <ownedComment xmi:id="Kernel-DataTypes-DataType-checkDataTypeSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;DataType&lt;/code&gt; must directly or indirectly specialize the base &lt;code&gt;DataType&lt;/code&gt; &lt;code&gt;&lt;em&gt;Base::DataValue&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Kernel-DataTypes-DataType-checkDataTypeSpecialization"/>
</ownedComment>
            <specification xmi:id="Kernel-DataTypes-DataType-checkDataTypeSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Base::DataValue')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:id="Core" xmi:type="uml:Package" URI="" name="Core">
      <ownedComment xmi:id="Core-_comment.0" xmi:type="uml:Comment" body="The Core layer provides the semantic foundation for KerML.">
        <annotatedElement xmi:idref="Core"/>
      </ownedComment>
      <packageImport xmi:id="Core-_packageImport.Root" xmi:type="uml:PackageImport">
        <importedPackage xmi:idref="Root"/>
      </packageImport>
      <packagedElement xmi:id="Core-Types" xmi:type="uml:Package" URI="" name="Types">
        <packagedElement xmi:id="Core-Types-A_input_typeWithInput" xmi:type="uml:Association" name="A_input_typeWithInput">
          <memberEnd xmi:idref="Core-Types-Type-input"/>
          <memberEnd xmi:idref="Core-Types-A_input_typeWithInput-typeWithInput"/>
          <ownedEnd xmi:id="Core-Types-A_input_typeWithInput-typeWithInput" xmi:type="uml:Property" isDerived="true" name="typeWithInput">
            <association xmi:idref="Core-Types-A_input_typeWithInput"/>
            <lowerValue xmi:id="Core-Types-A_input_typeWithInput-typeWithInput-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_input_typeWithInput-typeWithInput-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A Type with a certain &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_input_typeWithInput-typeWithInput"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_input_typeWithInput-typeWithInput-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Disjoining" xmi:type="uml:Class" name="Disjoining">
          <generalization xmi:id="Core-Types-Disjoining-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-Disjoining-typeDisjoined" xmi:type="uml:Property" name="typeDisjoined">
            <association xmi:idref="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined"/>
            <lowerValue xmi:id="Core-Types-Disjoining-typeDisjoined-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Disjoining-typeDisjoined-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; asserted to be disjoint with the &lt;code&gt;disjoiningType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Disjoining-typeDisjoined"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Disjoining-typeDisjoined-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Disjoining-disjoiningType" xmi:type="uml:Property" name="disjoiningType">
            <association xmi:idref="Core-Types-A_disjoiningType_disjoinedTypeDisjoining"/>
            <lowerValue xmi:id="Core-Types-Disjoining-disjoiningType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Disjoining-disjoiningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; asserted to be disjoint with the &lt;code&gt;typeDisjoined&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Disjoining-disjoiningType"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Disjoining-disjoiningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Disjoining-owningType" xmi:type="uml:Property" isDerived="true" name="owningType">
            <association xmi:idref="Core-Types-A_ownedDisjoining_owningType"/>
            <lowerValue xmi:id="Core-Types-Disjoining-owningType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Disjoining-owningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;typeDisjoined&lt;/code&gt; that is also an &lt;code&gt;owningRelatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Disjoining-owningType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <subsettedProperty xmi:idref="Core-Types-Disjoining-typeDisjoined"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Disjoining-owningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-Disjoining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Disjoining&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; between &lt;code&gt;Types&lt;/code&gt; asserted to have interpretations that are not shared (disjoint) between them, identified as &lt;code&gt;typeDisjoined&lt;/code&gt; and &lt;code&gt;disjoiningType&lt;/code&gt;. For example, a &lt;code&gt;Classifier&lt;/code&gt; for mammals is disjoint from a &lt;code&gt;Classifier&lt;/code&gt; for minerals, and a &lt;code&gt;Feature&lt;/code&gt; for people&amp;#39;s parents is disjoint from a &lt;code&gt;Feature&lt;/code&gt; for their children.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Disjoining"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_directedFeature_typeWithDirectedFeature" xmi:type="uml:Association" name="A_directedFeature_typeWithDirectedFeature">
          <memberEnd xmi:idref="Core-Types-Type-directedFeature"/>
          <memberEnd xmi:idref="Core-Types-A_directedFeature_typeWithDirectedFeature-typeWithDirectedFeature"/>
          <ownedEnd xmi:id="Core-Types-A_directedFeature_typeWithDirectedFeature-typeWithDirectedFeature" xmi:type="uml:Property" isDerived="true" name="typeWithDirectedFeature">
            <association xmi:idref="Core-Types-A_directedFeature_typeWithDirectedFeature"/>
            <lowerValue xmi:id="Core-Types-A_directedFeature_typeWithDirectedFeature-typeWithDirectedFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_directedFeature_typeWithDirectedFeature-typeWithDirectedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Type" xmi:type="uml:Class" name="Type">
          <generalization xmi:id="Core-Types-Type-_generalization.Root-Namespaces-Namespace" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-Namespace"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-Type-ownedSpecialization" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedSpecialization">
            <association xmi:idref="Core-Types-A_ownedSpecialization_owningType"/>
            <lowerValue xmi:id="Core-Types-Type-ownedSpecialization-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;Specializations&lt;/code&gt;, for which the &lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;specific&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedSpecialization"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <subsettedProperty xmi:idref="Core-Types-A_specific_specialization-specialization"/>
            <type xmi:idref="Core-Types-Specialization"/>
            <upperValue xmi:id="Core-Types-Type-ownedSpecialization-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedFeatureMembership" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedFeatureMembership">
            <association xmi:idref="Core-Types-A_ownedFeatureMembership_owningType"/>
            <lowerValue xmi:id="Core-Types-Type-ownedFeatureMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedFeatureMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;FeatureMemberships&lt;/code&gt;, for which the &lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;owningType&lt;/code&gt;. Each such &lt;code&gt;FeatureMembership&lt;/code&gt; identifies an &lt;code&gt;ownedFeature&lt;/code&gt; of the &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedFeatureMembership"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-ownedMembership"/>
            <subsettedProperty xmi:idref="Core-Types-Type-featureMembership"/>
            <type xmi:idref="Core-Types-FeatureMembership"/>
            <upperValue xmi:id="Core-Types-Type-ownedFeatureMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-feature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="feature">
            <association xmi:idref="Core-Types-A_typeWithFeature_feature"/>
            <lowerValue xmi:id="Core-Types-Type-feature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberFeatures&lt;/code&gt; of the &lt;code&gt;featureMemberships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-feature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-member"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-feature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedFeature">
            <association xmi:idref="Core-Types-A_ownedFeature_owningType"/>
            <lowerValue xmi:id="Core-Types-Type-ownedFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberFeatures&lt;/code&gt; of the &lt;code&gt;ownedFeatureMemberships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-ownedMember"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-ownedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-input" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="input">
            <association xmi:idref="Core-Types-A_input_typeWithInput"/>
            <lowerValue xmi:id="Core-Types-Type-input-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-input-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;features&lt;/code&gt; related to this &lt;code&gt;Type&lt;/code&gt; by &lt;code&gt;FeatureMemberships&lt;/code&gt; that have &lt;code&gt;direction&lt;/code&gt; &lt;code&gt;in&lt;/code&gt; or &lt;code&gt;inout&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-input"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-directedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-input-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-output" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="output">
            <association xmi:idref="Core-Types-A_output_typeWithOutput"/>
            <lowerValue xmi:id="Core-Types-Type-output-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-output-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;features&lt;/code&gt; related to this &lt;code&gt;Type&lt;/code&gt; by &lt;code&gt;FeatureMemberships&lt;/code&gt; that have &lt;code&gt;direction&lt;/code&gt; &lt;code&gt;out&lt;/code&gt; or &lt;code&gt;inout&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-output"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-directedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-output-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-isAbstract" xmi:type="uml:Property" name="isAbstract">
            <defaultValue xmi:id="Core-Types-Type-isAbstract-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Types-Type-isAbstract-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Indicates whether instances of this &lt;code&gt;Type&lt;/code&gt; must also be instances of at least one of its specialized &lt;code&gt;Types&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-isAbstract"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-inheritedMembership" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="inheritedMembership">
            <association xmi:idref="Core-Types-A_inheritedMembership_inheritingType"/>
            <lowerValue xmi:id="Core-Types-Type-inheritedMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-inheritedMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;Memberships&lt;/code&gt; inherited by this &lt;code&gt;Type&lt;/code&gt; via &lt;code&gt;Specialization&lt;/code&gt; or &lt;code&gt;Conjugation&lt;/code&gt;. These are included in the derived union for the &lt;code&gt;memberships&lt;/code&gt; of the &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-inheritedMembership"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-membership"/>
            <type xmi:idref="Root-Namespaces-Membership"/>
            <upperValue xmi:id="Core-Types-Type-inheritedMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-endFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="endFeature">
            <association xmi:idref="Core-Types-A_endFeature_typeWithEndFeature"/>
            <lowerValue xmi:id="Core-Types-Type-endFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-endFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;features&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; with &lt;code&gt;isEnd = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-endFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-feature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-endFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedEndFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedEndFeature">
            <association xmi:idref="Core-Types-A_ownedEndFeature_endOwningType"/>
            <lowerValue xmi:id="Core-Types-Type-ownedEndFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedEndFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;endFeatures&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;ownedFeatures&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedEndFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-endFeature"/>
            <subsettedProperty xmi:idref="Core-Types-Type-ownedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-ownedEndFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-isSufficient" xmi:type="uml:Property" name="isSufficient">
            <defaultValue xmi:id="Core-Types-Type-isSufficient-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Types-Type-isSufficient-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether all things that meet the classification conditions of this &lt;code&gt;Type&lt;/code&gt; must be classified by the &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;(A &lt;code&gt;Type&lt;/code&gt;&amp;nbsp;gives conditions that must be met by whatever it classifies, but when &lt;code&gt;isSufficient&lt;/code&gt; is false, things may meet those conditions but still not be classified by the &lt;code&gt;Type&lt;/code&gt;. For example, a Type &lt;code&gt;&lt;em&gt;Car&lt;/em&gt;&lt;/code&gt; that is not sufficient could require everything it classifies to have four wheels, but not all four wheeled things would classify as cars. However, if the &lt;code&gt;Type&lt;/code&gt; &lt;code&gt;&lt;em&gt;Car&lt;/em&gt;&lt;/code&gt; were sufficient, it would classify all four-wheeled things.)&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-isSufficient"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedConjugator" xmi:type="uml:Property" isDerived="true" name="ownedConjugator">
            <association xmi:idref="Core-Types-A_ownedConjugator_owningType"/>
            <lowerValue xmi:id="Core-Types-Type-ownedConjugator-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedConjugator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Conjugation&lt;/code&gt; owned by this &lt;code&gt;Type&lt;/code&gt; for which the &lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;originalType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedConjugator"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_conjugatedType_conjugator-conjugator"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <type xmi:idref="Core-Types-Conjugation"/>
            <upperValue xmi:id="Core-Types-Type-ownedConjugator-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-isConjugated" xmi:type="uml:Property" isDerived="true" name="isConjugated">
            <ownedComment xmi:id="Core-Types-Type-isConjugated-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Indicates whether this &lt;code&gt;Type&lt;/code&gt; has an &lt;code&gt;ownedConjugator&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-isConjugated"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-inheritedFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="inheritedFeature">
            <association xmi:idref="Core-Types-A_inheritedFeature_inheritingType"/>
            <lowerValue xmi:id="Core-Types-Type-inheritedFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-inheritedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All the &lt;code&gt;memberFeatures&lt;/code&gt; of the &lt;code&gt;inheritedMemberships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;FeatureMemberships&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-inheritedFeature"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-feature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-inheritedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-multiplicity" xmi:type="uml:Property" isDerived="true" name="multiplicity">
            <association xmi:idref="Core-Features-A_multiplicity_typeWithMultiplicity"/>
            <lowerValue xmi:id="Core-Types-Type-multiplicity-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-multiplicity-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;ownedMember&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that is a &lt;code&gt;Multiplicity&lt;/code&gt;, which constraints the cardinality of the &lt;code&gt;Type&lt;/code&gt;. If there is no such &lt;code&gt;ownedMember&lt;/code&gt;, then the cardinality of this &lt;code&gt;Type&lt;/code&gt; is constrained by all the &lt;code&gt;Multiplicity&lt;/code&gt; constraints applicable to any direct supertypes.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-multiplicity"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-ownedMember"/>
            <type xmi:idref="Core-Types-Multiplicity"/>
            <upperValue xmi:id="Core-Types-Type-multiplicity-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-unioningType" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="unioningType">
            <association xmi:idref="Core-Types-A_unioningType_unionedType"/>
            <lowerValue xmi:id="Core-Types-Type-unioningType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-unioningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The interpretations of a &lt;code&gt;Type&lt;/code&gt; with &lt;code&gt;unioningTypes&lt;/code&gt; are asserted to be the same as those of all the &lt;code&gt;unioningTypes&lt;/code&gt; together, which are the &lt;code&gt;Types&lt;/code&gt; derived from the &lt;code&gt;unioningType&lt;/code&gt; of the &lt;code&gt;ownedUnionings&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;. For example, a &lt;code&gt;Classifier&lt;/code&gt; for people might be the union of &lt;code&gt;Classifiers&lt;/code&gt; for all the sexes. Similarly, a feature for people&amp;#39;s children might be the union of features dividing them in the same ways as people in general.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-unioningType"/>
</ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Type-unioningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedIntersecting" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedIntersecting">
            <association xmi:idref="Core-Types-A_ownedIntersecting_typeIntersected"/>
            <lowerValue xmi:id="Core-Types-Type-ownedIntersecting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedIntersecting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;Intersectings&lt;/code&gt;, have the &lt;code&gt;Type&lt;/code&gt; as their &lt;code&gt;typeIntersected&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedIntersecting"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <type xmi:idref="Core-Types-Intersecting"/>
            <upperValue xmi:id="Core-Types-Type-ownedIntersecting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-intersectingType" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="intersectingType">
            <association xmi:idref="Core-Types-A_intersectingType_intersectedType"/>
            <lowerValue xmi:id="Core-Types-Type-intersectingType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-intersectingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The interpretations of a &lt;code&gt;Type&lt;/code&gt; with &lt;code&gt;intersectingTypes&lt;/code&gt; are asserted to be those in common among the &lt;code&gt;intersectingTypes&lt;/code&gt;, which are the &lt;code&gt;Types&lt;/code&gt; derived from the &lt;code&gt;intersectingType&lt;/code&gt; of the &lt;code&gt;ownedIntersectings&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;. For example, a &lt;code&gt;Classifier&lt;/code&gt; might be an intersection of &lt;code&gt;Classifiers&lt;/code&gt; for people of a particular sex and of a particular nationality. Similarly, a feature for people&amp;#39;s children of a particular sex might be the intersection of a &lt;code&gt;Feature&lt;/code&gt; for their children and a &lt;code&gt;Classifier&lt;/code&gt; for people of that sex (because the interpretations of the children &lt;code&gt;Feature&lt;/code&gt; that identify those of that sex are also interpretations of the Classifier for that sex).&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-intersectingType"/>
</ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Type-intersectingType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedUnioning" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedUnioning">
            <association xmi:idref="Core-Types-A_typeUnioned_ownedUnioning"/>
            <lowerValue xmi:id="Core-Types-Type-ownedUnioning-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedUnioning-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;Unionings&lt;/code&gt;, having the &lt;code&gt;Type&lt;/code&gt; as their &lt;code&gt;typeUnioned&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedUnioning"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Core-Types-Unioning"/>
            <upperValue xmi:id="Core-Types-Type-ownedUnioning-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedDisjoining" xmi:type="uml:Property" isDerived="true" name="ownedDisjoining">
            <association xmi:idref="Core-Types-A_ownedDisjoining_owningType"/>
            <lowerValue xmi:id="Core-Types-Type-ownedDisjoining-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedDisjoining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;Disjoinings&lt;/code&gt;, for which the &lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;typeDisjoined&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedDisjoining"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <subsettedProperty xmi:idref="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined-disjoiningTypeDisjoining"/>
            <type xmi:idref="Core-Types-Disjoining"/>
            <upperValue xmi:id="Core-Types-Type-ownedDisjoining-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-featureMembership" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="featureMembership">
            <association xmi:idref="Core-Types-A_featureMembership_type"/>
            <lowerValue xmi:id="Core-Types-Type-featureMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-featureMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;FeatureMemberships&lt;/code&gt; for &lt;code&gt;features&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;, which include all &lt;code&gt;ownedFeatureMemberships&lt;/code&gt; and those &lt;code&gt;inheritedMemberships&lt;/code&gt; that are &lt;code&gt;FeatureMemberships&lt;/code&gt; (but does &lt;em&gt;not&lt;/em&gt; include any &lt;code&gt;importedMemberships&lt;/code&gt;).&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-featureMembership"/>
</ownedComment>
            <type xmi:idref="Core-Types-FeatureMembership"/>
            <upperValue xmi:id="Core-Types-Type-featureMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-differencingType" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="differencingType">
            <association xmi:idref="Core-Types-A_differencingType_differencedType"/>
            <lowerValue xmi:id="Core-Types-Type-differencingType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-differencingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The interpretations of a &lt;code&gt;Type&lt;/code&gt; with &lt;code&gt;differencingTypes&lt;/code&gt; are asserted to be those of the first of those &lt;code&gt;Types&lt;/code&gt;, but not including those of the remaining &lt;code&gt;Types&lt;/code&gt;. For example, a &lt;code&gt;Classifier&lt;/code&gt; might be the difference of a &lt;code&gt;Classifier&lt;/code&gt; for people and another for people of a particular nationality, leaving people who are not of that nationality. Similarly, a feature of people might be the difference between a feature for their children and a &lt;code&gt;Classifier&lt;/code&gt; for people of a particular sex, identifying their children not of that sex (because the interpretations of the children &lt;code&gt;Feature&lt;/code&gt; that identify those of that sex are also interpretations of the &lt;code&gt;Classifier&lt;/code&gt; for that sex).&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-differencingType"/>
</ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Type-differencingType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-ownedDifferencing" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedDifferencing">
            <association xmi:idref="Core-Types-A_typeDifferenced_ownedDifferencing"/>
            <lowerValue xmi:id="Core-Types-Type-ownedDifferencing-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-ownedDifferencing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that are &lt;code&gt;Differencings&lt;/code&gt;, having this &lt;code&gt;Type&lt;/code&gt; as their &lt;code&gt;typeDifferenced&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-ownedDifferencing"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <type xmi:idref="Core-Types-Differencing"/>
            <upperValue xmi:id="Core-Types-Type-ownedDifferencing-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Type-directedFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="directedFeature">
            <association xmi:idref="Core-Types-A_directedFeature_typeWithDirectedFeature"/>
            <lowerValue xmi:id="Core-Types-Type-directedFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Type-directedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;features&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; that have a non-null &lt;code&gt;direction&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-directedFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-feature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-Type-directedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; is a &lt;code&gt;Namespace&lt;/code&gt; that is the most general kind of &lt;code&gt;Element&lt;/code&gt; supporting the semantics of classification. A &lt;code&gt;Type&lt;/code&gt; may be a &lt;code&gt;Classifier&lt;/code&gt; or a &lt;code&gt;Feature&lt;/code&gt;, defining conditions on what is classified by the &lt;code&gt;Type&lt;/code&gt; (see also the description of &lt;code&gt;isSufficient&lt;/code&gt;).&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Type"/>
</ownedComment>
          <ownedOperation xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean" xmi:type="uml:Operation" name="visibleMemberships">
            <bodyCondition xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let visibleMemberships : OrderedSet(Membership) =     self.oclAsType(Namespace).         visibleMemberships(excluded, isRecursive, includeAll) in let visibleInheritedMemberships : OrderedSet(Membership) =      inheritedMemberships(excluded-&gt;including(self), Set{}, isRecursive)-&gt;         select(includeAll or visibility = VisibilityKind::public) in visibleMemberships-&gt;union(visibleInheritedMemberships)" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The visible &lt;code&gt;Memberships&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; include &lt;code&gt;inheritedMemberships&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean"/>
            </ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-isRecursive" xmi:type="uml:Parameter" name="isRecursive">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-includeAll" xmi:type="uml:Parameter" name="includeAll">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-visibleMemberships_Namespace_Boolean_Boolean-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean" xmi:type="uml:Operation" name="inheritedMemberships">
            <bodyCondition xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="removeRedefinedFeatures( inheritableMemberships(excludedNamespaces, excludedTypes, excludeImplied))" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the &lt;code&gt;Memberships&lt;/code&gt; inheritable from supertypes of this &lt;code&gt;Type&lt;/code&gt; with redefined &lt;code&gt;Features&lt;/code&gt; removed. When computing inheritable &lt;code&gt;Memberships&lt;/code&gt;, exclude &lt;code&gt;Imports&lt;/code&gt; of &lt;code&gt;excludedNamespaces&lt;/code&gt;, &lt;code&gt;Specializations&lt;/code&gt; of &lt;code&gt;excludedTypes&lt;/code&gt;, and, if &lt;code&gt;excludeImplied = true&lt;/code&gt;, all implied &lt;code&gt;Specializations&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-excludedNamespaces" xmi:type="uml:Parameter" name="excludedNamespaces">
              <lowerValue xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-excludedNamespaces-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-excludedNamespaces-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-excludedTypes" xmi:type="uml:Parameter" name="excludedTypes">
              <lowerValue xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-excludedTypes-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-excludedTypes-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-excludeImplied" xmi:type="uml:Parameter" name="excludeImplied">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-inheritedMemberships_Namespace_Type_Boolean-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean" xmi:type="uml:Operation" name="inheritableMemberships">
            <bodyCondition xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let excludingSelf : Set(Type) = excludedType-&gt;including(self) in supertypes(excludeImplied)-&gt;reject(t | excludingSelf-&gt;includes(t)).     nonPrivateMemberships(excludedNamespaces, excludingSelf, excludeImplied) " language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return all the non-&lt;code&gt;private&lt;/code&gt; &lt;code&gt;Memberships&lt;/code&gt; of all the supertypes of this &lt;code&gt;Type&lt;/code&gt;, excluding any supertypes that are this &lt;code&gt;Type&lt;/code&gt; or are in the given set of &lt;code&gt;excludedTypes&lt;/code&gt;. If &lt;code&gt;excludeImplied = true&lt;/code&gt;, then also transitively exclude any supertypes from implied &lt;code&gt;Specializations&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-excludedNamespaces" xmi:type="uml:Parameter" name="excludedNamespaces">
              <lowerValue xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-excludedNamespaces-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-excludedNamespaces-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-excludedTypes" xmi:type="uml:Parameter" name="excludedTypes">
              <lowerValue xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-excludedTypes-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-excludedTypes-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-excludeImplied" xmi:type="uml:Parameter" name="excludeImplied">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-inheritableMemberships_Namespace_Type_Boolean-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean" xmi:type="uml:Operation" name="nonPrivateMemberships">
            <bodyCondition xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let publicMemberships : OrderedSet(Membership) =      membershipsOfVisibility(VisibilityKind::public, excludedNamespaces) in let protectedMemberships : OrderedSet(Membership) =      membershipsOfVisibility(VisibilityKind::protected, excludedNamespaces) in let inheritedMemberships : OrderedSet(Membership) =     inheritedMemberships(excludedNamespaces, excludedTypes, excludeImplied) in publicMemberships-&gt;     union(protectedMemberships)-&gt;     union(inheritedMemberships)" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and inherited &lt;code&gt;Memberships&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;. When computing imported &lt;code&gt;Memberships&lt;/code&gt;, exclude the given set of &lt;code&gt;excludedNamespaces&lt;/code&gt;. When computing inherited &lt;code&gt;Memberships&lt;/code&gt;, exclude &lt;code&gt;Types&lt;/code&gt; in the given set of &lt;code&gt;excludedTypes&lt;/code&gt;. If &lt;code&gt;excludeImplied = true&lt;/code&gt;, then also exclude any supertypes from implied &lt;code&gt;Specializations&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-excludedNamespaces" xmi:type="uml:Parameter" name="excludedNamespaces">
              <lowerValue xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-excludedNamespaces-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-excludedNamespaces-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-excludedTypes" xmi:type="uml:Parameter" name="excludedTypes">
              <lowerValue xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-excludedTypes-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-excludedTypes-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-excludeImplied" xmi:type="uml:Parameter" name="excludeImplied">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-nonPrivateMemberships_Namespace_Type_Boolean-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership" xmi:type="uml:Operation" name="removeRedefinedFeatures">
            <bodyCondition xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let reducedMemberships : Sequence(Membership) =     memberships-&gt;reject(mem1 |         memberships-&gt;excluding(mem1)-&gt;             exists(mem2 | allRedefinedFeaturesOf(mem2)-&gt;                 includes(mem1.memberElement))) in let redefinedFeatures : Set(Feature) =      ownedFeature.redefinition.redefinedFeature-&gt;asSet() in reducedMemberships-&gt;reject(mem | allRedefinedFeaturesOf(mem)-&gt;     exists(feature | redefinedFeatures-&gt;includes(feature)))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return a subset of &lt;code&gt;memberships&lt;/code&gt;, removing those &lt;code&gt;Memberships&lt;/code&gt; whose &lt;code&gt;memberElements&lt;/code&gt; are &lt;code&gt;Features&lt;/code&gt; and for which either of the following two conditions holds:&lt;/p&gt;  &lt;ol&gt;  &lt;li&gt;The &lt;code&gt;memberElement&lt;/code&gt; of the &lt;code&gt;Membership&lt;/code&gt; is included in redefined &lt;code&gt;Features&lt;/code&gt; of another &lt;code&gt;Membership&lt;/code&gt; in &lt;code&gt;memberships&lt;/code&gt;.&lt;/li&gt;  &lt;li&gt;One of the redefined &lt;code&gt;Features&lt;/code&gt; of the &lt;code&gt;Membership&lt;/code&gt; is a directly &lt;code&gt;redefinedFeature&lt;/code&gt; of an &lt;code&gt;ownedFeature&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;For this purpose, the redefined &lt;code&gt;Features&lt;/code&gt; of a &lt;code&gt;Membership&lt;/code&gt; whose &lt;code&gt;memberElement&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt; includes the &lt;code&gt;memberElement&lt;/code&gt; and all &lt;code&gt;Features&lt;/code&gt; directly or indirectly redefined by the &lt;code&gt;memberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-removeRedefinedFeatures_Membership"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership-memberships" xmi:type="uml:Parameter" isOrdered="true" name="memberships">
              <lowerValue xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership-memberships-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership-memberships-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Core-Types-Type-removeRedefinedFeatures_Membership--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-removeRedefinedFeatures_Membership-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership" xmi:type="uml:Operation" name="allRedefinedFeaturesOf">
            <bodyCondition xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if not membership.memberElement.oclIsType(Feature) then Set{}  else membership.memberElement.oclAsType(Feature).allRedefinedFeatures() endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;memberElement&lt;/code&gt; of the given &lt;code&gt;membership&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt;, then return all &lt;code&gt;Features&lt;/code&gt; directly or indirectly redefined by the &lt;code&gt;memberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-allRedefinedFeaturesOf_Membership"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership-membership" xmi:type="uml:Parameter" name="membership">
              <type xmi:idref="Root-Namespaces-Membership"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Core-Types-Type-allRedefinedFeaturesOf_Membership--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-allRedefinedFeaturesOf_Membership-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-directionOf_Feature" xmi:type="uml:Operation" name="directionOf">
            <bodyCondition xmi:id="Core-Types-Type-directionOf_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-directionOf_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="directionOfExcluding(f, Set{})" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-directionOf_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the given &lt;code&gt;feature&lt;/code&gt; is a &lt;code&gt;feature&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt;, then return its direction relative to this &lt;code&gt;Type&lt;/code&gt;, taking conjugation into account.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-directionOf_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-directionOf_Feature-feature" xmi:type="uml:Parameter" name="feature">
              <type xmi:idref="Core-Features-Feature"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-directionOf_Feature-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Types-Type-directionOf_Feature--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-FeatureDirectionKind"/>
              <upperValue xmi:id="Core-Types-Type-directionOf_Feature--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-directionOf_Feature-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type" xmi:type="uml:Operation" name="directionOfExcluding">
            <bodyCondition xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let excludedSelf : Set(Type) = excluded-&gt;including(self) in  if feature.owningType = self then feature.direction else     let directions : Sequence(FeatureDirectionKind) =         supertypes(false)-&gt;excluding(excludedSelf).         directionOfExcluding(feature, excludedSelf)-&gt;         select(d | d &lt;&gt; null) in     if directions-&gt;isEmpty() then null  else     let direction : FeatureDirectionKind = directions-&gt;first() in     if not isConjugated then direction     else if direction = FeatureDirectionKind::_'in' then FeatureDirectionKind::out     else if direction = FeatureDirectionKind::out then FeatureDirectionKind::_'in'     else direction     endif endif endif   endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the direction of the given &lt;code&gt;feature&lt;/code&gt; relative to this &lt;code&gt;Type&lt;/code&gt;, excluding a given set of &lt;code&gt;Types&lt;/code&gt; from the search of supertypes of this &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-directionOfExcluding_Feature_Type"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-feature" xmi:type="uml:Parameter" name="feature">
              <type xmi:idref="Core-Features-Feature"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-FeatureDirectionKind"/>
              <upperValue xmi:id="Core-Types-Type-directionOfExcluding_Feature_Type--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-directionOfExcluding_Feature_Type-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-supertypes_Boolean" xmi:type="uml:Operation" name="supertypes">
            <bodyCondition xmi:id="Core-Types-Type-supertypes_Boolean-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-supertypes_Boolean-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if isConjugated then Sequence{conjugator.originalType} else if not excludeImplied then ownedSpecialization.general else ownedSpecialization-&gt;reject(isImplied).general endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-supertypes_Boolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Type&lt;/code&gt; is conjugated, then return just the &lt;code&gt;originalType&lt;/code&gt; of the &lt;code&gt;Conjugation&lt;/code&gt;. Otherwise, return the &lt;code&gt;general&lt;/code&gt; &lt;code&gt;Types&lt;/code&gt; from all &lt;code&gt;ownedSpecializations&lt;/code&gt; of this type, if &lt;code&gt;excludeImplied = false&lt;/code&gt;, or all non-implied &lt;code&gt;ownedSpecializations&lt;/code&gt;, if &lt;code&gt;excludeImplied = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-supertypes_Boolean"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-supertypes_Boolean-excludeImplied" xmi:type="uml:Parameter" name="excludeImplied">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-supertypes_Boolean-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Core-Types-Type-supertypes_Boolean--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Types-Type-supertypes_Boolean--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-supertypes_Boolean-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-allSupertypes_" xmi:type="uml:Operation" name="allSupertypes">
            <bodyCondition xmi:id="Core-Types-Type-allSupertypes_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-allSupertypes_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="OrderedSet{self}-&gt;closure(supertypes(false))" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-allSupertypes_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return this &lt;code&gt;Type&lt;/code&gt; and all &lt;code&gt;Types&lt;/code&gt; that are directly or transitively supertypes of this &lt;code&gt;Type&lt;/code&gt; (as determined by the &lt;code&gt;supertypes&lt;/code&gt; operation with &lt;code&gt;excludeImplied = false&lt;/code&gt;).&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-allSupertypes_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-allSupertypes_-result" xmi:type="uml:Parameter" name="result">
              <lowerValue xmi:id="Core-Types-Type-allSupertypes_-result-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Types-Type-allSupertypes_-result-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-allSupertypes_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-specializes_Type" xmi:type="uml:Operation" name="specializes">
            <bodyCondition xmi:id="Core-Types-Type-specializes_Type-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-specializes_Type-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if isConjugated then ownedConjugator.originalType.specializes(supertype) else allSupertypes()-&gt;includes(supertype) endif" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-specializes_Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check whether this &lt;code&gt;Type&lt;/code&gt; is a direct or indirect specialization of the given &lt;code&gt;supertype&lt;code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-specializes_Type"/>
            </ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-specializes_Type-supertype" xmi:type="uml:Parameter" name="supertype">
              <type xmi:idref="Core-Types-Type"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-specializes_Type-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-specializes_Type-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-specializesFromLibrary_String" xmi:type="uml:Operation" name="specializesFromLibrary">
            <bodyCondition xmi:id="Core-Types-Type-specializesFromLibrary_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-specializesFromLibrary_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let mem : Membership = resolveGlobal(libraryTypeName) in mem &lt;&gt; null and mem.memberElement.oclIsKindOf(Type) and specializes(mem.memberElement.oclAsType(Type))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-specializesFromLibrary_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check whether this &lt;code&gt;Type&lt;/code&gt; is a direct or indirect specialization of the named library &lt;code&gt;Type&lt;/code&gt;. &lt;code&gt;libraryTypeName&lt;/code&gt; must conform to the syntax of a KerML qualified name and must resolve to a &lt;code&gt;Type&lt;/code&gt; in global scope.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Type-specializesFromLibrary_String"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-specializesFromLibrary_String-libraryTypeName" xmi:type="uml:Parameter" name="libraryTypeName">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Types-Type-specializesFromLibrary_String-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-specializesFromLibrary_String-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-isCompatibleWith_Type" xmi:type="uml:Operation" name="isCompatibleWith">
            <bodyCondition xmi:id="Core-Types-Type-isCompatibleWith_Type-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-isCompatibleWith_Type-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="specializes(otherType)" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-isCompatibleWith_Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;By default, this &lt;code&gt;Type&lt;/code&gt; is compatible with an &lt;code&gt;otherType&lt;/code&gt; if it directly or indirectly specializes the &lt;code&gt;otherType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-isCompatibleWith_Type"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-isCompatibleWith_Type-otherType" xmi:type="uml:Parameter" name="otherType">
              <type xmi:idref="Core-Types-Type"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-isCompatibleWith_Type-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Types-Type-multiplicities_" xmi:type="uml:Operation" name="multiplicities">
            <bodyCondition xmi:id="Core-Types-Type-multiplicities_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Types-Type-multiplicities_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if multiplicity &lt;&gt; null then OrderedSet{multiplicity} else      ownedSpecialization.general-&gt;closure(t |         if t.multiplicity &lt;&gt; null then OrderedSet{}         else ownedSpecialization.general     )-&gt;select(multiplicity &lt;&gt; null).multiplicity-&gt;asOrderedSet() endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Types-Type-multiplicities_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the owned or inherited &lt;code&gt;Multiplicities&lt;/code&gt; for this &lt;code&gt;Type&lt;./code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-multiplicities_"/>
            </ownedComment>
            <ownedParameter xmi:id="Core-Types-Type-multiplicities_-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Core-Types-Type-multiplicities_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Multiplicity"/>
              <upperValue xmi:id="Core-Types-Type-multiplicities_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Types-Type-multiplicities_-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedConjugator" xmi:type="uml:Constraint" name="deriveTypeOwnedConjugator">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedConjugator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedConjugator&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; is the its single &lt;code&gt;ownedRelationship&lt;/code&gt; that is a &lt;code&gt;Conjugation&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedConjugator"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedConjugator-specification0" xmi:type="uml:OpaqueExpression" body="ownedConjugator =     let ownedConjugators: Sequence(Conjugator) =          ownedRelationship-&gt;selectByKind(Conjugation) in     if ownedConjugators-&gt;isEmpty() then null      else ownedConjugators-&gt;at(1) endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeDifferencingTypesNotSelf" xmi:type="uml:Constraint" name="validateTypeDifferencingTypesNotSelf">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeDifferencingTypesNotSelf-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; cannot be one of its own &lt;code&gt;differencingTypes&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeDifferencingTypesNotSelf"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeDifferencingTypesNotSelf-specification0" xmi:type="uml:OpaqueExpression" body="differencingType-&gt;excludes(self)" language="English" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeUnioningType" xmi:type="uml:Constraint" name="deriveTypeUnioningType">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeUnioningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;unioningTypes&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;unioningTypes&lt;/code&gt; of its &lt;code&gt;ownedUnionings&lt;/code&gt;.&lt;p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeUnioningType"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeUnioningType-specification0" xmi:type="uml:OpaqueExpression" body="unioningType = ownedUnioning.unioningType" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeInheritedFeature" xmi:type="uml:Constraint" name="deriveTypeInheritedFeature">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeInheritedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;inheritedFeatures&lt;/code&gt; of this &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;memberFeatures&lt;/code&gt; of the &lt;code&gt;inheritedMemberships&lt;/code&gt; that are &lt;code&gt;FeatureMemberships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeInheritedFeature"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeInheritedFeature-specification0" xmi:type="uml:OpaqueExpression" body="inheritedFeature = inheritedMemberships-&gt; selectByKind(FeatureMembership).memberFeature" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeDifferencingType" xmi:type="uml:Constraint" name="deriveTypeDifferencingType">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeDifferencingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;differencingTypes&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;differencingTypes&lt;/code&gt; of its &lt;code&gt;ownedDifferencings&lt;/code&gt;, in the same order.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeDifferencingType"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeDifferencingType-specification0" xmi:type="uml:OpaqueExpression" body="differencingType = ownedDifferencing.differencingType" language="English" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeEndFeature" xmi:type="uml:Constraint" name="deriveTypeEndFeature">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeEndFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;endFeatures&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are all its &lt;code&gt;features&lt;/code&gt; for which &lt;code&gt;isEnd = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeEndFeature"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeEndFeature-specification0" xmi:type="uml:OpaqueExpression" body="endFeature = feature-&gt;select(isEnd)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedIntersecting" xmi:type="uml:Constraint" name="deriveTypeOwnedIntersecting">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedIntersecting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedIntersectings&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Intersectings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedIntersecting"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedIntersecting-specification0" xmi:type="uml:OpaqueExpression" body="ownedRelationship-&gt;selectByKind(Intersecting)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeInheritedMembership" xmi:type="uml:Constraint" name="deriveTypeInheritedMembership">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeInheritedMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;inheritedMemberships&lt;code&gt; of a &lt;code&gt;Type&lt;/code&gt; are determined by the &lt;code&gt;inheritedMemberships()&lt;/code&gt; operation.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeInheritedMembership"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeInheritedMembership-specification0" xmi:type="uml:OpaqueExpression" body="inheritedMembership = inheritedMemberships(Set{}, Set{}, false)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedDisjoining" xmi:type="uml:Constraint" name="deriveTypeOwnedDisjoining">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedDisjoining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedDisjoinings&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Disjoinings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedDisjoining"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedDisjoining-specification0" xmi:type="uml:OpaqueExpression" body="ownedDisjoining = ownedRelationship-&gt;selectByKind(Disjoining)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedDifferencing" xmi:type="uml:Constraint" name="deriveTypeOwnedDifferencing">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedDifferencing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedDifferencings&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are its &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Differencings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedDifferencing"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedDifferencing-specification0" xmi:type="uml:OpaqueExpression" body="ownedDifferencing = ownedRelationship-&gt;selectByKind(Differencing)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeOwnedMultiplicity" xmi:type="uml:Constraint" name="validateTypeOwnedMultiplicity">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeOwnedMultiplicity-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; may have at most one &lt;code&gt;ownedMember&lt;/code&gt; that is a &lt;code&gt;Multiplicity&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeOwnedMultiplicity"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeOwnedMultiplicity-specification0" xmi:type="uml:OpaqueExpression" body="ownedMember-&gt;selectByKind(Multiplicity)-&gt;size() &lt;= 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedFeatureMembership" xmi:type="uml:Constraint" name="deriveTypeOwnedFeatureMembership">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedFeatureMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedFeatureMemberships&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are its &lt;code&gt;ownedMemberships&lt;/code&gt; that are &lt;code&gt;FeatureMemberships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedFeatureMembership"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedFeatureMembership-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeatureMembership = ownedRelationship-&gt;selectByKind(FeatureMembership)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-checkTypeSpecialization" xmi:type="uml:Constraint" name="checkTypeSpecialization">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-checkTypeSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; must directly or indirectly specialize &lt;code&gt;&lt;em&gt;Base::Anything&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-checkTypeSpecialization"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-checkTypeSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Base::Anything')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeIntersectingType" xmi:type="uml:Constraint" name="deriveTypeIntersectingType">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeIntersectingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;intersectingTypes&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;intersectingTypes&lt;/code&gt; of its &lt;code&gt;ownedIntersectings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeIntersectingType"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeIntersectingType-specification0" xmi:type="uml:OpaqueExpression" body="intersectingType = ownedIntersecting.intersectingType" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeMultiplicity" xmi:type="uml:Constraint" name="deriveTypeMultiplicity">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeMultiplicity-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Type&lt;/code&gt; has an owned &lt;code&gt;Multiplicity&lt;/code&gt;, then that is its &lt;code&gt;multiplicity&lt;/code&gt;. Otherwise, if the &lt;code&gt;Type&lt;/code&gt; has an &lt;code&gt;ownedSpecialization&lt;/code&gt;, then its &lt;code&gt;multiplicity&lt;/code&gt; is the &lt;code&gt;multiplicity&lt;/code&gt; of the &lt;code&gt;general&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; of that &lt;code&gt;Specialization&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeMultiplicity"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeMultiplicity-specification0" xmi:type="uml:OpaqueExpression" body="multiplicity =      let ownedMultiplicities: Sequence(Multiplicity) =         ownedMember-&gt;selectByKind(Multiplicity) in     if ownedMultiplicities-&gt;isEmpty() then null     else ownedMultiplicities-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeInput" xmi:type="uml:Constraint" name="deriveTypeInput">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeInput-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;inputs&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are those of its features that have a direction of &lt;code&gt;in&lt;/code&gt; or &lt;code&gt;inout&lt;/code&gt; relative to the &lt;code&gt;Type&lt;/code&gt;, taking conjugation into account.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeInput"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeInput-specification0" xmi:type="uml:OpaqueExpression" body="input = feature-&gt;select(f |      let direction: FeatureDirectionKind = directionOf(f) in     direction = FeatureDirectionKind::_'in' or     direction = FeatureDirectionKind::inout)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeUnioningTypesNotSelf" xmi:type="uml:Constraint" name="validateTypeUnioningTypesNotSelf">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeUnioningTypesNotSelf-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; cannot be one of its own &lt;code&gt;unioningTypes&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeUnioningTypesNotSelf"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeUnioningTypesNotSelf-specification0" xmi:type="uml:OpaqueExpression" body="unioningType-&gt;excludes(self)" language="English" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeOwnedIntersectingNotOne" xmi:type="uml:Constraint" name="validateTypeOwnedIntersectingNotOne">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeOwnedIntersectingNotOne-_comment.0" xmi:type="uml:Comment" body="A &lt;code&gt;Type&lt;/code&gt; must not have exactly one &lt;code&gt;ownedIntersecting&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeOwnedIntersectingNotOne"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeOwnedIntersectingNotOne-specification0" xmi:type="uml:OpaqueExpression" body="ownedIntersecting-&gt;size() &lt;&gt; 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedSpecialization" xmi:type="uml:Constraint" name="deriveTypeOwnedSpecialization">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedSpecializations&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Specializations&lt;/code&gt; whose &lt;code&gt;special&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; is the owning &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedSpecialization = ownedRelationship-&gt;selectByKind(Specialization)-&gt; select(s | s.special = self) " language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOutput" xmi:type="uml:Constraint" name="deriveTypeOutput">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOutput-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;outputs&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are those of its &lt;code&gt;features&lt;/code&gt; that have a direction of &lt;ode&gt;out&lt;/code&gt; or &lt;code&gt;inout&lt;/code&gt; relative to the &lt;code&gt;Type&lt;/code&gt;, taking conjugation into account.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOutput"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOutput-specification0" xmi:type="uml:OpaqueExpression" body="output = feature-&gt;select(f |      let direction: FeatureDirectionKind = directionOf(f) in     direction = FeatureDirectionKind::out or     direction = FeatureDirectionKind::inout)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedEndFeature" xmi:type="uml:Constraint" name="deriveTypeOwnedEndFeature">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedEndFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedEndFeatures&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are all its &lt;code&gt;ownedFeatures&lt;/code&gt; for which &lt;code&gt;isEnd = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedEndFeature"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedEndFeature-specification0" xmi:type="uml:OpaqueExpression" body="ownedEndFeature = ownedFeature-&gt;select(isEnd)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeDirectedFeature" xmi:type="uml:Constraint" name="deriveTypeDirectedFeature">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeDirectedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;directedFeatures&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are those &lt;code&gt;features&lt;/code&gt; for which the &lt;code&gt;direction&lt;/code&gt; is non-null.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeDirectedFeature"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeDirectedFeature-specification0" xmi:type="uml:OpaqueExpression" body="directedFeature = feature-&gt;select(f | directionOf(f) &lt;&gt; null)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeOwnedUnioningNotOne" xmi:type="uml:Constraint" name="validateTypeOwnedUnioningNotOne">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeOwnedUnioningNotOne-_comment.0" xmi:type="uml:Comment" body="A &lt;code&gt;Type&lt;/code&gt; must not have exactly one &lt;code&gt;ownedUnioning&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeOwnedUnioningNotOne"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeOwnedUnioningNotOne-specification0" xmi:type="uml:OpaqueExpression" body="ownedUnioning-&gt;size() &lt;&gt; 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeAtMostOneConjugator" xmi:type="uml:Constraint" name="validateTypeAtMostOneConjugator">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeAtMostOneConjugator-_comment.0" xmi:type="uml:Comment" body="A &lt;code&gt;Type&lt;/code&gt; must have at most one owned &lt;code&gt;Conjugation&lt;/code&gt; &lt;code&gt;Relationship&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeAtMostOneConjugator"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeAtMostOneConjugator-specification0" xmi:type="uml:OpaqueExpression" body="ownedRelationship-&gt;selectByKind(Conjugation)-&gt;size() &lt;= 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedFeature" xmi:type="uml:Constraint" name="deriveTypeOwnedFeature">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedFeatures&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;ownedMemberFeatures&lt;/code&gt; of its &lt;code&gt;ownedFeatureMemberships&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedFeature"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedFeature-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeature = ownedFeatureMembership.ownedMemberFeature" language="English" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeFeatureMembership" xmi:type="uml:Constraint" name="deriveTypeFeatureMembership">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeFeatureMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;featureMemberships&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; is the union of the &lt;code&gt;ownedFeatureMemberships&lt;/code&gt; and those &lt;code&gt;inheritedMemberships&lt;/code&gt; that are &lt;code&gt;FeatureMemberships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeFeatureMembership"/>
</ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeFeatureMembership-specification0" xmi:type="uml:OpaqueExpression" body="featureMembership = ownedFeatureMembership-&gt;union( inheritedMembership-&gt;selectByKind(FeatureMembership))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeOwnedUnioning" xmi:type="uml:Constraint" name="deriveTypeOwnedUnioning">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeOwnedUnioning-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedUnionings&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Unionings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeOwnedUnioning"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeOwnedUnioning-specification0" xmi:type="uml:OpaqueExpression" body="ownedUnioning = ownedRelationship-&gt;selectByKind(Unioning)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeOwnedDifferencingNotOne" xmi:type="uml:Constraint" name="validateTypeOwnedDifferencingNotOne">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeOwnedDifferencingNotOne-_comment.0" xmi:type="uml:Comment" body="A &lt;code&gt;Type&lt;/code&gt; must not have exactly one &lt;code&gt;ownedDifferencing&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeOwnedDifferencingNotOne"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeOwnedDifferencingNotOne-specification0" xmi:type="uml:OpaqueExpression" body="ownedDifferencing-&gt;size() &lt;&gt; 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-deriveTypeFeature" xmi:type="uml:Constraint" name="deriveTypeFeature">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-deriveTypeFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;features&lt;/code&gt; of a &lt;code&gt;Type&lt;/code&gt; are the &lt;code&gt;ownedMemberFeatures&lt;/code&gt; of its &lt;code&gt;featureMemberships&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Types-Type-deriveTypeFeature"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-deriveTypeFeature-specification0" xmi:type="uml:OpaqueExpression" body="feature = featureMembership.ownedMemberFeature" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Type-validateTypeIntersectingTypesNotSelf" xmi:type="uml:Constraint" name="validateTypeIntersectingTypesNotSelf">
            <constrainedElement xmi:idref="Core-Types-Type"/>
            <ownedComment xmi:id="Core-Types-Type-validateTypeIntersectingTypesNotSelf-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; cannot be one of its own &lt;code&gt;intersectingTypes&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Type-validateTypeIntersectingTypesNotSelf"/>
            </ownedComment>
            <specification xmi:id="Core-Types-Type-validateTypeIntersectingTypesNotSelf-specification0" xmi:type="uml:OpaqueExpression" body="intersectingType-&gt;excludes(self)" language="English" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedIntersecting_typeIntersected" xmi:type="uml:Association" name="A_ownedIntersecting_typeIntersected">
          <memberEnd xmi:idref="Core-Types-Type-ownedIntersecting"/>
          <memberEnd xmi:idref="Core-Types-Intersecting-typeIntersected"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Multiplicity" xmi:type="uml:Class" name="Multiplicity">
          <generalization xmi:id="Core-Types-Multiplicity-_generalization.Core-Features-Feature" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Feature"/>
          </generalization>
          <ownedComment xmi:id="Core-Types-Multiplicity-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Multiplicity&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt; whose co-domain is a set of natural numbers giving the allowed cardinalities of each &lt;code&gt;typeWithMultiplicity&lt;/code&gt;. The &lt;em&gt;cardinality&lt;/em&gt; of a &lt;code&gt;Type&lt;/code&gt; is defined as follows, depending on whether the &lt;code&gt;Type&lt;/code&gt; is a &lt;code&gt;Classifier&lt;/code&gt; or &lt;code&gt;Feature&lt;/code&gt;. &lt;ul&gt; &lt;li&gt;&lt;code&gt;Classifier&lt;/code&gt; – The number of basic instances of the &lt;code&gt;Classifier&lt;/code&gt;, that is, those instances representing things, which are not instances of any subtypes of the &lt;code&gt;Classifier&lt;/code&gt; that are &lt;code&gt;Features&lt;/code&gt;. &lt;li&gt;&lt;code&gt;Features&lt;/code&gt; – The number of instances with the same featuring instances. In the case of a &lt;code&gt;Feature&lt;/code&gt; with a &lt;code&gt;Classifier&lt;/code&gt; as its &lt;code&gt;featuringType&lt;/code&gt;, this is the number of values of &lt;code&gt;Feature&lt;/code&gt; for each basic instance of the &lt;code&gt;Classifier&lt;/code&gt;. Note that, for non-unique &lt;code&gt;Features&lt;/code&gt;, all duplicate values are included in this count.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;code&gt;Multiplicity&lt;/code&gt; co-domains (in models) can be specified by &lt;code&gt;Expression&lt;/code&gt; that might vary in their results. If the &lt;code&gt;typeWithMultiplicity&lt;/code&gt; is a &lt;code&gt;Classifier&lt;/code&gt;, the domain of the &lt;code&gt;Multiplicity&lt;/code&gt; shall be &lt;em&gt;&lt;code&gt;Base::Anything&lt;/code&gt;&lt;/em&gt;.  If the &lt;code&gt;typeWithMultiplicity&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt;,  the &lt;code&gt;Multiplicity&lt;/code&gt; shall have the same domain as the &lt;code&gt;typeWithMultiplicity&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Multiplicity"/>
</ownedComment>
          <ownedRule xmi:id="Core-Types-Multiplicity-checkMultiplicityTypeFeaturing" xmi:type="uml:Constraint" name="checkMultiplicityTypeFeaturing">
            <constrainedElement xmi:idref="Core-Types-Multiplicity"/>
            <ownedComment xmi:id="Core-Types-Multiplicity-checkMultiplicityTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;owningType&lt;/code&gt; of a &lt;code&gt;Multiplicity&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt;, then the &lt;code&gt;Multiplicity&lt;/code&gt; must have the same &lt;code&gt;featuringTypes&lt;/code&gt; as that &lt;code&gt;Feature&lt;/code&gt;. Otherwise, it must have no &lt;code&gt;featuringTypes&lt;/code&gt; (meaning that it is implicitly featured by the base &lt;code&gt;Classifier&lt;/code&gt; &lt;em&gt;&lt;code&gt;Anything&lt;/code&gt;&lt;/em&gt;).&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Multiplicity-checkMultiplicityTypeFeaturing"/>
</ownedComment>
            <specification xmi:id="Core-Types-Multiplicity-checkMultiplicityTypeFeaturing-specification0" xmi:type="uml:OpaqueExpression" body="if owningType &lt;&gt; null and owningType.oclIsKindOf(Feature) then     featuringType =          owningType.oclAsType(Feature).featuringType else     featuringType-&gt;isEmpty() endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Types-Multiplicity-checkMultiplicitySpecialization" xmi:type="uml:Constraint" name="checkMultiplicitySpecialization">
            <constrainedElement xmi:idref="Core-Types-Multiplicity"/>
            <ownedComment xmi:id="Core-Types-Multiplicity-checkMultiplicitySpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Multiplicity&lt;/code&gt; must directly or indirectly specialize the &lt;code&gt;Feature&lt;/code&gt; &lt;code&gt;&lt;em&gt;Base::naturals&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Multiplicity-checkMultiplicitySpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Types-Multiplicity-checkMultiplicitySpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Base::naturals')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Differencing" xmi:type="uml:Class" name="Differencing">
          <generalization xmi:id="Core-Types-Differencing-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-Differencing-typeDifferenced" xmi:type="uml:Property" isDerived="true" name="typeDifferenced">
            <association xmi:idref="Core-Types-A_typeDifferenced_ownedDifferencing"/>
            <lowerValue xmi:id="Core-Types-Differencing-typeDifferenced-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Differencing-typeDifferenced-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; with interpretations partly determined by &lt;code&gt;differencingType&lt;/code&gt;, as described in &lt;code&gt;Type::differencingType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Differencing-typeDifferenced"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Differencing-typeDifferenced-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Differencing-differencingType" xmi:type="uml:Property" name="differencingType">
            <association xmi:idref="Core-Types-A_differencingType_differencedDifferencing"/>
            <lowerValue xmi:id="Core-Types-Differencing-differencingType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Differencing-differencingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; that partly determines interpretations of &lt;code&gt;typeDifferenced&lt;/code&gt;, as described in &lt;code&gt;Type::differencingType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Differencing-differencingType"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Differencing-differencingType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-Differencing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Differencing&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; that makes its &lt;code&gt;differencingType&lt;/code&gt; one of the &lt;code&gt;differencingTypes&lt;/code&gt; of its &lt;code&gt;typeDifferenced&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Differencing"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_inheritedMembership_inheritingType" xmi:type="uml:Association" name="A_inheritedMembership_inheritingType">
          <memberEnd xmi:idref="Core-Types-Type-inheritedMembership"/>
          <memberEnd xmi:idref="Core-Types-A_inheritedMembership_inheritingType-inheritingType"/>
          <ownedEnd xmi:id="Core-Types-A_inheritedMembership_inheritingType-inheritingType" xmi:type="uml:Property" isDerived="true" name="inheritingType">
            <association xmi:idref="Core-Types-A_inheritedMembership_inheritingType"/>
            <lowerValue xmi:id="Core-Types-A_inheritedMembership_inheritingType-inheritingType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_inheritedMembership_inheritingType-inheritingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Type that inherits the &lt;code&gt;inheritedMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_inheritedMembership_inheritingType-inheritingType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_inheritedMembership_inheritingType-inheritingType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_endFeature_typeWithEndFeature" xmi:type="uml:Association" name="A_endFeature_typeWithEndFeature">
          <memberEnd xmi:idref="Core-Types-Type-endFeature"/>
          <memberEnd xmi:idref="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature"/>
          <ownedEnd xmi:id="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature" xmi:type="uml:Property" isDerived="true" name="typeWithEndFeature">
            <association xmi:idref="Core-Types-A_endFeature_typeWithEndFeature"/>
            <lowerValue xmi:id="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A Type that has an EndFeatureMembership in which the &lt;code&gt;endFeature&lt;/code&gt; is a &lt;code&gt;memberFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_featureMembership_type" xmi:type="uml:Association" name="A_featureMembership_type">
          <memberEnd xmi:idref="Core-Types-Type-featureMembership"/>
          <memberEnd xmi:idref="Core-Types-A_featureMembership_type-type"/>
          <ownedEnd xmi:id="Core-Types-A_featureMembership_type-type" xmi:type="uml:Property" isDerived="true" name="type">
            <association xmi:idref="Core-Types-A_featureMembership_type"/>
            <lowerValue xmi:id="Core-Types-A_featureMembership_type-type-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-A_featureMembership_type-type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A Type that owns or inherits the &lt;code&gt;featureMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_featureMembership_type-type"/>
            </ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_featureMembership_type-type-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Intersecting" xmi:type="uml:Class" name="Intersecting">
          <generalization xmi:id="Core-Types-Intersecting-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-Intersecting-typeIntersected" xmi:type="uml:Property" isDerived="true" name="typeIntersected">
            <association xmi:idref="Core-Types-A_ownedIntersecting_typeIntersected"/>
            <lowerValue xmi:id="Core-Types-Intersecting-typeIntersected-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Intersecting-typeIntersected-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; with interpretations partly determined by &lt;code&gt;intersectingType&lt;/code&gt;, as described in &lt;code&gt;Type::intersectingType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Intersecting-typeIntersected"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Intersecting-typeIntersected-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Intersecting-intersectingType" xmi:type="uml:Property" name="intersectingType">
            <association xmi:idref="Core-Types-A_intersectingType_intersectedIntersecting"/>
            <lowerValue xmi:id="Core-Types-Intersecting-intersectingType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Intersecting-intersectingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; that partly determines interpretations of &lt;code&gt;typeIntersected&lt;/code&gt;, as described in &lt;code&gt;Type::intersectingType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Intersecting-intersectingType"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Intersecting-intersectingType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-Intersecting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Intersecting&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; that makes its &lt;code&gt;intersectingType&lt;/code&gt; one of the &lt;code&gt;intersectingTypes&lt;/code&gt; of its &lt;code&gt;typeIntersected&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Intersecting"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_output_typeWithOutput" xmi:type="uml:Association" name="A_output_typeWithOutput">
          <memberEnd xmi:idref="Core-Types-Type-output"/>
          <memberEnd xmi:idref="Core-Types-A_output_typeWithOutput-typeWithOutput"/>
          <ownedEnd xmi:id="Core-Types-A_output_typeWithOutput-typeWithOutput" xmi:type="uml:Property" isDerived="true" name="typeWithOutput">
            <association xmi:idref="Core-Types-A_output_typeWithOutput"/>
            <lowerValue xmi:id="Core-Types-A_output_typeWithOutput-typeWithOutput-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_output_typeWithOutput-typeWithOutput-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A Type with a certain &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_output_typeWithOutput-typeWithOutput"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_output_typeWithOutput-typeWithOutput-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_intersectingType_intersectedType" xmi:type="uml:Association" name="A_intersectingType_intersectedType">
          <memberEnd xmi:idref="Core-Types-Type-intersectingType"/>
          <memberEnd xmi:idref="Core-Types-A_intersectingType_intersectedType-intersectedType"/>
          <ownedEnd xmi:id="Core-Types-A_intersectingType_intersectedType-intersectedType" xmi:type="uml:Property" isDerived="true" name="intersectedType">
            <association xmi:idref="Core-Types-A_intersectingType_intersectedType"/>
            <lowerValue xmi:id="Core-Types-A_intersectingType_intersectedType-intersectedType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_intersectingType_intersectedType-intersectedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Types that include this one among their &lt;code&gt;intersectingTypes&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_intersectingType_intersectedType-intersectedType"/>
            </ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_intersectingType_intersectedType-intersectedType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_typeWithFeature_feature" xmi:type="uml:Association" name="A_typeWithFeature_feature">
          <memberEnd xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
          <memberEnd xmi:idref="Core-Types-Type-feature"/>
          <ownedEnd xmi:id="Core-Types-A_typeWithFeature_feature-typeWithFeature" xmi:type="uml:Property" isDerived="true" name="typeWithFeature">
            <association xmi:idref="Core-Types-A_typeWithFeature_feature"/>
            <lowerValue xmi:id="Core-Types-A_typeWithFeature_feature-typeWithFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_typeWithFeature_feature-typeWithFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A Type that owns or inherits a FeatureMembership Relationship with the &lt;code&gt;feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_typeWithFeature_feature-typeWithFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Unioning" xmi:type="uml:Class" name="Unioning">
          <generalization xmi:id="Core-Types-Unioning-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-Unioning-typeUnioned" xmi:type="uml:Property" isDerived="true" name="typeUnioned">
            <association xmi:idref="Core-Types-A_typeUnioned_ownedUnioning"/>
            <lowerValue xmi:id="Core-Types-Unioning-typeUnioned-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Unioning-typeUnioned-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; with interpretations partly determined by &lt;code&gt;unioningType&lt;/code&gt;, as described in &lt;code&gt;Type::unioningType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Unioning-typeUnioned"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Unioning-typeUnioned-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Unioning-unioningType" xmi:type="uml:Property" name="unioningType">
            <association xmi:idref="Core-Types-A_unioningType_unionedUnioning"/>
            <lowerValue xmi:id="Core-Types-Unioning-unioningType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Unioning-unioningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; that partly determines interpretations of &lt;code&gt;typeUnioned&lt;/code&gt;, as described in &lt;code&gt;Type::unioningType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Unioning-unioningType"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Unioning-unioningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-Unioning-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Unioning&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; that makes its &lt;code&gt;unioningType&lt;/code&gt; one of the &lt;code&gt;unioningTypes&lt;/code&gt; of its &lt;code&gt;typeUnioned&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Unioning"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedConjugator_owningType" xmi:type="uml:Association" name="A_ownedConjugator_owningType">
          <memberEnd xmi:idref="Core-Types-Type-ownedConjugator"/>
          <memberEnd xmi:idref="Core-Types-Conjugation-owningType"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedDisjoining_owningType" xmi:type="uml:Association" name="A_ownedDisjoining_owningType">
          <memberEnd xmi:idref="Core-Types-Type-ownedDisjoining"/>
          <memberEnd xmi:idref="Core-Types-Disjoining-owningType"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_typeUnioned_ownedUnioning" xmi:type="uml:Association" name="A_typeUnioned_ownedUnioning">
          <memberEnd xmi:idref="Core-Types-Unioning-typeUnioned"/>
          <memberEnd xmi:idref="Core-Types-Type-ownedUnioning"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_typeDifferenced_ownedDifferencing" xmi:type="uml:Association" name="A_typeDifferenced_ownedDifferencing">
          <memberEnd xmi:idref="Core-Types-Differencing-typeDifferenced"/>
          <memberEnd xmi:idref="Core-Types-Type-ownedDifferencing"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_unioningType_unionedType" xmi:type="uml:Association" name="A_unioningType_unionedType">
          <memberEnd xmi:idref="Core-Types-Type-unioningType"/>
          <memberEnd xmi:idref="Core-Types-A_unioningType_unionedType-unionedType"/>
          <ownedEnd xmi:id="Core-Types-A_unioningType_unionedType-unionedType" xmi:type="uml:Property" isDerived="true" name="unionedType">
            <association xmi:idref="Core-Types-A_unioningType_unionedType"/>
            <lowerValue xmi:id="Core-Types-A_unioningType_unionedType-unionedType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_unioningType_unionedType-unionedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Types that include this one among their &lt;code&gt;unioningTypes&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_unioningType_unionedType-unionedType"/>
            </ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_unioningType_unionedType-unionedType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-FeatureDirectionKind" xmi:type="uml:Enumeration" name="FeatureDirectionKind">
          <ownedComment xmi:id="Core-Types-FeatureDirectionKind-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;FeatureDirectionKind&lt;/code&gt; enumerates the possible kinds of &lt;code&gt;direction&lt;/code&gt; that a &lt;code&gt;Feature&lt;/code&gt; may be given as a member of a &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-FeatureDirectionKind"/>
</ownedComment>
          <ownedLiteral xmi:id="Core-Types-FeatureDirectionKind-in" xmi:type="uml:EnumerationLiteral" name="in">
            <ownedComment xmi:id="Core-Types-FeatureDirectionKind-in-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Values of the &lt;code&gt;Feature&lt;/code&gt; on each instance of its domain are determined externally to that instance and used internally.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-FeatureDirectionKind-in"/>
            </ownedComment>
          </ownedLiteral>
          <ownedLiteral xmi:id="Core-Types-FeatureDirectionKind-inout" xmi:type="uml:EnumerationLiteral" name="inout">
            <ownedComment xmi:id="Core-Types-FeatureDirectionKind-inout-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Values of the &lt;code&gt;Feature&lt;/code&gt; on each instance are determined either as &lt;em&gt;in&lt;/em&gt; or &lt;em&gt;out&lt;/em&gt; directions, or both.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-FeatureDirectionKind-inout"/>
            </ownedComment>
          </ownedLiteral>
          <ownedLiteral xmi:id="Core-Types-FeatureDirectionKind-out" xmi:type="uml:EnumerationLiteral" name="out">
            <ownedComment xmi:id="Core-Types-FeatureDirectionKind-out-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Values of the &lt;code&gt;Feature&lt;/code&gt; on each instance of its domain are determined internally to that instance and used externally.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-FeatureDirectionKind-out"/>
            </ownedComment>
          </ownedLiteral>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedFeature_owningType" xmi:type="uml:Association" name="A_ownedFeature_owningType">
          <memberEnd xmi:idref="Core-Types-Type-ownedFeature"/>
          <memberEnd xmi:idref="Core-Features-Feature-owningType"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-FeatureMembership" xmi:type="uml:Class" name="FeatureMembership">
          <generalization xmi:id="Core-Types-FeatureMembership-_generalization.Root-Namespaces-OwningMembership" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-OwningMembership"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-FeatureMembership-owningType" xmi:type="uml:Property" isDerived="true" name="owningType">
            <association xmi:idref="Core-Types-A_ownedFeatureMembership_owningType"/>
            <lowerValue xmi:id="Core-Types-FeatureMembership-owningType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-FeatureMembership-owningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that owns this &lt;code&gt;FeatureMembership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-FeatureMembership-owningType"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-Membership-membershipOwningNamespace"/>
            <subsettedProperty xmi:idref="Core-Types-A_featureMembership_type-type"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-FeatureMembership-owningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-FeatureMembership-ownedMemberFeature" xmi:type="uml:Property" isDerived="true" name="ownedMemberFeature">
            <association xmi:idref="Core-Types-A_ownedMemberFeature_owningFeatureMembership"/>
            <lowerValue xmi:id="Core-Types-FeatureMembership-ownedMemberFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-FeatureMembership-ownedMemberFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that this &lt;code&gt;FeatureMembership&lt;/code&gt; relates to its &lt;code&gt;owningType&lt;/code&gt;, making it an &lt;code&gt;ownedFeature&lt;/code&gt; of the &lt;code&gt;owningType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-FeatureMembership-ownedMemberFeature"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-OwningMembership-ownedMemberElement"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Types-FeatureMembership-ownedMemberFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-FeatureMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureMembership&lt;/code&gt; is an &lt;code&gt;OwningMembership&lt;/code&gt; between an &lt;code&gt;ownedMemberFeature&lt;/code&gt; and an &lt;code&gt;owningType&lt;/code&gt;. If the &lt;code&gt;ownedMemberFeature&lt;/code&gt; has &lt;code&gt;isVariable = false&lt;/code&gt;, then the &lt;code&gt;FeatureMembership&lt;/code&gt; implies that the &lt;code&gt;owningType&lt;/code&gt; is also a &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;ownedMemberFeature&lt;/code&gt;. If the &lt;code&gt;ownedMemberFeature&lt;/code&gt; has &lt;code&gt;isVariable = true&lt;/code&gt;, then the &lt;code&gt;FeatureMembership&lt;/code&gt; implies that the &lt;code&gt;ownedMemberFeature&lt;/code&gt; is featured by the &lt;em&gt;&lt;code&gt;snapshots&lt;/code&gt;&lt;/em&gt; of the &lt;code&gt;owningType&lt;/code&gt;, which must specialize the Kernel Semantic Library base class &lt;em&gt;&lt;code&gt;Occurrence&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-FeatureMembership"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Conjugation" xmi:type="uml:Class" name="Conjugation">
          <generalization xmi:id="Core-Types-Conjugation-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-Conjugation-originalType" xmi:type="uml:Property" name="originalType">
            <association xmi:idref="Core-Types-A_originalType_conjugation"/>
            <lowerValue xmi:id="Core-Types-Conjugation-originalType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Conjugation-originalType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; to be conjugated.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Conjugation-originalType"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Conjugation-originalType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Conjugation-conjugatedType" xmi:type="uml:Property" name="conjugatedType">
            <association xmi:idref="Core-Types-A_conjugatedType_conjugator"/>
            <lowerValue xmi:id="Core-Types-Conjugation-conjugatedType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Conjugation-conjugatedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that is the result of applying &lt;code&gt;Conjugation&lt;/code&gt; to the &lt;code&gt;originalType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Conjugation-conjugatedType"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Conjugation-conjugatedType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Conjugation-owningType" xmi:type="uml:Property" isDerived="true" name="owningType">
            <association xmi:idref="Core-Types-A_ownedConjugator_owningType"/>
            <lowerValue xmi:id="Core-Types-Conjugation-owningType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Conjugation-owningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;conjugatedType&lt;/code&gt; of this &lt;code&gt;Conjugation&lt;/code&gt; that is also its &lt;code&gt;owningRelatedElement&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Conjugation-owningType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Conjugation-conjugatedType"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Conjugation-owningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-Conjugation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Conjugation&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; between two types in which the &lt;code&gt;conjugatedType&lt;/code&gt; inherits all the &lt;code&gt;Features&lt;/code&gt; of the &lt;code&gt;originalType&lt;/code&gt;, but with all &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; &lt;code&gt;Features&lt;/code&gt; reversed. That is, any &lt;code&gt;Features&lt;/code&gt; with a &lt;code&gt;direction&lt;/code&gt; &lt;em&gt;in&lt;/em&gt; relative to the &lt;code&gt;originalType&lt;/code&gt; are considered to have an effective &lt;code&gt;direction&lt;/code&gt; of &lt;em&gt;out&lt;/em&gt; relative to the &lt;code&gt;conjugatedType&lt;/code&gt; and, similarly, &lt;code&gt;Features&lt;/code&gt; with &lt;code&gt;direction&lt;/code&gt; &lt;em&gt;out&lt;/em&gt; in the &lt;code&gt;originalType&lt;/code&gt; are considered to have an effective &lt;code&gt;direction&lt;/code&gt; of &lt;em&gt;in&lt;/em&gt; in the &lt;code&gt;conjugatedType&lt;/code&gt;. &lt;code&gt;Features&lt;/code&gt; with &lt;code&gt;direction&lt;/code&gt; &lt;em&gt;inout&lt;/em&gt;, or with no &lt;code&gt;direction&lt;/code&gt;, in the &lt;code&gt;originalType&lt;/code&gt;, are inherited without change.&lt;/p&gt;  &lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; may participate as a &lt;code&gt;conjugatedType&lt;/code&gt; in at most one &lt;code&gt;Conjugation&lt;/code&gt; relationship, and such a &lt;code&gt;Type&lt;/code&gt; may not also be the &lt;code&gt;specific&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; in any &lt;code&gt;Specialization&lt;/code&gt; relationship.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Conjugation"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined" xmi:type="uml:Association" name="A_disjoiningTypeDisjoining_typeDisjoined">
          <memberEnd xmi:idref="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined-disjoiningTypeDisjoining"/>
          <memberEnd xmi:idref="Core-Types-Disjoining-typeDisjoined"/>
          <ownedEnd xmi:id="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined-disjoiningTypeDisjoining" xmi:type="uml:Property" name="disjoiningTypeDisjoining">
            <association xmi:idref="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined"/>
            <lowerValue xmi:id="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined-disjoiningTypeDisjoining-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined-disjoiningTypeDisjoining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Disjoinings that identify this Type as their &lt;code&gt;typeDisjoined&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined-disjoiningTypeDisjoining"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Core-Types-Disjoining"/>
            <upperValue xmi:id="Core-Types-A_disjoiningTypeDisjoining_typeDisjoined-disjoiningTypeDisjoining-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedSpecialization_owningType" xmi:type="uml:Association" name="A_ownedSpecialization_owningType">
          <memberEnd xmi:idref="Core-Types-Type-ownedSpecialization"/>
          <memberEnd xmi:idref="Core-Types-Specialization-owningType"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_specific_specialization" xmi:type="uml:Association" name="A_specific_specialization">
          <memberEnd xmi:idref="Core-Types-Specialization-specific"/>
          <memberEnd xmi:idref="Core-Types-A_specific_specialization-specialization"/>
          <ownedEnd xmi:id="Core-Types-A_specific_specialization-specialization" xmi:type="uml:Property" name="specialization">
            <association xmi:idref="Core-Types-A_specific_specialization"/>
            <lowerValue xmi:id="Core-Types-A_specific_specialization-specialization-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_specific_specialization-specialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Specializations with a certain &lt;code&gt;specific&lt;/code&gt; Type.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_specific_specialization-specialization"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Core-Types-Specialization"/>
            <upperValue xmi:id="Core-Types-A_specific_specialization-specialization-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_conjugatedType_conjugator" xmi:type="uml:Association" name="A_conjugatedType_conjugator">
          <memberEnd xmi:idref="Core-Types-Conjugation-conjugatedType"/>
          <memberEnd xmi:idref="Core-Types-A_conjugatedType_conjugator-conjugator"/>
          <ownedEnd xmi:id="Core-Types-A_conjugatedType_conjugator-conjugator" xmi:type="uml:Property" name="conjugator">
            <association xmi:idref="Core-Types-A_conjugatedType_conjugator"/>
            <lowerValue xmi:id="Core-Types-A_conjugatedType_conjugator-conjugator-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_conjugatedType_conjugator-conjugator-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Conjugation corresponding to the &lt;code&gt;conjugatedType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_conjugatedType_conjugator-conjugator"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Core-Types-Conjugation"/>
            <upperValue xmi:id="Core-Types-A_conjugatedType_conjugator-conjugator-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedEndFeature_endOwningType" xmi:type="uml:Association" name="A_ownedEndFeature_endOwningType">
          <memberEnd xmi:idref="Core-Types-Type-ownedEndFeature"/>
          <memberEnd xmi:idref="Core-Features-Feature-endOwningType"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_differencingType_differencedDifferencing" xmi:type="uml:Association" name="A_differencingType_differencedDifferencing">
          <memberEnd xmi:idref="Core-Types-Differencing-differencingType"/>
          <memberEnd xmi:idref="Core-Types-A_differencingType_differencedDifferencing-differencedDifferencing"/>
          <ownedEnd xmi:id="Core-Types-A_differencingType_differencedDifferencing-differencedDifferencing" xmi:type="uml:Property" name="differencedDifferencing">
            <association xmi:idref="Core-Types-A_differencingType_differencedDifferencing"/>
            <lowerValue xmi:id="Core-Types-A_differencingType_differencedDifferencing-differencedDifferencing-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_differencingType_differencedDifferencing-differencedDifferencing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Differencings that identify this Type as their &lt;code&gt;differencingType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_differencingType_differencedDifferencing-differencedDifferencing"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Types-Differencing"/>
            <upperValue xmi:id="Core-Types-A_differencingType_differencedDifferencing-differencedDifferencing-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_general_generalization" xmi:type="uml:Association" name="A_general_generalization">
          <memberEnd xmi:idref="Core-Types-Specialization-general"/>
          <memberEnd xmi:idref="Core-Types-A_general_generalization-generalization"/>
          <ownedEnd xmi:id="Core-Types-A_general_generalization-generalization" xmi:type="uml:Property" name="generalization">
            <association xmi:idref="Core-Types-A_general_generalization"/>
            <lowerValue xmi:id="Core-Types-A_general_generalization-generalization-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_general_generalization-generalization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Specializations with a certain &lt;code&gt;general&lt;code&gt; Type.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_general_generalization-generalization"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Types-Specialization"/>
            <upperValue xmi:id="Core-Types-A_general_generalization-generalization-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_unioningType_unionedUnioning" xmi:type="uml:Association" name="A_unioningType_unionedUnioning">
          <memberEnd xmi:idref="Core-Types-Unioning-unioningType"/>
          <memberEnd xmi:idref="Core-Types-A_unioningType_unionedUnioning-unionedUnioning"/>
          <ownedEnd xmi:id="Core-Types-A_unioningType_unionedUnioning-unionedUnioning" xmi:type="uml:Property" name="unionedUnioning">
            <association xmi:idref="Core-Types-A_unioningType_unionedUnioning"/>
            <lowerValue xmi:id="Core-Types-A_unioningType_unionedUnioning-unionedUnioning-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_unioningType_unionedUnioning-unionedUnioning-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Unionings that identify all these Types as their &lt;code&gt;unioningType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_unioningType_unionedUnioning-unionedUnioning"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Types-Unioning"/>
            <upperValue xmi:id="Core-Types-A_unioningType_unionedUnioning-unionedUnioning-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_inheritedFeature_inheritingType" xmi:type="uml:Association" name="A_inheritedFeature_inheritingType">
          <memberEnd xmi:idref="Core-Types-Type-inheritedFeature"/>
          <memberEnd xmi:idref="Core-Types-A_inheritedFeature_inheritingType-inheritingType"/>
          <ownedEnd xmi:id="Core-Types-A_inheritedFeature_inheritingType-inheritingType" xmi:type="uml:Property" isDerived="true" name="inheritingType">
            <association xmi:idref="Core-Types-A_inheritedFeature_inheritingType"/>
            <lowerValue xmi:id="Core-Types-A_inheritedFeature_inheritingType-inheritingType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_inheritedFeature_inheritingType-inheritingType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A Type that has an &lt;code&gt;inheritedMembership&lt;/code&gt; with the &lt;code&gt;inheritedFeature&lt;/code&gt; as its &lt;code&gt;memberFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_inheritedFeature_inheritingType-inheritingType"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_inheritedFeature_inheritingType-inheritingType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_disjoiningType_disjoinedTypeDisjoining" xmi:type="uml:Association" name="A_disjoiningType_disjoinedTypeDisjoining">
          <memberEnd xmi:idref="Core-Types-Disjoining-disjoiningType"/>
          <memberEnd xmi:idref="Core-Types-A_disjoiningType_disjoinedTypeDisjoining-disjoinedTypeDisjoining"/>
          <ownedEnd xmi:id="Core-Types-A_disjoiningType_disjoinedTypeDisjoining-disjoinedTypeDisjoining" xmi:type="uml:Property" name="disjoinedTypeDisjoining">
            <association xmi:idref="Core-Types-A_disjoiningType_disjoinedTypeDisjoining"/>
            <lowerValue xmi:id="Core-Types-A_disjoiningType_disjoinedTypeDisjoining-disjoinedTypeDisjoining-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_disjoiningType_disjoinedTypeDisjoining-disjoinedTypeDisjoining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Disjoinings that identify this Type as their &lt;code&gt;disjoiningType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_disjoiningType_disjoinedTypeDisjoining-disjoinedTypeDisjoining"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Types-Disjoining"/>
            <upperValue xmi:id="Core-Types-A_disjoiningType_disjoinedTypeDisjoining-disjoinedTypeDisjoining-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_differencingType_differencedType" xmi:type="uml:Association" name="A_differencingType_differencedType">
          <memberEnd xmi:idref="Core-Types-Type-differencingType"/>
          <memberEnd xmi:idref="Core-Types-A_differencingType_differencedType-differencedType"/>
          <ownedEnd xmi:id="Core-Types-A_differencingType_differencedType-differencedType" xmi:type="uml:Property" isDerived="true" name="differencedType">
            <association xmi:idref="Core-Types-A_differencingType_differencedType"/>
            <lowerValue xmi:id="Core-Types-A_differencingType_differencedType-differencedType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_differencingType_differencedType-differencedType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Types that include this one among their &lt;code&gt;differencingTypes&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_differencingType_differencedType-differencedType"/>
            </ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-A_differencingType_differencedType-differencedType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_intersectingType_intersectedIntersecting" xmi:type="uml:Association" name="A_intersectingType_intersectedIntersecting">
          <memberEnd xmi:idref="Core-Types-Intersecting-intersectingType"/>
          <memberEnd xmi:idref="Core-Types-A_intersectingType_intersectedIntersecting-intersectedIntersecting"/>
          <ownedEnd xmi:id="Core-Types-A_intersectingType_intersectedIntersecting-intersectedIntersecting" xmi:type="uml:Property" name="intersectedIntersecting">
            <association xmi:idref="Core-Types-A_intersectingType_intersectedIntersecting"/>
            <lowerValue xmi:id="Core-Types-A_intersectingType_intersectedIntersecting-intersectedIntersecting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_intersectingType_intersectedIntersecting-intersectedIntersecting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Intersectings that identify this Type as their &lt;code&gt;intersectingType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_intersectingType_intersectedIntersecting-intersectedIntersecting"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Types-Intersecting"/>
            <upperValue xmi:id="Core-Types-A_intersectingType_intersectedIntersecting-intersectedIntersecting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedFeatureMembership_owningType" xmi:type="uml:Association" name="A_ownedFeatureMembership_owningType">
          <memberEnd xmi:idref="Core-Types-Type-ownedFeatureMembership"/>
          <memberEnd xmi:idref="Core-Types-FeatureMembership-owningType"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_ownedMemberFeature_owningFeatureMembership" xmi:type="uml:Association" name="A_ownedMemberFeature_owningFeatureMembership">
          <memberEnd xmi:idref="Core-Types-FeatureMembership-ownedMemberFeature"/>
          <memberEnd xmi:idref="Core-Features-Feature-owningFeatureMembership"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-Specialization" xmi:type="uml:Class" name="Specialization">
          <generalization xmi:id="Core-Types-Specialization-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Types-Specialization-owningType" xmi:type="uml:Property" isDerived="true" name="owningType">
            <association xmi:idref="Core-Types-A_ownedSpecialization_owningType"/>
            <lowerValue xmi:id="Core-Types-Specialization-owningType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-Specialization-owningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that is the &lt;code&gt;specific&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; of this &lt;code&gt;Specialization&lt;/code&gt; and owns it as its &lt;code&gt;owningRelatedElement&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Specialization-owningType"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <subsettedProperty xmi:idref="Core-Types-Specialization-specific"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Specialization-owningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Specialization-general" xmi:type="uml:Property" name="general">
            <association xmi:idref="Core-Types-A_general_generalization"/>
            <lowerValue xmi:id="Core-Types-Specialization-general-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Specialization-general-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; with a superset of all instances of the &lt;code&gt;specific&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt;, which might be the same set.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Specialization-general"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Specialization-general-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Types-Specialization-specific" xmi:type="uml:Property" name="specific">
            <association xmi:idref="Core-Types-A_specific_specialization"/>
            <lowerValue xmi:id="Core-Types-Specialization-specific-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Types-Specialization-specific-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; with a subset of all instances of the &lt;code&gt;general&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt;, which might be the same set.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Types-Specialization-specific"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Types-Specialization-specific-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Types-Specialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Specialization&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; between two &lt;code&gt;Types&lt;/code&gt; that requires all instances of the &lt;code&gt;specific&lt;/code&gt; type to also be instances of the &lt;code&gt;general&lt;/code&gt; Type (i.e., the set of instances of the &lt;code&gt;specific&lt;/code&gt; Type is a &lt;em&gt;subset&lt;/em&gt; of those of the &lt;code&gt;general&lt;/code&gt; Type, which might be the same set).&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Types-Specialization"/>
</ownedComment>
          <ownedRule xmi:id="Core-Types-Specialization-validateSpecificationSpecificNotConjugated" xmi:type="uml:Constraint" name="validateSpecificationSpecificNotConjugated">
            <constrainedElement xmi:idref="Core-Types-Specialization"/>
            <ownedComment xmi:id="Core-Types-Specialization-validateSpecificationSpecificNotConjugated-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;specific&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; of a &lt;code&gt;Specialization&lt;/code&gt; cannot be a conjugated &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-Specialization-validateSpecificationSpecificNotConjugated"/>
</ownedComment>
            <specification xmi:id="Core-Types-Specialization-validateSpecificationSpecificNotConjugated-specification0" xmi:type="uml:OpaqueExpression" body="not specific.isConjugated" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Types-A_originalType_conjugation" xmi:type="uml:Association" name="A_originalType_conjugation">
          <memberEnd xmi:idref="Core-Types-Conjugation-originalType"/>
          <memberEnd xmi:idref="Core-Types-A_originalType_conjugation-conjugation"/>
          <ownedEnd xmi:id="Core-Types-A_originalType_conjugation-conjugation" xmi:type="uml:Property" name="conjugation">
            <association xmi:idref="Core-Types-A_originalType_conjugation"/>
            <lowerValue xmi:id="Core-Types-A_originalType_conjugation-conjugation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Types-A_originalType_conjugation-conjugation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Conjugations with a certain Type as the &lt;code&gt;originalType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Types-A_originalType_conjugation-conjugation"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Types-Conjugation"/>
            <upperValue xmi:id="Core-Types-A_originalType_conjugation-conjugation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Core-Classifiers" xmi:type="uml:Package" URI="" name="Classifiers">
        <packagedElement xmi:id="Core-Classifiers-Subclassification" xmi:type="uml:Class" name="Subclassification">
          <generalization xmi:id="Core-Classifiers-Subclassification-_generalization.Core-Types-Specialization" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-Specialization"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Classifiers-Subclassification-superclassifier" xmi:type="uml:Property" name="superclassifier">
            <association xmi:idref="Core-Classifiers-A_superclassifier_superclassification"/>
            <lowerValue xmi:id="Core-Classifiers-Subclassification-superclassifier-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Classifiers-Subclassification-superclassifier-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The more &lt;code&gt;general&lt;/code&gt; Classifier in this &lt;code&gt;Subclassification&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Classifiers-Subclassification-superclassifier"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-general"/>
            <type xmi:idref="Core-Classifiers-Classifier"/>
            <upperValue xmi:id="Core-Classifiers-Subclassification-superclassifier-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Classifiers-Subclassification-subclassifier" xmi:type="uml:Property" name="subclassifier">
            <association xmi:idref="Core-Classifiers-A_subclassifier_subclassification"/>
            <lowerValue xmi:id="Core-Classifiers-Subclassification-subclassifier-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Classifiers-Subclassification-subclassifier-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The more specific &lt;code&gt;Classifier&lt;/code&gt; in this &lt;code&gt;Subclassification&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Classifiers-Subclassification-subclassifier"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-specific"/>
            <type xmi:idref="Core-Classifiers-Classifier"/>
            <upperValue xmi:id="Core-Classifiers-Subclassification-subclassifier-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Classifiers-Subclassification-owningClassifier" xmi:type="uml:Property" isDerived="true" name="owningClassifier">
            <association xmi:idref="Core-Classifiers-A_owningClassifier_ownedSubclassification"/>
            <lowerValue xmi:id="Core-Classifiers-Subclassification-owningClassifier-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Classifiers-Subclassification-owningClassifier-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Classifier&lt;/code&gt; that owns this &lt;code&gt;Subclassification&lt;/code&gt; relationship, which must also be its &lt;code&gt;subclassifier&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Classifiers-Subclassification-owningClassifier"/>
</ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-owningType"/>
            <type xmi:idref="Core-Classifiers-Classifier"/>
            <upperValue xmi:id="Core-Classifiers-Subclassification-owningClassifier-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Classifiers-Subclassification-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Subclassification&lt;/code&gt; is &lt;code&gt;Specialization&lt;/code&gt; in which both the &lt;code&gt;specific&lt;/code&gt; and &lt;code&gt;general&lt;/code&gt; &lt;code&gt;Types&lt;/code&gt; are &lt;code&gt;Classifier&lt;/code&gt;. This means all instances of the specific &lt;code&gt;Classifier&lt;/code&gt; are also instances of the general &lt;code&gt;Classifier&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Classifiers-Subclassification"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Classifiers-A_superclassifier_superclassification" xmi:type="uml:Association" name="A_superclassifier_superclassification">
          <memberEnd xmi:idref="Core-Classifiers-Subclassification-superclassifier"/>
          <memberEnd xmi:idref="Core-Classifiers-A_superclassifier_superclassification-superclassification"/>
          <ownedEnd xmi:id="Core-Classifiers-A_superclassifier_superclassification-superclassification" xmi:type="uml:Property" name="superclassification">
            <association xmi:idref="Core-Classifiers-A_superclassifier_superclassification"/>
            <lowerValue xmi:id="Core-Classifiers-A_superclassifier_superclassification-superclassification-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Classifiers-A_superclassifier_superclassification-superclassification-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Subclassifications with a certain &lt;code&gt;superclassifier&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Classifiers-A_superclassifier_superclassification-superclassification"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_general_generalization-generalization"/>
            <type xmi:idref="Core-Classifiers-Subclassification"/>
            <upperValue xmi:id="Core-Classifiers-A_superclassifier_superclassification-superclassification-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Classifiers-A_subclassifier_subclassification" xmi:type="uml:Association" name="A_subclassifier_subclassification">
          <memberEnd xmi:idref="Core-Classifiers-Subclassification-subclassifier"/>
          <memberEnd xmi:idref="Core-Classifiers-A_subclassifier_subclassification-subclassification"/>
          <ownedEnd xmi:id="Core-Classifiers-A_subclassifier_subclassification-subclassification" xmi:type="uml:Property" name="subclassification">
            <association xmi:idref="Core-Classifiers-A_subclassifier_subclassification"/>
            <lowerValue xmi:id="Core-Classifiers-A_subclassifier_subclassification-subclassification-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Classifiers-A_subclassifier_subclassification-subclassification-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Subclassifications with a certain &lt;code&gt;subclassifier&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Classifiers-A_subclassifier_subclassification-subclassification"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_specific_specialization-specialization"/>
            <type xmi:idref="Core-Classifiers-Subclassification"/>
            <upperValue xmi:id="Core-Classifiers-A_subclassifier_subclassification-subclassification-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Classifiers-Classifier" xmi:type="uml:Class" name="Classifier">
          <generalization xmi:id="Core-Classifiers-Classifier-_generalization.Core-Types-Type" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-Type"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Classifiers-Classifier-ownedSubclassification" xmi:type="uml:Property" isDerived="true" name="ownedSubclassification">
            <association xmi:idref="Core-Classifiers-A_owningClassifier_ownedSubclassification"/>
            <lowerValue xmi:id="Core-Classifiers-Classifier-ownedSubclassification-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Classifiers-Classifier-ownedSubclassification-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedSpecializations&lt;/code&gt; of this &lt;code&gt;Classifier&lt;/code&gt; that are &lt;code&gt;Subclassifications&lt;/code&gt;, for which this &lt;code&gt;Classifier&lt;/code&gt; is the &lt;code&gt;subclassifier&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Classifiers-Classifier-ownedSubclassification"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-ownedSpecialization"/>
            <type xmi:idref="Core-Classifiers-Subclassification"/>
            <upperValue xmi:id="Core-Classifiers-Classifier-ownedSubclassification-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Classifiers-Classifier-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Classifier&lt;/code&gt; is a &lt;code&gt;Type&lt;/code&gt; that classifies:&lt;/p&gt;  &lt;ul&gt;  &lt;li&gt;Things (in the universe) regardless of how &lt;code&gt;Features&lt;/code&gt; relate them. (These are interpreted semantically as sequences of exactly one thing.)&lt;/li&gt;  &lt;li&gt;How the above things are related by &lt;code&gt;Features.&lt;/code&gt; (These are interpreted semantically as sequences of multiple things, such that the last thing in the sequence is also classified by the &lt;code&gt;Classifier&lt;/code&gt;. Note that this means that a &lt;code&gt;Classifier&lt;/code&gt; modeled as specializing a &lt;code&gt;Feature&lt;/code&gt; cannot classify anything.)&lt;/li&gt; &lt;/ul&gt;  ">
            <annotatedElement xmi:idref="Core-Classifiers-Classifier"/>
</ownedComment>
          <ownedRule xmi:id="Core-Classifiers-Classifier-deriveClassifierOwnedSubclassification" xmi:type="uml:Constraint" name="deriveClassifierOwnedSubclassification">
            <constrainedElement xmi:idref="Core-Classifiers-Classifier"/>
            <ownedComment xmi:id="Core-Classifiers-Classifier-deriveClassifierOwnedSubclassification-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedSubclassifications&lt;/code&gt; of a &lt;code&gt;Classifier&lt;/code&gt; are its &lt;code&gt;ownedSpecializations&lt;/code&gt; that are &lt;code&gt;Subclassifications&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Classifiers-Classifier-deriveClassifierOwnedSubclassification"/>
</ownedComment>
            <specification xmi:id="Core-Classifiers-Classifier-deriveClassifierOwnedSubclassification-specification0" xmi:type="uml:OpaqueExpression" body="ownedSubclassification = ownedSpecialization-&gt;selectByKind(Subclassification)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Classifiers-Classifier-validateClassifierMultiplicityDomain" xmi:type="uml:Constraint" name="validateClassifierMultiplicityDomain">
            <constrainedElement xmi:idref="Core-Classifiers-Classifier"/>
            <ownedComment xmi:id="Core-Classifiers-Classifier-validateClassifierMultiplicityDomain-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Classifier&lt;/code&gt; has a &lt;code&gt;multiplicity&lt;/code&gt;, then the &lt;code&gt;multiplicity&lt;/code&gt; must have no &lt;code&gt;featuringTypes&lt;/code&gt; (meaning that its domain is implicitly &lt;em&gt;Base::Anything&lt;/em&gt;).&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Classifiers-Classifier-validateClassifierMultiplicityDomain"/>
</ownedComment>
            <specification xmi:id="Core-Classifiers-Classifier-validateClassifierMultiplicityDomain-specification0" xmi:type="uml:OpaqueExpression" body="multiplicity &lt;&gt; null implies multiplicity.featuringType-&gt;isEmpty()" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Classifiers-A_owningClassifier_ownedSubclassification" xmi:type="uml:Association" name="A_owningClassifier_ownedSubclassification">
          <memberEnd xmi:idref="Core-Classifiers-Subclassification-owningClassifier"/>
          <memberEnd xmi:idref="Core-Classifiers-Classifier-ownedSubclassification"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Core-Features" xmi:type="uml:Package" URI="" name="Features">
        <packagedElement xmi:id="Core-Features-FeatureInverting" xmi:type="uml:Class" name="FeatureInverting">
          <generalization xmi:id="Core-Features-FeatureInverting-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-FeatureInverting-featureInverted" xmi:type="uml:Property" name="featureInverted">
            <association xmi:idref="Core-Features-A_invertingFeatureInverting_featureInverted"/>
            <lowerValue xmi:id="Core-Features-FeatureInverting-featureInverted-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-FeatureInverting-featureInverted-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is an inverse of the &lt;code&gt;invertingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-FeatureInverting-featureInverted"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-FeatureInverting-featureInverted-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-FeatureInverting-invertingFeature" xmi:type="uml:Property" name="invertingFeature">
            <association xmi:idref="Core-Features-A_invertingFeature_invertedFeatureInverting"/>
            <lowerValue xmi:id="Core-Features-FeatureInverting-invertingFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-FeatureInverting-invertingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is an inverse of the &lt;code&gt;invertedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-FeatureInverting-invertingFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-FeatureInverting-invertingFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-FeatureInverting-owningFeature" xmi:type="uml:Property" isDerived="true" name="owningFeature">
            <association xmi:idref="Core-Features-A_ownedFeatureInverting_owningFeature"/>
            <lowerValue xmi:id="Core-Features-FeatureInverting-owningFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-FeatureInverting-owningFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;featureInverted&lt;/code&gt; that is also the &lt;code&gt;owningRelatedElement&lt;/code&gt; of this &lt;code&gt;FeatureInverting&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-FeatureInverting-owningFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-FeatureInverting-featureInverted"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-FeatureInverting-owningFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-FeatureInverting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;FeatureInverting&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; between &lt;code&gt;Features&lt;/code&gt; asserting that their interpretations (sequences) are the reverse of each other, identified as &lt;code&gt;featureInverted&lt;/code&gt; and &lt;code&gt;invertingFeature&lt;/code&gt;. For example, a &lt;code&gt;Feature&lt;/code&gt; identifying each person&amp;#39;s parents is the inverse of a &lt;code&gt;Feature&lt;/code&gt; identifying each person&amp;#39;s children. A person identified as a parent of another will identify that other as one of their children.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Features-FeatureInverting"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_crossedFeature_crossSupersetting" xmi:type="uml:Association" name="A_crossedFeature_crossSupersetting">
          <memberEnd xmi:idref="Core-Features-CrossSubsetting-crossedFeature"/>
          <memberEnd xmi:idref="Core-Features-A_crossedFeature_crossSupersetting-crossSupersetting"/>
          <ownedEnd xmi:id="Core-Features-A_crossedFeature_crossSupersetting-crossSupersetting" xmi:type="uml:Property" name="crossSupersetting">
            <association xmi:idref="Core-Features-A_crossedFeature_crossSupersetting"/>
            <lowerValue xmi:id="Core-Features-A_crossedFeature_crossSupersetting-crossSupersetting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_crossedFeature_crossSupersetting-crossSupersetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;CrossSubsetting&lt;/code&gt; with a certain &lt;code&gt;Feature&lt;/code&gt; as the &lt;code&gt;crossedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_crossedFeature_crossSupersetting-crossSupersetting"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-A_subsettedFeature_supersetting-supersetting"/>
            <type xmi:idref="Core-Features-CrossSubsetting"/>
            <upperValue xmi:id="Core-Features-A_crossedFeature_crossSupersetting-crossSupersetting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_crossFeature_featureCrossing" xmi:type="uml:Association" name="A_crossFeature_featureCrossing">
          <memberEnd xmi:idref="Core-Features-Feature-crossFeature"/>
          <memberEnd xmi:idref="Core-Features-A_crossFeature_featureCrossing-featureCrossing"/>
          <ownedEnd xmi:id="Core-Features-A_crossFeature_featureCrossing-featureCrossing" xmi:type="uml:Property" isDerived="true" name="featureCrossing">
            <association xmi:idref="Core-Features-A_crossFeature_featureCrossing"/>
            <lowerValue xmi:id="Core-Features-A_crossFeature_featureCrossing-featureCrossing-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_crossFeature_featureCrossing-featureCrossing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Features&lt;/code&gt; with a certain other &lt;code&gt;Feature&lt;/code&gt; as the &lt;code&gt;crossFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_crossFeature_featureCrossing-featureCrossing"/>
            </ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-A_crossFeature_featureCrossing-featureCrossing-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedRedefinition_owningFeature" xmi:type="uml:Association" name="A_ownedRedefinition_owningFeature">
          <memberEnd xmi:idref="Core-Features-Feature-ownedRedefinition"/>
          <memberEnd xmi:idref="Core-Features-A_ownedRedefinition_owningFeature-owningFeature"/>
          <ownedEnd xmi:id="Core-Features-A_ownedRedefinition_owningFeature-owningFeature" xmi:type="uml:Property" isDerived="true" name="owningFeature">
            <association xmi:idref="Core-Features-A_ownedRedefinition_owningFeature"/>
            <lowerValue xmi:id="Core-Features-A_ownedRedefinition_owningFeature-owningFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_ownedRedefinition_owningFeature-owningFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Feature that owns this Redefinition relationship, which must also be its &lt;code&gt;redefiningFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_ownedRedefinition_owningFeature-owningFeature"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Subsetting-owningFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-A_ownedRedefinition_owningFeature-owningFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_invertingFeature_invertedFeatureInverting" xmi:type="uml:Association" name="A_invertingFeature_invertedFeatureInverting">
          <memberEnd xmi:idref="Core-Features-FeatureInverting-invertingFeature"/>
          <memberEnd xmi:idref="Core-Features-A_invertingFeature_invertedFeatureInverting-invertedFeatureInverting"/>
          <ownedEnd xmi:id="Core-Features-A_invertingFeature_invertedFeatureInverting-invertedFeatureInverting" xmi:type="uml:Property" name="invertedFeatureInverting">
            <association xmi:idref="Core-Features-A_invertingFeature_invertedFeatureInverting"/>
            <lowerValue xmi:id="Core-Features-A_invertingFeature_invertedFeatureInverting-invertedFeatureInverting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_invertingFeature_invertedFeatureInverting-invertedFeatureInverting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The FeatureInvertings that identify this Feature as their &lt;code&gt;invertingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_invertingFeature_invertedFeatureInverting-invertedFeatureInverting"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Features-FeatureInverting"/>
            <upperValue xmi:id="Core-Features-A_invertingFeature_invertedFeatureInverting-invertedFeatureInverting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_featureTarget_baseFeature" xmi:type="uml:Association" name="A_featureTarget_baseFeature">
          <memberEnd xmi:idref="Core-Features-Feature-featureTarget"/>
          <memberEnd xmi:idref="Core-Features-A_featureTarget_baseFeature-baseFeature"/>
          <ownedEnd xmi:id="Core-Features-A_featureTarget_baseFeature-baseFeature" xmi:type="uml:Property" isDerived="true" name="baseFeature">
            <association xmi:idref="Core-Features-A_featureTarget_baseFeature"/>
            <lowerValue xmi:id="Core-Features-A_featureTarget_baseFeature-baseFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_featureTarget_baseFeature-baseFeature-_comment.1" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Features&lt;/code&gt; that identify a &lt;code&gt;Feature&lt;/code&gt; as their &lt;code&gt;featureTarget&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_featureTarget_baseFeature-baseFeature"/>
            </ownedComment>
            <ownedComment xmi:id="Core-Features-A_featureTarget_baseFeature-baseFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Features&lt;/code&gt; that are the same as or the &lt;code&gt;chainedFeature&lt;/code&gt; for a &lt;code&gt;targetFeature&lt;/code&gt;.&lt;/p&gt;"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-A_featureTarget_baseFeature-baseFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_subsettedFeature_supersetting" xmi:type="uml:Association" name="A_subsettedFeature_supersetting">
          <memberEnd xmi:idref="Core-Features-Subsetting-subsettedFeature"/>
          <memberEnd xmi:idref="Core-Features-A_subsettedFeature_supersetting-supersetting"/>
          <ownedEnd xmi:id="Core-Features-A_subsettedFeature_supersetting-supersetting" xmi:type="uml:Property" name="supersetting">
            <association xmi:idref="Core-Features-A_subsettedFeature_supersetting"/>
            <lowerValue xmi:id="Core-Features-A_subsettedFeature_supersetting-supersetting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_subsettedFeature_supersetting-supersetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Subsettings with a certain Feature as the &lt;code&gt;subsettedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_subsettedFeature_supersetting-supersetting"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_general_generalization-generalization"/>
            <type xmi:idref="Core-Features-Subsetting"/>
            <upperValue xmi:id="Core-Features-A_subsettedFeature_supersetting-supersetting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-FeatureChaining" xmi:type="uml:Class" name="FeatureChaining">
          <generalization xmi:id="Core-Features-FeatureChaining-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-FeatureChaining-chainingFeature" xmi:type="uml:Property" name="chainingFeature">
            <association xmi:idref="Core-Features-A_chainingFeature_chainedFeatureChaining"/>
            <lowerValue xmi:id="Core-Features-FeatureChaining-chainingFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-FeatureChaining-chainingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; whose values partly determine values of &lt;code&gt;featureChained&lt;/code&gt;, as described in &lt;code&gt;Feature::chainingFeature&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-FeatureChaining-chainingFeature"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-FeatureChaining-chainingFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-FeatureChaining-featureChained" xmi:type="uml:Property" isDerived="true" name="featureChained">
            <association xmi:idref="Core-Features-A_ownedFeatureChaining_featureChained"/>
            <lowerValue xmi:id="Core-Features-FeatureChaining-featureChained-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-FeatureChaining-featureChained-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; whose values are partly determined by values of the &lt;code&gt;chainingFeature&lt;/code&gt;, as described in &lt;code&gt;Feature::chainingFeature&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-FeatureChaining-featureChained"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-FeatureChaining-featureChained-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-FeatureChaining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;FeatureChaining&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; that makes its target &lt;code&gt;Feature&lt;/code&gt; one of the &lt;code&gt;chainingFeatures&lt;/code&gt; of its owning &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Core-Features-FeatureChaining"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-Redefinition" xmi:type="uml:Class" name="Redefinition">
          <generalization xmi:id="Core-Features-Redefinition-_generalization.Core-Features-Subsetting" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Subsetting"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-Redefinition-redefiningFeature" xmi:type="uml:Property" name="redefiningFeature">
            <association xmi:idref="Core-Features-A_redefiningFeature_redefinition"/>
            <lowerValue xmi:id="Core-Features-Redefinition-redefiningFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-Redefinition-redefiningFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is redefining the &lt;code&gt;redefinedFeature&lt;/code&gt; of this &lt;code&gt;Redefinition&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Redefinition-redefiningFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-subsettingFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Redefinition-redefiningFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Redefinition-redefinedFeature" xmi:type="uml:Property" name="redefinedFeature">
            <association xmi:idref="Core-Features-A_redefinedFeature_redefining"/>
            <lowerValue xmi:id="Core-Features-Redefinition-redefinedFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-Redefinition-redefinedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is redefined by the &lt;code&gt;redefiningFeature&lt;/code&gt; of this &lt;code&gt;Redefinition&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Redefinition-redefinedFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-subsettedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Redefinition-redefinedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-Redefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Redefinition&lt;/code&gt; is a kind of &lt;code&gt;Subsetting&lt;/code&gt; that requires the &lt;code&gt;redefinedFeature&lt;/code&gt; and the &lt;code&gt;redefiningFeature&lt;/code&gt; to have the same values (on each instance of the domain of the &lt;code&gt;redefiningFeature&lt;/code&gt;). This means any restrictions on the &lt;code&gt;redefiningFeature&lt;/code&gt;, such as &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;multiplicity&lt;/code&gt;, also apply to the &lt;code&gt;redefinedFeature&lt;/code&gt; (on each instance of the domain of the &lt;code&gt;redefiningFeature&lt;/code&gt;), and vice versa. The &lt;code&gt;redefinedFeature&lt;/code&gt; might have values for instances of the domain of the &lt;code&gt;redefiningFeature&lt;/code&gt;, but only as instances of the domain of the &lt;code&gt;redefinedFeature&lt;/code&gt; that happen to also be instances of the domain of the &lt;code&gt;redefiningFeature&lt;/code&gt;. This is supported by the constraints inherited from &lt;code&gt;Subsetting&lt;/code&gt; on the domains of the &lt;code&gt;redefiningFeature&lt;/code&gt; and &lt;code&gt;redefinedFeature&lt;/code&gt;. However, these constraints are narrowed for &lt;code&gt;Redefinition&lt;/code&gt; to require the &lt;code&gt;owningTypes&lt;/code&gt; of the &lt;code&gt;redefiningFeature&lt;/code&gt; and &lt;code&gt;redefinedFeature&lt;/code&gt; to be different and the &lt;code&gt;redefinedFeature&lt;/code&gt; to not be inherited into the &lt;code&gt;owningNamespace&lt;/code&gt; of the &lt;code&gt;redefiningFeature&lt;/code&gt;.This enables the &lt;code&gt;redefiningFeature&lt;/code&gt; to have the same name as the &lt;code&gt;redefinedFeature&lt;/code&gt;, if desired.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Features-Redefinition"/>
</ownedComment>
          <ownedRule xmi:id="Core-Features-Redefinition-validateRedefinitionEndConformance" xmi:type="uml:Constraint" name="validateRedefinitionEndConformance">
            <constrainedElement xmi:idref="Core-Features-Redefinition"/>
            <ownedComment xmi:id="Core-Features-Redefinition-validateRedefinitionEndConformance-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the redefinedFeature of a Redefinition has isEnd = true, then the redefiningFeature must have isEnd = true.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Redefinition-validateRedefinitionEndConformance"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Redefinition-validateRedefinitionEndConformance-specification0" xmi:type="uml:OpaqueExpression" body="redefinedFeature.isEnd implies redefiningFeature.isEnd" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Redefinition-validateRedefinitionFeaturingTypes" xmi:type="uml:Constraint" name="validateRedefinitionFeaturingTypes">
            <constrainedElement xmi:idref="Core-Features-Redefinition"/>
            <ownedComment xmi:id="Core-Features-Redefinition-validateRedefinitionFeaturingTypes-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;redefiningFeature&lt;/code&gt; of a &lt;code&gt;Redefinition&lt;/code&gt; must have at least one &lt;code&gt;featuringType&lt;/code&gt; that is not also a &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;redefinedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Redefinition-validateRedefinitionFeaturingTypes"/>
</ownedComment>
            <specification xmi:id="Core-Features-Redefinition-validateRedefinitionFeaturingTypes-specification0" xmi:type="uml:OpaqueExpression" body="let anythingType: Type =     redefiningFeature.resolveGlobal('Base::Anything').modelElement.oclAsType(Type) in  -- Including &quot;Anything&quot; accounts for implicit featuringType of Features -- with no explicit featuringType. let redefiningFeaturingTypes: Set(Type) =     if redefiningFeature.isVariable then Set{redefiningFeature.owningType}     else redefiningFeature.featuringTypes-&gt;asSet()-&gt;including(anythingType)      endif in let redefinedFeaturingTypes: Set(Type) =     if redefinedFeature.isVariable then Set{redefinedFeature.owningType}     else redefinedFeature.featuringTypes-&gt;asSet()-&gt;including(anythingType)     endif in redefiningFeaturingTypes &lt;&gt; redefinedFeaturingType" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Redefinition-validateRedefinitionDirectionConformance" xmi:type="uml:Constraint" name="validateRedefinitionDirectionConformance">
            <constrainedElement xmi:idref="Core-Features-Redefinition"/>
            <ownedComment xmi:id="Core-Features-Redefinition-validateRedefinitionDirectionConformance-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;redefinedFeature&lt;/code&gt; of a &lt;code&gt;Redefinition&lt;/code&gt; has a direction of &lt;code&gt;in&lt;/code&gt; or &lt;code&gt;out&lt;/code&gt; (relative to any &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;redefiningFeature&lt;/code&gt; or the &lt;code&gt;owningType&lt;/code&gt;, if the &lt;code&gt;redefiningFeature&lt;/code&gt; has &lt;code&gt;isVariable = true&lt;/code&gt;), then the &lt;code&gt;redefiningFeature&lt;/code&gt; must have the same &lt;code&gt;direction&lt;/code&gt;. If the &lt;code&gt;redefinedFeature&lt;/code&gt; has a direction of &lt;code&gt;inout&lt;/code&gt;, then the &lt;code&gt;redefiningFeature&lt;/code&gt; must have a non-null &lt;code&gt;direction&lt;/code&gt;. (Note: the direction of the &lt;code&gt;redefinedFeature&lt;/code&gt; relative to a &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;redefiningFeature&lt;/code&gt; is the direction it would have if it had been inherited and not redefined.)&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Redefinition-validateRedefinitionDirectionConformance"/>
</ownedComment>
            <specification xmi:id="Core-Features-Redefinition-validateRedefinitionDirectionConformance-specification0" xmi:type="uml:OpaqueExpression" body="let featuringTypes : Sequence(Type) =     if redefiningFeature.isVariable then Sequence{redefiningFeature.owningType}     else redefiningFeature.featuringType     endif in featuringTypes-&gt;forAll(t |     let direction : FeatureDirectionKind = t.directionOf(redefinedFeature) in     ((direction = FeatureDirectionKind::_'in' or        direction = FeatureDirectionKind::out) implies          redefiningFeature.direction = direction)     and      (direction = FeatureDirectionKind::inout implies         redefiningFeature.direction &lt;&gt; null))" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-ReferenceSubsetting" xmi:type="uml:Class" name="ReferenceSubsetting">
          <generalization xmi:id="Core-Features-ReferenceSubsetting-_generalization.Core-Features-Subsetting" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Subsetting"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-ReferenceSubsetting-referencedFeature" xmi:type="uml:Property" name="referencedFeature">
            <association xmi:idref="Core-Features-A_referencedFeature_referencing"/>
            <lowerValue xmi:id="Core-Features-ReferenceSubsetting-referencedFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-ReferenceSubsetting-referencedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is referenced by the &lt;code&gt;referencingFeature&lt;/code&gt; of this &lt;code&gt;ReferenceSubsetting&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-ReferenceSubsetting-referencedFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-subsettedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-ReferenceSubsetting-referencedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-ReferenceSubsetting-referencingFeature" xmi:type="uml:Property" isDerived="true" name="referencingFeature">
            <association xmi:idref="Core-Features-A_ownedReferenceSubsetting_referencingFeature"/>
            <lowerValue xmi:id="Core-Features-ReferenceSubsetting-referencingFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-ReferenceSubsetting-referencingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that owns this &lt;code&gt;ReferenceSubsetting&lt;/code&gt; relationship, which is also its &lt;code&gt;subsettingFeature&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-ReferenceSubsetting-referencingFeature"/>
</ownedComment>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-owningFeature"/>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-subsettingFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-ReferenceSubsetting-referencingFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-ReferenceSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;ReferenceSubsetting&lt;/code&gt; is a kind of &lt;code&gt;Subsetting&lt;/code&gt; in which the &lt;code&gt;referencedFeature&lt;/code&gt; is syntactically distinguished from other &lt;code&gt;Features&lt;/code&gt; subsetted by the &lt;code&gt;referencingFeature&lt;/code&gt;. &lt;code&gt;ReferenceSubsetting&lt;/code&gt; has the same semantics as &lt;code&gt;Subsetting&lt;/code&gt;, but the &lt;code&gt;referencedFeature&lt;/code&gt; may have a special purpose relative to the &lt;code&gt;referencingFeature&lt;/code&gt;. For instance, &lt;code&gt;ReferenceSubsetting&lt;/code&gt; is used to identify the &lt;code&gt;relatedFeatures&lt;/code&gt; of a &lt;code&gt;Connector&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;&lt;code&gt;ReferenceSubsetting&lt;/code&gt; is always an &lt;code&gt;ownedRelationship&lt;/code&gt; of its &lt;code&gt;referencingFeature&lt;/code&gt;. A &lt;code&gt;Feature&lt;/code&gt; can have at most one &lt;code&gt;ownedReferenceSubsetting&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Features-ReferenceSubsetting"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_referencedFeature_referencing" xmi:type="uml:Association" name="A_referencedFeature_referencing">
          <memberEnd xmi:idref="Core-Features-ReferenceSubsetting-referencedFeature"/>
          <memberEnd xmi:idref="Core-Features-A_referencedFeature_referencing-referencing"/>
          <ownedEnd xmi:id="Core-Features-A_referencedFeature_referencing-referencing" xmi:type="uml:Property" name="referencing">
            <association xmi:idref="Core-Features-A_referencedFeature_referencing"/>
            <lowerValue xmi:id="Core-Features-A_referencedFeature_referencing-referencing-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_referencedFeature_referencing-referencing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ReferenceSubsetting&lt;/code&gt; with a certain &lt;code&gt;Feature&lt;/code&gt; as the &lt;code&gt;referencedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_referencedFeature_referencing-referencing"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-A_subsettedFeature_supersetting-supersetting"/>
            <type xmi:idref="Core-Features-ReferenceSubsetting"/>
            <upperValue xmi:id="Core-Features-A_referencedFeature_referencing-referencing-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedFeatureChaining_featureChained" xmi:type="uml:Association" name="A_ownedFeatureChaining_featureChained">
          <memberEnd xmi:idref="Core-Features-Feature-ownedFeatureChaining"/>
          <memberEnd xmi:idref="Core-Features-FeatureChaining-featureChained"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_redefiningFeature_redefinition" xmi:type="uml:Association" name="A_redefiningFeature_redefinition">
          <memberEnd xmi:idref="Core-Features-Redefinition-redefiningFeature"/>
          <memberEnd xmi:idref="Core-Features-A_redefiningFeature_redefinition-redefinition"/>
          <ownedEnd xmi:id="Core-Features-A_redefiningFeature_redefinition-redefinition" xmi:type="uml:Property" name="redefinition">
            <association xmi:idref="Core-Features-A_redefiningFeature_redefinition"/>
            <lowerValue xmi:id="Core-Features-A_redefiningFeature_redefinition-redefinition-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_redefiningFeature_redefinition-redefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Redefinitions with a certain Feature as the &lt;code&gt;redefiningFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_redefiningFeature_redefinition-redefinition"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-A_subsettingFeature_subsetting-subsetting"/>
            <type xmi:idref="Core-Features-Redefinition"/>
            <upperValue xmi:id="Core-Features-A_redefiningFeature_redefinition-redefinition-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_multiplicity_typeWithMultiplicity" xmi:type="uml:Association" name="A_multiplicity_typeWithMultiplicity">
          <memberEnd xmi:idref="Core-Types-Type-multiplicity"/>
          <memberEnd xmi:idref="Core-Features-A_multiplicity_typeWithMultiplicity-typeWithMultiplicity"/>
          <ownedEnd xmi:id="Core-Features-A_multiplicity_typeWithMultiplicity-typeWithMultiplicity" xmi:type="uml:Property" isDerived="true" name="typeWithMultiplicity">
            <association xmi:idref="Core-Features-A_multiplicity_typeWithMultiplicity"/>
            <lowerValue xmi:id="Core-Features-A_multiplicity_typeWithMultiplicity-typeWithMultiplicity-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_multiplicity_typeWithMultiplicity-typeWithMultiplicity-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Type&lt;/code&gt; that has the &lt;code&gt;multiplicity&lt;/code&gt; as an &lt;code&gt;ownedMember&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_multiplicity_typeWithMultiplicity-typeWithMultiplicity"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Features-A_multiplicity_typeWithMultiplicity-typeWithMultiplicity-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_featuringType_featureOfType" xmi:type="uml:Association" name="A_featuringType_featureOfType">
          <memberEnd xmi:idref="Core-Features-Feature-featuringType"/>
          <memberEnd xmi:idref="Core-Features-A_featuringType_featureOfType-featureOfType"/>
          <ownedEnd xmi:id="Core-Features-A_featuringType_featureOfType-featureOfType" xmi:type="uml:Property" isDerived="true" name="featureOfType">
            <association xmi:idref="Core-Features-A_featuringType_featureOfType"/>
            <lowerValue xmi:id="Core-Features-A_featuringType_featureOfType-featureOfType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_featuringType_featureOfType-featureOfType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Features for which a certain Type is a &lt;code&gt;featuringType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_featuringType_featureOfType-featureOfType"/>
            </ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-A_featuringType_featureOfType-featureOfType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_featuringType_typeFeaturingOfType" xmi:type="uml:Association" name="A_featuringType_typeFeaturingOfType">
          <memberEnd xmi:idref="Core-Features-TypeFeaturing-featuringType"/>
          <memberEnd xmi:idref="Core-Features-A_featuringType_typeFeaturingOfType-typeFeaturingOfType"/>
          <ownedEnd xmi:id="Core-Features-A_featuringType_typeFeaturingOfType-typeFeaturingOfType" xmi:type="uml:Property" name="typeFeaturingOfType">
            <association xmi:idref="Core-Features-A_featuringType_typeFeaturingOfType"/>
            <lowerValue xmi:id="Core-Features-A_featuringType_typeFeaturingOfType-typeFeaturingOfType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_featuringType_typeFeaturingOfType-typeFeaturingOfType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;TypeFeaturings&lt;/code&gt; for which a certain &lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;featuringType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_featuringType_typeFeaturingOfType-typeFeaturingOfType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Features-TypeFeaturing"/>
            <upperValue xmi:id="Core-Features-A_featuringType_typeFeaturingOfType-typeFeaturingOfType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-Feature" xmi:type="uml:Class" name="Feature">
          <generalization xmi:id="Core-Features-Feature-_generalization.Core-Types-Type" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-Type"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-Feature-owningType" xmi:type="uml:Property" isDerived="true" name="owningType">
            <association xmi:idref="Core-Types-A_ownedFeature_owningType"/>
            <lowerValue xmi:id="Core-Features-Feature-owningType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-owningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that is the &lt;code&gt;owningType&lt;/code&gt; of the &lt;code&gt;owningFeatureMembership&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-owningType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Feature-featuringType"/>
            <subsettedProperty xmi:idref="Core-Types-A_typeWithFeature_feature-typeWithFeature"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-owningNamespace"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Features-Feature-owningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isUnique" xmi:type="uml:Property" name="isUnique">
            <defaultValue xmi:id="Core-Features-Feature-isUnique-defaultValue" xmi:type="uml:LiteralBoolean" name="" value="true"/>
            <ownedComment xmi:id="Core-Features-Feature-isUnique-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether or not values for this &lt;code&gt;Feature&lt;/code&gt; must have no duplicates or not.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-isUnique"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isOrdered" xmi:type="uml:Property" name="isOrdered">
            <defaultValue xmi:id="Core-Features-Feature-isOrdered-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-isOrdered-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether an order exists for the values of this &lt;code&gt;Feature&lt;/code&gt; or not.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-isOrdered"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-type" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="type">
            <association xmi:idref="Core-Features-A_typedFeature_type"/>
            <lowerValue xmi:id="Core-Features-Feature-type-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Types&lt;/code&gt; that restrict the values of this &lt;code&gt;Feature&lt;/code&gt;, such that the values must be instances of all the &lt;code&gt;types&lt;/code&gt;. The types of a &lt;code&gt;Feature&lt;/code&gt; are derived from its &lt;code&gt;typings&lt;/code&gt; and the &lt;code&gt;types&lt;/code&gt; of its &lt;code&gt;subsettings&lt;/code&gt;. If the &lt;code&gt;Feature&lt;/code&gt; is chained, then the &lt;code&gt;types&lt;/code&gt; of the last &lt;code&gt;Feature&lt;/code&gt; in the chain are also &lt;code&gt;types&lt;/code&gt; of the chained &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-type"/>
</ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Features-Feature-type-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedRedefinition" xmi:type="uml:Property" isDerived="true" name="ownedRedefinition">
            <association xmi:idref="Core-Features-A_ownedRedefinition_owningFeature"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedRedefinition-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedSubsettings&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; that are &lt;code&gt;Redefinitions&lt;/code&gt;, for which the &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;redefiningFeature&lt;/code&gt;.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedRedefinition"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Feature-ownedSubsetting"/>
            <type xmi:idref="Core-Features-Redefinition"/>
            <upperValue xmi:id="Core-Features-Feature-ownedRedefinition-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedSubsetting" xmi:type="uml:Property" isDerived="true" name="ownedSubsetting">
            <association xmi:idref="Core-Features-A_owningFeature_ownedSubsetting"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedSubsetting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedSpecializations&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; that are &lt;code&gt;Subsettings&lt;/code&gt;, for which the &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;subsettingFeature&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedSubsetting"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-ownedSpecialization"/>
            <subsettedProperty xmi:idref="Core-Features-A_subsettingFeature_subsetting-subsetting"/>
            <type xmi:idref="Core-Features-Subsetting"/>
            <upperValue xmi:id="Core-Features-Feature-ownedSubsetting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-owningFeatureMembership" xmi:type="uml:Property" isDerived="true" name="owningFeatureMembership">
            <association xmi:idref="Core-Types-A_ownedMemberFeature_owningFeatureMembership"/>
            <lowerValue xmi:id="Core-Features-Feature-owningFeatureMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-owningFeatureMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;FeatureMembership&lt;/code&gt; that owns this &lt;code&gt;Feature&lt;/code&gt; as an &lt;code&gt;ownedMemberFeature&lt;/code&gt;, determining its &lt;code&gt;owningType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-owningFeatureMembership"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-owningMembership"/>
            <type xmi:idref="Core-Types-FeatureMembership"/>
            <upperValue xmi:id="Core-Features-Feature-owningFeatureMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isComposite" xmi:type="uml:Property" name="isComposite">
            <defaultValue xmi:id="Core-Features-Feature-isComposite-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-isComposite-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether the &lt;code&gt;Feature&lt;/code&gt; is a composite &lt;code&gt;feature&lt;/code&gt; of its &lt;code&gt;featuringType&lt;/code&gt;. If so, the values of the &lt;code&gt;Feature&lt;/code&gt; cannot exist after its featuring instance no longer does and cannot be values of another composite feature that is not on the same featuring instance.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-isComposite"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isEnd" xmi:type="uml:Property" name="isEnd">
            <defaultValue xmi:id="Core-Features-Feature-isEnd-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-isEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether or not this &lt;code&gt;Feature&lt;/code&gt; is an end &lt;code&gt;Feature&lt;/code&gt;. An end &lt;code&gt;Feature&lt;/code&gt; always has multiplicity 1, mapping each of its domain instances to a single co-domain instance. However, it may have a &lt;code&gt;crossFeature&lt;/code&gt;, in which case values of the &lt;code&gt;crossFeature&lt;/code&gt; must be the same as those found by navigation across instances of the &lt;code&gt;owningType&lt;/code&gt; from values of other end &lt;code&gt;Features&lt;/code&gt; to values of this Feature. If the &lt;code&gt;owningType&lt;/code&gt; has &lt;em&gt;n&lt;/em&gt; end &lt;code&gt;Features&lt;/code&gt;, then the multiplicity, ordering, and uniqueness declared for the &lt;code&gt;crossFeature&lt;/code&gt; of any one of these end &lt;code&gt;Features&lt;/code&gt; constrains the cardinality, ordering, and uniqueness of the collection of values of that &lt;code&gt;Feature&lt;/code&gt; reached by navigation when the values of the other &lt;em&gt;n-1&lt;/em&gt; end &lt;code&gt;Features&lt;/code&gt; are held fixed.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-isEnd"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-endOwningType" xmi:type="uml:Property" isDerived="true" name="endOwningType">
            <association xmi:idref="Core-Types-A_ownedEndFeature_endOwningType"/>
            <lowerValue xmi:id="Core-Features-Feature-endOwningType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-endOwningType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that is related to this &lt;code&gt;Feature&lt;/code&gt; by an &lt;code&gt;EndFeatureMembership&lt;/code&gt; in which the &lt;code&gt;Feature&lt;/code&gt; is an &lt;code&gt;ownedMemberFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-endOwningType"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_endFeature_typeWithEndFeature-typeWithEndFeature"/>
            <subsettedProperty xmi:idref="Core-Features-Feature-owningType"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Features-Feature-endOwningType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedTyping" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedTyping">
            <association xmi:idref="Core-Features-A_ownedTyping_owningFeature"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedTyping-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedTyping-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedSpecializations&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; that are &lt;code&gt;FeatureTypings&lt;/code&gt;, for which the &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;typedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedTyping"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Types-Type-ownedSpecialization"/>
            <subsettedProperty xmi:idref="Core-Features-A_typing_typedFeature-typing"/>
            <type xmi:idref="Core-Features-FeatureTyping"/>
            <upperValue xmi:id="Core-Features-Feature-ownedTyping-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-featuringType" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="featuringType">
            <association xmi:idref="Core-Features-A_featuringType_featureOfType"/>
            <lowerValue xmi:id="Core-Features-Feature-featuringType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-featuringType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Types&lt;/code&gt; that feature this &lt;code&gt;Feature&lt;/code&gt;, such that any instance in the domain of the &lt;code&gt;Feature&lt;/code&gt; must be classified by all of these &lt;code&gt;Types&lt;/code&gt;, including at least all the &lt;code&gt;featuringTypes&lt;/code&gt; of its &lt;code&gt;typeFeaturings&lt;/code&gt;.  If the &lt;code&gt;Feature&lt;/code&gt; is chained, then the &lt;code&gt;featuringTypes&lt;/code&gt; of the first &lt;code&gt;Feature&lt;/code&gt; in the chain are also &lt;code&gt;featuringTypes&lt;/code&gt; of the chained &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-featuringType"/>
</ownedComment>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Features-Feature-featuringType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedTypeFeaturing" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedTypeFeaturing">
            <association xmi:idref="Core-Features-A_ownedTypeFeaturing_owningFeatureOfType"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedTypeFeaturing-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; that are &lt;code&gt;TypeFeaturings&lt;/code&gt; and for which the &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;featureOfType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedTypeFeaturing"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Features-A_featureOfType_typeFeaturing-typeFeaturing"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <type xmi:idref="Core-Features-TypeFeaturing"/>
            <upperValue xmi:id="Core-Features-Feature-ownedTypeFeaturing-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isDerived" xmi:type="uml:Property" name="isDerived">
            <defaultValue xmi:id="Core-Features-Feature-isDerived-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-isDerived-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether the values of this &lt;code&gt;Feature&lt;/code&gt; can always be computed from the values of other &lt;code&gt;Features&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-isDerived"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-chainingFeature" xmi:type="uml:Property" isDerived="true" isOrdered="true" isUnique="false" name="chainingFeature">
            <association xmi:idref="Core-Features-A_chainingFeature_chainedFeature"/>
            <lowerValue xmi:id="Core-Features-Feature-chainingFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-chainingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that are chained together to determine the values of this &lt;code&gt;Feature&lt;/code&gt;, derived from the &lt;code&gt;chainingFeatures&lt;/code&gt; of the &lt;code&gt;ownedFeatureChainings&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;, in the same order. The values of a &lt;code&gt;Feature&lt;/code&gt; with &lt;code&gt;chainingFeatures&lt;/code&gt; are the same as values of the last &lt;code&gt;Feature&lt;/code&gt; in the chain, which can be found by starting with the values of the first &lt;code&gt;Feature&lt;/code&gt; (for each instance of the domain of the original &lt;code&gt;Feature&lt;/code&gt;), then using each of those as domain instances to find the values of the second &lt;code&gt;Feature&lt;/code&gt; in chainingFeatures, and so on, to values of the last &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-chainingFeature"/>
</ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Feature-chainingFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedFeatureInverting" xmi:type="uml:Property" isDerived="true" name="ownedFeatureInverting">
            <association xmi:idref="Core-Features-A_ownedFeatureInverting_owningFeature"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedFeatureInverting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedFeatureInverting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; that are &lt;code&gt;FeatureInvertings&lt;/code&gt; and for which the &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;featureInverted&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedFeatureInverting"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Features-A_invertingFeatureInverting_featureInverted-invertingFeatureInverting"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <type xmi:idref="Core-Features-FeatureInverting"/>
            <upperValue xmi:id="Core-Features-Feature-ownedFeatureInverting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedFeatureChaining" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedFeatureChaining">
            <association xmi:idref="Core-Features-A_ownedFeatureChaining_featureChained"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedFeatureChaining-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedFeatureChaining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; that are &lt;code&gt;FeatureChainings&lt;/code&gt;, for which the &lt;code&gt;Feature&lt;/code&gt; will be the &lt;code&gt;featureChained&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedFeatureChaining"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Core-Features-FeatureChaining"/>
            <upperValue xmi:id="Core-Features-Feature-ownedFeatureChaining-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isPortion" xmi:type="uml:Property" name="isPortion">
            <defaultValue xmi:id="Core-Features-Feature-isPortion-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-isPortion-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether the values of this &lt;code&gt;Feature&lt;/code&gt; are contained in the space and time of instances of the domain of the &lt;code&gt;Feature&lt;/code&gt; and represent the same thing as those instances.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-isPortion"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isVariable" xmi:type="uml:Property" name="isVariable">
            <defaultValue xmi:id="Core-Features-Feature-isVariable-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-isVariable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether the value of this &lt;code&gt;Feature&lt;/code&gt; might vary over time. That is, whether the &lt;code&gt;Feature&lt;/code&gt; may have a different value for each &lt;em&gt;&lt;code&gt;snapshot&lt;/code&gt;&lt;/em&gt; of an &lt;code&gt;owningType&lt;/code&gt; that is an &lt;em&gt;&lt;code&gt;Occurrence&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-isVariable"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-isConstant" xmi:type="uml:Property" name="isConstant">
            <defaultValue xmi:id="Core-Features-Feature-isConstant-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-isConstant-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If &lt;code&gt;isVariable&lt;/code&gt; is true, then whether the value of this &lt;code&gt;Feature&lt;/code&gt; nevertheless does not change over all &lt;code&gt;&lt;em&gt;snapshots&lt;/em&gt;&lt;/code&gt; of its &lt;code&gt;owningType&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-isConstant"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedReferenceSubsetting" xmi:type="uml:Property" isDerived="true" name="ownedReferenceSubsetting">
            <association xmi:idref="Core-Features-A_ownedReferenceSubsetting_referencingFeature"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedReferenceSubsetting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedReferenceSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The one &lt;code&gt;ownedSubsetting&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;, if any, that is a &lt;code&gt;ReferenceSubsetting&lt;/code&gt;, for which the &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;referencingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedReferenceSubsetting"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Feature-ownedSubsetting"/>
            <type xmi:idref="Core-Features-ReferenceSubsetting"/>
            <upperValue xmi:id="Core-Features-Feature-ownedReferenceSubsetting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-featureTarget" xmi:type="uml:Property" isDerived="true" name="featureTarget">
            <association xmi:idref="Core-Features-A_featureTarget_baseFeature"/>
            <lowerValue xmi:id="Core-Features-Feature-featureTarget-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-Feature-featureTarget-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The last of the &lt;code&gt;chainingFeatures&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;, if it has any. Otherwise, this &lt;code&gt;Feature&lt;/code&gt; itself.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-featureTarget"/>
            </ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Feature-featureTarget-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-crossFeature" xmi:type="uml:Property" isDerived="true" name="crossFeature">
            <association xmi:idref="Core-Features-A_crossFeature_featureCrossing"/>
            <lowerValue xmi:id="Core-Features-Feature-crossFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-crossFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The second &lt;code&gt;chainingFeature&lt;/code&gt; of the &lt;code&gt;crossedFeature&lt;/code&gt; of the &lt;code&gt;ownedCrossSubsetting&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;, if it has one. Semantically, the values of the &lt;code&gt;crossFeature&lt;/code&gt; of an end &lt;code&gt;Feature&lt;/code&gt; must include all values of the end &lt;code&gt;Feature&lt;/code&gt; obtained when navigating from values of the other end &lt;code&gt;Features&lt;/code&gt; of the same &lt;code&gt;owningType&lt;/code&gt;. &lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-crossFeature"/>
</ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Feature-crossFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-direction" xmi:type="uml:Property" name="direction">
            <lowerValue xmi:id="Core-Features-Feature-direction-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-direction-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Indicates how values of this &lt;code&gt;Feature&lt;/code&gt; are determined or used (as specified for the &lt;code&gt;FeatureDirectionKind&lt;/code&gt;).&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-direction"/>
            </ownedComment>
            <type xmi:idref="Core-Types-FeatureDirectionKind"/>
            <upperValue xmi:id="Core-Features-Feature-direction-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Feature-ownedCrossSubsetting" xmi:type="uml:Property" isDerived="true" name="ownedCrossSubsetting">
            <association xmi:idref="Core-Features-A_ownedCrossSubsetting_crossingFeature"/>
            <lowerValue xmi:id="Core-Features-Feature-ownedCrossSubsetting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Feature-ownedCrossSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The one &lt;code&gt;ownedSubsetting&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;, if any, that is a &lt;code&gt;CrossSubsetting}, for which the &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;crossingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedCrossSubsetting"/>
</ownedComment>
            <subsettedProperty xmi:idref="Core-Features-Feature-ownedSubsetting"/>
            <type xmi:idref="Core-Features-CrossSubsetting"/>
            <upperValue xmi:id="Core-Features-Feature-ownedCrossSubsetting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; is a &lt;code&gt;Type&lt;/code&gt; that classifies relations between multiple things (in the universe). The domain of the relation is the intersection of the &lt;code&gt;featuringTypes&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt;. (The domain of a &lt;code&gt;Feature&lt;/code&gt; with no &lt;code&gt;featuringTyps&lt;/code&gt; is implicitly the most general &lt;code&gt;Type&lt;/code&gt; &lt;em&gt;&lt;code&gt;Base::Anything&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.) The co-domain of the relation is the intersection of the &lt;code&gt;types&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt;.  &lt;p&gt;In the simplest cases, the &lt;code&gt;featuringTypes&lt;/code&gt; and &lt;code&gt;types&lt;/code&gt; are &lt;code&gt;Classifiers&lt;/code&gt; and the &lt;code&gt;Feature&lt;/code&gt; relates two things, one from the domain and one from the range. Examples include cars paired with wheels, people paired with other people, and cars paired with numbers representing the car length.&lt;/p&gt;  &lt;p&gt;Since &lt;code&gt;Features&lt;/code&gt; are &lt;code&gt;Types&lt;/code&gt;, their &lt;code&gt;featuringTypes&lt;/code&gt; and &lt;code&gt;types&lt;/code&gt; can be &lt;code&gt;Features&lt;/code&gt;. In this case, the &lt;code&gt;Feature&lt;/code&gt; effectively classifies relations between relations, which can be interpreted as the sequence of things related by the domain &lt;code&gt;Feature&lt;/code&gt; concatenated with the sequence of things related by the co-domain &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;The &lt;em&gt;values&lt;/em&gt; of a &lt;code&gt;Feature&lt;/code&gt; for a given instance of its domain are all the instances of its co-domain that are related to that domain instance by the &lt;code&gt;Feature&lt;/code&gt;. The values of a &lt;code&gt;Feature&lt;/code&gt; with &lt;code&gt;chainingFeatures&lt;/code&gt; are the same as values of the last &lt;code&gt;Feature&lt;/code&gt; in the chain, which can be found by starting with values of the first &lt;code&gt;Feature&lt;/code&gt;, then using those values as domain instances to obtain valus of the second &lt;code&gt;Feature&lt;/code&gt;, and so on, to values of the last &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Features-Feature"/>
</ownedComment>
          <ownedOperation xmi:id="Core-Features-Feature-directionFor_Type" xmi:type="uml:Operation" name="directionFor">
            <bodyCondition xmi:id="Core-Features-Feature-directionFor_Type-directionForBody" xmi:type="uml:Constraint" name="directionForBody">
              <specification xmi:id="Core-Features-Feature-directionFor_Type-directionForBody-specification0" xmi:type="uml:OpaqueExpression" body="type.directionOf(self)" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-directionFor_Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the &lt;code&gt;directionOf&lt;/code&gt; this &lt;code&gt;Feature&lt;/code&gt; relative to the given &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-directionFor_Type"/>
            </ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-directionFor_Type-type" xmi:type="uml:Parameter" name="type">
              <type xmi:idref="Core-Types-Type"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-directionFor_Type-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-directionFor_Type--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-FeatureDirectionKind"/>
              <upperValue xmi:id="Core-Features-Feature-directionFor_Type--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-directionFor_Type-directionForBody"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-effectiveShortName_" xmi:type="uml:Operation" name="effectiveShortName">
            <bodyCondition xmi:id="Core-Features-Feature-effectiveShortName_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-effectiveShortName_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if declaredShortName &lt;&gt; null or declaredName &lt;&gt; null then     declaredShortName else     let namingFeature : Feature = namingFeature() in     if namingFeature = null then         null     else         namingFeature.effectiveShortName()     endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-effectiveShortName_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has no &lt;code&gt;declaredShortName&lt;/code&gt; or &lt;code&gt;declaredName&lt;/code&gt;, then its effective &lt;code&gt;shortName&lt;/code&gt; is given by the effective &lt;code&gt;shortName&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt; returned by the &lt;code&gt;namingFeature()&lt;/code&gt; operation, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-effectiveShortName_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-effectiveShortName_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-effectiveShortName_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
              <upperValue xmi:id="Core-Features-Feature-effectiveShortName_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-effectiveShortName_-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Elements-Element-effectiveShortName_"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-effectiveName_" xmi:type="uml:Operation" name="effectiveName">
            <bodyCondition xmi:id="Core-Features-Feature-effectiveName_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-effectiveName_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if declaredShortName &lt;&gt; null or declaredName &lt;&gt; null then     declaredName else     let namingFeature : Feature = namingFeature() in     if namingFeature = null then         null     else         namingFeature.effectiveName()     endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-effectiveName_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has no &lt;code&gt;declaredName&lt;/code&gt; or &lt;code&gt;declaredShortName&lt;/code&gt; , then its effective &lt;code&gt;name&lt;/code&gt; is given by the effective &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt; returned by the &lt;code&gt;namingFeature()&lt;/code&gt; operation, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-effectiveName_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-effectiveName_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-effectiveName_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
              <upperValue xmi:id="Core-Features-Feature-effectiveName_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-effectiveName_-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Elements-Element-effectiveName_"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-namingFeature_" xmi:type="uml:Operation" name="namingFeature">
            <bodyCondition xmi:id="Core-Features-Feature-namingFeature_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-namingFeature_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if ownedRedefinition-&gt;isEmpty() then null else ownedRedefinition-&gt;at(1).redefinedFeature endif" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-namingFeature_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;By default, the naming &lt;code&gt;Feature&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; is given by its first &lt;code&gt;redefinedFeature&lt;/code&gt; of its first &lt;code&gt;ownedRedefinition&lt;/code&gt;, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-namingFeature_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-namingFeature_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-namingFeature_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Core-Features-Feature-namingFeature_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-namingFeature_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-supertypes_Boolean" xmi:type="uml:Operation" name="supertypes">
            <bodyCondition xmi:id="Core-Features-Feature-supertypes_Boolean-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-supertypes_Boolean-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let supertypes : OrderedSet(Type) =      self.oclAsType(Type).supertypes(excludeImplied) in if featureTarget = self then supertypes else supertypes-&gt;append(featureTarget) endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedParameter xmi:id="Core-Features-Feature-supertypes_Boolean-excludeImplied" xmi:type="uml:Parameter" name="excludeImplied">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-supertypes_Boolean-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-supertypes_Boolean--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Features-Feature-supertypes_Boolean--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-supertypes_Boolean-unnamed1"/>
            <redefinedOperation xmi:idref="Core-Types-Type-supertypes_Boolean"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-redefines_Feature" xmi:type="uml:Operation" name="redefines">
            <bodyCondition xmi:id="Core-Features-Feature-redefines_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-redefines_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="ownedRedefinition.redefinedFeature-&gt;includes(redefinedFeature)" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-redefines_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check whether this &lt;code&gt;Feature&lt;/code&gt; &lt;em&gt;directly&lt;/em&gt; redefines the given &lt;code&gt;redefinedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-redefines_Feature"/>
            </ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-redefines_Feature-redefinedFeature" xmi:type="uml:Parameter" name="redefinedFeature">
              <type xmi:idref="Core-Features-Feature"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-redefines_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-redefines_Feature-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-redefinesFromLibrary_String" xmi:type="uml:Operation" name="redefinesFromLibrary">
            <bodyCondition xmi:id="Core-Features-Feature-redefinesFromLibrary_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-redefinesFromLibrary_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let mem: Membership = resolveGlobal(libraryFeatureName) in mem &lt;&gt; null and mem.memberElement.oclIsKindOf(Feature) and redefines(mem.memberElement.oclAsType(Feature))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-redefinesFromLibrary_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check whether this &lt;code&gt;Feature&lt;/code&gt; &lt;em&gt;directly&lt;/em&gt; redefines the named library &lt;code&gt;Feature&lt;/code&gt;. &lt;code&gt;libraryFeatureName&lt;/code&gt; must conform to the syntax of a KerML qualified name and must resolve to a &lt;code&gt;Feature&lt;/code&gt; in global scope.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-redefinesFromLibrary_String"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-redefinesFromLibrary_String-libraryFeatureName" xmi:type="uml:Parameter" name="libraryFeatureName">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-redefinesFromLibrary_String-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-redefinesFromLibrary_String-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-subsetsChain_Feature_Feature" xmi:type="uml:Operation" name="subsetsChain">
            <bodyCondition xmi:id="Core-Features-Feature-subsetsChain_Feature_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-subsetsChain_Feature_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="allSuperTypes()-&gt;selectAsKind(Feature)-&gt;     exists(f | let n: Integer = f.chainingFeature-&gt;size() in         n &gt;= 2 and         f.chainingFeature-&gt;at(n-1) = first and         f.chainingFeature-&gt;at(n) = second)" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-subsetsChain_Feature_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check whether this &lt;code&gt;Feature&lt;/code&gt; directly or indirectly specializes a &lt;code&gt;Feature&lt;/code&gt; whose last two &lt;code&gt;chainingFeatures&lt;/code&gt; are the given &lt;code&gt;Features&lt;/code&gt; &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-subsetsChain_Feature_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-subsetsChain_Feature_Feature-first" xmi:type="uml:Parameter" name="first">
              <type xmi:idref="Core-Features-Feature"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-subsetsChain_Feature_Feature-second" xmi:type="uml:Parameter" name="second">
              <type xmi:idref="Core-Features-Feature"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-subsetsChain_Feature_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-subsetsChain_Feature_Feature-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-isCompatibleWith_Type" xmi:type="uml:Operation" name="isCompatibleWith">
            <bodyCondition xmi:id="Core-Features-Feature-isCompatibleWith_Type-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-isCompatibleWith_Type-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="specializes(otherType) or     supertype.oclIsKindOf(Feature) and     ownedFeature-&gt;isEmpty() and     otherType.ownedFeature-&gt;isEmpty() and     ownedRedefinitions.allRedefinedFeatures()-&gt;exists(f |           otherType.oclAsType(Feature).allRedefinedFeatures()-&gt;includes(f)) and     canAccess(otherType.oclAsType(Feature))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-isCompatibleWith_Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; is compatible with an &lt;code&gt;otherType&lt;/code&gt; if it either directly or indirectly specializes the &lt;code&gt;otherType&lt;/code&gt; or if the &lt;code&gt;otherType&lt;/code&gt; is also a &lt;code&gt;Feature&lt;/code&gt; and all of the following are true.&lt;/p&gt; &lt;ol&gt;  &lt;li&gt;Neither this &lt;code&gt;Feature&lt;/code&gt; or the &lt;code&gt;otherType&lt;/code&gt; have any &lt;code&gt;ownedFeatures&lt;/code&gt;.&lt;/li&gt;  &lt;li&gt;This &lt;code&gt;Feature&lt;/code&gt; directly or indirectly redefines a &lt;code&gt;Feature&lt;/code&gt; that is also directly or indirectly redefined by the &lt;code&gt;otherType&lt;/code&gt;.&lt;/li&gt;  &lt;li&gt;This &lt;code&gt;Feature&lt;/code&gt; can access the &lt;code&gt;otherType&lt;/code&gt;. &lt;/li&gt;&lt;/ol&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-isCompatibleWith_Type"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-isCompatibleWith_Type-otherType" xmi:type="uml:Parameter" name="otherType">
              <type xmi:idref="Core-Types-Type"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-isCompatibleWith_Type-unnamed1"/>
            <redefinedOperation xmi:idref="Core-Types-Type-isCompatibleWith_Type"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-typingFeatures_" xmi:type="uml:Operation" name="typingFeatures">
            <bodyCondition xmi:id="Core-Features-Feature-typingFeatures_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-typingFeatures_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if not isConjugated then     let subsettedFeatures : OrderedSet(Feature) =          subsetting-&gt;reject(s | s.oclIsKindOf(CrossSubsetting)).subsettedFeatures in      if chainingFeature-&gt;isEmpty() or        subsettedFeature-&gt;includes(chainingFeature-&gt;last())     then subsettedFeatures     else subsettedFeatures-&gt;append(chainingFeature-&gt;last())     endif else if conjugator.originalType.oclIsKindOf(Feature) then     OrderedSet{conjugator.originalType.oclAsType(Feature)} else OrderedSet{} endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-typingFeatures_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the &lt;code&gt;Features&lt;/code&gt; used to determine the &lt;code&gt;types&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; (other than this &lt;code&gt;Feature&lt;/code&gt; itself). If this &lt;code&gt;Feature&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; conjugated, then the &lt;code&gt;typingFeatures&lt;/code&gt; consist of all subsetted &lt;code&gt;Features&lt;/code&gt;, &lt;em&gt;except&lt;/em&gt; from &lt;code&gt;CrossSubsetting&lt;/code&gt;, and the last &lt;code&gt;chainingFeature&lt;/code&gt; (if any). If this &lt;code&gt;Feature&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; conjugated, then the &lt;code&gt;typingFeatures&lt;/code&gt; are only its &lt;code&gt;originalType&lt;/code&gt; (if the &lt;code&gt;originalType&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt;).&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; &lt;code&gt;CrossSubsetting&lt;/code&gt; is excluded from the determination of the &lt;code&gt;type&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; in order to avoid circularity in the construction of implied &lt;code&gt;CrossSubsetting&lt;/code&gt; relationships. The &lt;code&gt;validateFeatureCrossFeatureType&lt;/code&gt; requires that the &lt;code&gt;crossFeature&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; have the same &lt;code&gt;type&lt;/code&gt; as the &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Feature-typingFeatures_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-typingFeatures_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-typingFeatures_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Core-Features-Feature-typingFeatures_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-typingFeatures_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-asCartesianProduct_" xmi:type="uml:Operation" name="asCartesianProduct">
            <bodyCondition xmi:id="Core-Features-Feature-asCartesianProduct_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-asCartesianProduct_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="featuringType-&gt;select(t | t.owner &lt;&gt; self)-&gt;     union(featuringType-&gt;select(t | t.owner = self)-&gt;         selectByKind(Feature).asCartesianProduct())-&gt;     union(type)" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-asCartesianProduct_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If &lt;code&gt;isCartesianProduct&lt;/code&gt; is true, then return the list of &lt;code&gt;Types&lt;/code&gt; whose Cartesian product can be represented by this &lt;code&gt;Feature&lt;/code&gt;. (If &lt;code&gt;isCartesianProduct&lt;/code&gt; is not true, the operation will still return a valid value, it will just not represent anything useful.)&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-asCartesianProduct_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-asCartesianProduct_-" xmi:type="uml:Parameter" isOrdered="true" isUnique="false" name="">
              <lowerValue xmi:id="Core-Features-Feature-asCartesianProduct_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Features-Feature-asCartesianProduct_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-asCartesianProduct_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-isCartesianProduct_" xmi:type="uml:Operation" name="isCartesianProduct">
            <bodyCondition xmi:id="Core-Features-Feature-isCartesianProduct_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-isCartesianProduct_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="type-&gt;size() = 1 and featuringType.size() = 1 and (featuringType.first().owner = self implies     featuringType.first().oclIsKindOf(Feature) and     featuringType.first().oclAsType(Feature).isCartesianProduct())" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-isCartesianProduct_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Check whether this &lt;code&gt;Feature&lt;/code&gt; can be used to represent a Cartesian product of &lt;code&gt;Types&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-isCartesianProduct_"/>
            </ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-isCartesianProduct_-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-isCartesianProduct_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-isOwnedCrossFeature_" xmi:type="uml:Operation" name="isOwnedCrossFeature">
            <bodyCondition xmi:id="Core-Features-Feature-isOwnedCrossFeature_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-isOwnedCrossFeature_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="owningNamespace &lt;&gt; null and owningNamespace.oclIsKindOf(Feature) and owningNamespace.oclAsType(Feature).ownedCrossFeature() = self" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-isOwnedCrossFeature_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return whether this &lt;code&gt;Feature&lt;/code&gt; is an owned cross &lt;code&gt;Feature&lt;/code&gt; of an end &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-isOwnedCrossFeature_"/>
            </ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-isOwnedCrossFeature_-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-isOwnedCrossFeature_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-ownedCrossFeature_" xmi:type="uml:Operation" name="ownedCrossFeature">
            <bodyCondition xmi:id="Core-Features-Feature-ownedCrossFeature_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-ownedCrossFeature_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if not isEnd or owningType = null then null else     let ownedMemberFeatures: Sequence(Feature) =         ownedMember-&gt;selectByKind(Feature)-&gt;             reject(oclIsKindOf(Multiplicity) or                     oclIsKindOf(MetadataFeature) or                    oclIsKindOf(FeatureValue))-&gt;             reject(owningMembership.oclIsKindOf(FeatureMembership)) in     if ownedMemberFeatures.isEmpty() then null     else ownedMemberFeatures-&gt;first()     endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-ownedCrossFeature_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Feature&lt;/code&gt; is an end &lt;code&gt;Feature&lt;/code&gt; of its &lt;code&gt;owningType&lt;/code&gt;, then return the first &lt;code&gt;ownedMember&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt; that is a &lt;code&gt;Feature&lt;/code&gt;, but not a &lt;code&gt;Multiplicity&lt;/code&gt; or a &lt;code&gt;MetadataFeature&lt;/code&gt;, and whose &lt;code&gt;owningMembership&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a &lt;code&gt;FeatureMembership&lt;/code&gt;. If this exists, it is the &lt;code&gt;crossFeature&lt;/code&gt; of the end &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-ownedCrossFeature_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-ownedCrossFeature_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-ownedCrossFeature_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Core-Features-Feature-ownedCrossFeature_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-ownedCrossFeature_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-allRedefinedFeatures_" xmi:type="uml:Operation" name="allRedefinedFeatures">
            <bodyCondition xmi:id="Core-Features-Feature-allRedefinedFeatures_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-allRedefinedFeatures_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="ownedRedefinition.redefinedFeature-&gt; closure(ownedRedefinition.redefinedFeature)-&gt; asOrderedSet()-&gt;prepend(self) " language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-allRedefinedFeatures_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return this &lt;code&gt;Feature&lt;/code&gt; and all the &lt;code&gt;Features&lt;/code&gt; that are directly or indirectly &lt;code&gt;Redefined&lt;/code&gt; by this &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-allRedefinedFeatures_"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-allRedefinedFeatures_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Core-Features-Feature-allRedefinedFeatures_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Features-Feature"/>
              <upperValue xmi:id="Core-Features-Feature-allRedefinedFeatures_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-allRedefinedFeatures_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-isFeaturedWithin_Type" xmi:type="uml:Operation" name="isFeaturedWithin">
            <bodyCondition xmi:id="Core-Features-Feature-isFeaturedWithin_Type-isFeaturedWithIn_Body" xmi:type="uml:Constraint" name="isFeaturedWithIn_Body">
              <specification xmi:id="Core-Features-Feature-isFeaturedWithin_Type-isFeaturedWithIn_Body-specification0" xmi:type="uml:OpaqueExpression" body="if type = null then     featuringType-&gt;forAll(f | f = resolveGlobal('Base::Anything').memberElement) else     featuringType-&gt;forAll(f | type.isCompatibleWith(f)) or     isVariable and type.specializes(owningType) or     chainingFeature-&gt;notEmpty() and chainingFeature-&gt;first().isVariable and         type.specializes(chainingFeature-&gt;first().owningType) endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-isFeaturedWithin_Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return if the &lt;code&gt;featuringTypes&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt; are compatible with the given &lt;code&gt;type&lt;/code&gt;. If &lt;code&gt;type&lt;/code&gt; is null, then check if this &lt;code&gt;Feature&lt;/code&gt; is explicitly or implicitly featured by &lt;em&gt;&lt;code&gt;Base::Anything&lt;/code&gt;&lt;/em&gt;. If this &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;isVariable = true&lt;/code&gt;, then also consider it to be featured within its &lt;code&gt;owningType&lt;/code&gt;. If this &lt;code&gt;Feature&lt;/code&gt; is a feature chain whose first &lt;code&gt;chainingFeature&lt;/code&gt; has &lt;code&gt;isVariable = true&lt;/code&gt;, then also consider it to be featured within the &lt;code&gt;owningType&lt;/code&gt; of its first &lt;code&gt;chainingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-isFeaturedWithin_Type"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-isFeaturedWithin_Type-type" xmi:type="uml:Parameter" name="type">
              <lowerValue xmi:id="Core-Features-Feature-isFeaturedWithin_Type-type-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Core-Types-Type"/>
              <upperValue xmi:id="Core-Features-Feature-isFeaturedWithin_Type-type-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-isFeaturedWithin_Type-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-isFeaturedWithin_Type-isFeaturedWithIn_Body"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-canAccess_Feature" xmi:type="uml:Operation" name="canAccess">
            <bodyCondition xmi:id="Core-Features-Feature-canAccess_Feature-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-canAccess_Feature-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let anythingType: Element =     subsettingFeature.resolveGlobal('Base::Anything').memberElement in let allFeaturingTypes : Sequence(Type) =     featuringTypes-&gt;closure(t |         if not t.oclIsKindOf(Feature) then Sequence{}         else             let featuringTypes : OrderedSet(Type) = t.oclAsType(Feature).featuringType in             if featuringTypes-&gt;isEmpty() then Sequence{anythingType}             else featuringTypes             endif          endif) in allFeaturingTypes-&gt;exists(t | feature.isFeaturedWithin(t))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-canAccess_Feature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; can access another &lt;code&gt;feature&lt;/code&gt; if the other &lt;code&gt;feature&lt;/code&gt; is featured within one of the direct or indirect &lt;code&gt;featuringTypes&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-canAccess_Feature"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-canAccess_Feature-feature" xmi:type="uml:Parameter" name="feature">
              <type xmi:idref="Core-Features-Feature"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-canAccess_Feature-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-canAccess_Feature-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Core-Features-Feature-isFeaturingType_Type" xmi:type="uml:Operation" name="isFeaturingType">
            <bodyCondition xmi:id="Core-Features-Feature-isFeaturingType_Type-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Core-Features-Feature-isFeaturingType_Type-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="owningType &lt;&gt; null and if not isVariable then type = owningType else if owningType = resolveGlobal('Occurrences::Occurrence').memberElement then     type = resolveGlobal('Occurrences::Occurrence::snapshots').memberElement  else      type.oclIsKindOf(Feature) and     let feature : Feature = type.oclAsType(Feature) in     feature.featuringType-&gt;includes(owningType) and     feature.redefinesFromLibrary('Occurrences::Occurrence::snapshots') endif " language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Core-Features-Feature-isFeaturingType_Type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return whether the given &lt;code&gt;type&lt;/code&gt; must be a &lt;code&gt;featuringType&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;. If this &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;isVariable = false&lt;/code&gt;, then return true if the &lt;code&gt;type&lt;/code&gt; is the &lt;code&gt;owningType&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt;. If &lt;code&gt;isVariable = true&lt;/code&gt;, then return true if the &lt;code&gt;type&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt; representing the &lt;em&gt;&lt;code&gt;snapshots&lt;/code&gt;&lt;/em&gt; of the &lt;code&gt;owningType&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-isFeaturingType_Type"/>
</ownedComment>
            <ownedParameter xmi:id="Core-Features-Feature-isFeaturingType_Type-type" xmi:type="uml:Parameter" name="type">
              <type xmi:idref="Core-Types-Type"/>
            </ownedParameter>
            <ownedParameter xmi:id="Core-Features-Feature-isFeaturingType_Type-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Core-Features-Feature-isFeaturingType_Type-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureEndNoDirection" xmi:type="uml:Constraint" name="validateFeatureEndNoDirection">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureEndNoDirection-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; with &lt;code&gt;isEnd = true&lt;/code&gt; must have no direction.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureEndNoDirection"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureEndNoDirection-specification0" xmi:type="uml:OpaqueExpression" body="isEnd implied direction = null" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureCrossingSpecialization" xmi:type="uml:Constraint" name="checkFeatureCrossingSpecialization">
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureCrossingSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;isEnd = true&lt;/code&gt; and &lt;code&gt;ownedCrossFeature&lt;/code&gt; returns a non-null value, then the &lt;code&gt;crossFeature&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt; must be the &lt;code&gt;Feature&lt;/code&gt; returned from &lt;code&gt;ownedCrossFeature&lt;/code&gt; (which implies that this &lt;code&gt;Feature&lt;/code&gt; has an appropriate &lt;code&gt;ownedCrossSubsetting&lt;/code&gt; to realize this).&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureCrossingSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureCrossingSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedCrossFeature() &lt;&gt; null implies crossFeature = ownedCrossFeature()" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureEndIsConstant" xmi:type="uml:Constraint" name="validateFeatureEndIsConstant">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureEndIsConstant-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; with &lt;code&gt;isEnd = true&lt;/code&gt; and &lt;code&gt;isVariable = true&lt;/code&gt; must have &lt;code&gt;isConstant = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureEndIsConstant"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureEndIsConstant-specification0" xmi:type="uml:OpaqueExpression" body="isEnd and isVariable implies isConstant" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureObjectSpecialization" xmi:type="uml:Constraint" name="checkFeatureObjectSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureObjectSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has an &lt;code&gt;ownedTyping&lt;/code&gt; relationship to a &lt;code&gt;Structure&lt;/code&gt;, then it must directly or indirectly specialize &lt;code&gt;&lt;em&gt;Objects::objects&lt;/em&gt;&lt;/code&gt; from the Kernel Semantics Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureObjectSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureObjectSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedTyping.type-&gt;exists(selectByKind(Structure)) implies specializesFromLibary('Objects::objects')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedFeatureChaining" xmi:type="uml:Constraint" name="deriveFeatureOwnedFeatureChaining">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedFeatureChaining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedFeatureChainings&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are the &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;FeatureChainings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedFeatureChaining"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedFeatureChaining-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeatureChaining = ownedRelationship-&gt;selectByKind(FeatureChaining)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureOccurrenceSpecialization" xmi:type="uml:Constraint" name="checkFeatureOccurrenceSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureOccurrenceSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has an &lt;code&gt;ownedTyping&lt;/code&gt; relationship to a &lt;code&gt;Class&lt;/code&gt;, then it must directly or indirectly specialize &lt;code&gt;&lt;em&gt;Occurrences::occurrences&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureOccurrenceSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureOccurrenceSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedTyping.type-&gt;exists(selectByKind(Class)) implies specializesFromLibrary('Occurrences::occurrences')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedFeatureInverting" xmi:type="uml:Constraint" name="deriveFeatureOwnedFeatureInverting">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedFeatureInverting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedFeatureInvertings&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are its &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;FeatureInvertings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedFeatureInverting"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedFeatureInverting-specification0" xmi:type="uml:OpaqueExpression" body="ownedFeatureInverting = ownedRelationship-&gt;selectByKind(FeatureInverting)-&gt; select(fi | fi.featureInverted = self)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureIsVariable" xmi:type="uml:Constraint" name="validateFeatureIsVariable">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureIsVariable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; with &lt;code&gt;isVariable = true&lt;/code&gt; must have an &lt;code&gt;owningType&lt;/code&gt; that directly or indirectly specializes the &lt;code&gt;Class&lt;/code&gt; &lt;em&gt;&lt;code&gt;Occurrences::Occurrence&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureIsVariable"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureIsVariable-specification0" xmi:type="uml:OpaqueExpression" body="isVariable implies owningType &lt;&gt; null and owningType.specializes('Occurrences::Occurrence')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureParameterRedefinition" xmi:type="uml:Constraint" name="checkFeatureParameterRedefinition">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureParameterRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; is a &lt;code&gt;parameter&lt;/code&gt; of an &lt;code&gt;owningType&lt;/code&gt; that is a &lt;code&gt;Behavior&lt;/code&gt; or &lt;code&gt;Step&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; &lt;/p&gt; &lt;ul&gt;     &lt;li&gt;A &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;A &lt;code&gt;parameter&lt;/code&gt; of an &lt;code&gt;InvocationExpression&lt;/code&gt;, with at least one non-implied &lt;code&gt;ownedRedefinition&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;then, for each direct supertype of its &lt;code&gt;owningType&lt;/code&gt; that is also a &lt;code&gt;Behavior&lt;/code&gt; or &lt;code&gt;Step&lt;/code&gt;, it must redefine the &lt;code&gt;parameter&lt;/code&gt; at the same position, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureParameterRedefinition"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureParameterRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="owningType &lt;&gt; null and not owningFeatureMembership.     oclIsKindOf(ReturnParameterMembership) and (owningType.oclIsKindOf(Behavior) or  owningType.oclIsKindOf(Step) and     (owningType.oclIsKindOf(InvocationExpression) implies       not ownedRedefinition-&gt;exists(not isImplied))  implies     let i : Integer =         owningType.ownedFeature-&gt;select(direction &lt;&gt; null)-&gt;             reject(owningFeatureMembership.                 oclIsKindOf(ReturnParameterMembership))-&gt;             indexOf(self) in     owningType.ownedSpecialization.general-&gt;         forAll(supertype |             let ownedParameters : Sequence(Feature) =                 supertype.ownedFeature-&gt;select(direction &lt;&gt; null)-&gt;                      reject(owningFeatureMembership.                          oclIsKindOf(ReturnParameterMembership)) in             ownedParameters-&gt;size() &gt;= i implies                 redefines(ownedParameters-&gt;at(i))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedRedefinition" xmi:type="uml:Constraint" name="deriveFeatureOwnedRedefinition">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRedefinitions&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are its &lt;code&gt;ownedSubsettings&lt;/code&gt; that are &lt;code&gt;Redefinitions&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedRedefinition"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="ownedRedefinition = ownedSubsetting-&gt;selectByKind(Redefinition)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureChainingFeatureNotOne" xmi:type="uml:Constraint" name="validateFeatureChainingFeatureNotOne">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureChainingFeatureNotOne-_comment.0" xmi:type="uml:Comment" body="A &lt;code&gt;Feature&lt;/code&gt; must have either no &lt;code&gt;chainingFeatures&lt;/code&gt; or more than one.">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureChainingFeatureNotOne"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureChainingFeatureNotOne-specification0" xmi:type="uml:OpaqueExpression" body="chainingFeature-&gt;size() &lt;&gt; 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureChainingFeature" xmi:type="uml:Constraint" name="deriveFeatureChainingFeature">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureChainingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;chainingFeatures&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are the &lt;code&gt;chainingFeatures&lt;/code&gt; of its &lt;code&gt;ownedFeatureChainings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureChainingFeature"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureChainingFeature-specification0" xmi:type="uml:OpaqueExpression" body="chainingFeature = ownedFeatureChaining.chainingFeature" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureEndRedefinition" xmi:type="uml:Constraint" name="checkFeatureEndRedefinition">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureEndRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;isEnd = true&lt;/code&gt; and an &lt;code&gt;owningType&lt;/code&gt; that is not empty, then, for each direct supertype of its &lt;code&gt;owningType&lt;/code&gt;, it must redefine the &lt;code&gt;endFeature&lt;/code&gt; at the same position, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureEndRedefinition"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureEndRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="isEnd and owningType &lt;&gt; null implies     let i : Integer =          owningType.ownedEndFeature-&gt;indexOf(self) in     owningType.ownedSpecialization.general-&gt;         forAll(supertype |              supertype.endFeature-&gt;size() &gt;= i implies                 redefines(supertype.endFeature-&gt;at(i))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureValuationSpecialization" xmi:type="uml:Constraint" name="checkFeatureValuationSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureValuationSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has a &lt;code&gt;FeatureValue&lt;/code&gt;, no &lt;code&gt;ownedSpecializations&lt;/code&gt; that are not implied, and is not directed, then it must specialize the &lt;code&gt;result&lt;/code&gt; of the &lt;code&gt;value&lt;/code&gt; &lt;code&gt;Expression&lt;/code&gt; of the &lt;code&gt;FeatureValue&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureValuationSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureValuationSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="direction = null and ownedSpecializations-&gt;forAll(isImplied) implies     ownedMembership-&gt;         selectByKind(FeatureValue)-&gt;         forAll(fv | specializes(fv.value.result))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureSpecialization" xmi:type="uml:Constraint" name="checkFeatureOwnedCrossFeatureSpecialization">
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;ownedCrossFeature&lt;/code&gt; of an end &lt;code&gt;Feature&lt;/code&gt;, then it must directly or indirectly specialize the &lt;code&gt;types&lt;/code&gt; of its owning end &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureOwnedCrossFeatureSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isOwnedCrossFeature() implies owner.oclAsType(Feature).type-&gt;forAll(t | self.specializes(t))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureCrossFeatureType" xmi:type="uml:Constraint" name="validateFeatureCrossFeatureType">
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureCrossFeatureType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;crossFeature&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; must have the same &lt;code&gt;types&lt;/code&gt; as the &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureCrossFeatureType"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureCrossFeatureType-specification0" xmi:type="uml:OpaqueExpression" body="crossFeature &lt;&gt; null implies crossFeature.type-&gt;asSet() = type-&gt;asSet()" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureMultiplicityDomain" xmi:type="uml:Constraint" name="validateFeatureMultiplicityDomain">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureMultiplicityDomain-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has a &lt;code&gt;multiplicity&lt;/code&gt;, then the &lt;code&gt;featuringTypes&lt;/code&gt; of the &lt;code&gt;multiplicity&lt;/code&gt; must be the same as those of the &lt;code&gt;Feature&lt;/code&gt; itself.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureMultiplicityDomain"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureMultiplicityDomain-specification0" xmi:type="uml:OpaqueExpression" body="multiplicity &lt;&gt; null implies multiplicity.featuringType = featuringType " language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureChainingFeatureConformance" xmi:type="uml:Constraint" name="validateFeatureChainingFeatureConformance">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureChainingFeatureConformance-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Each &lt;code&gt;chainingFeature&lt;/code&gt; (other than the first) must be featured within the previous &lt;code&gt;chainingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureChainingFeatureConformance"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureChainingFeatureConformance-specification0" xmi:type="uml:OpaqueExpression" body="Sequence{2..chainingFeature-&gt;size()}-&gt;forAll(i | chainingFeature-&gt;at(i).isFeaturedWithin(chainingFeature-&gt;at(i-1))) " language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureCrossFeature" xmi:type="uml:Constraint" name="deriveFeatureCrossFeature">
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureCrossFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;crossFeature&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; is the second &lt;code&gt;chainingFeature&lt;/code&gt; of the &lt;code&gt;crossedFeature&lt;/code&gt; of the &lt;code&gt;ownedCrossSubsetting&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt;, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureCrossFeature"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureCrossFeature-specification0" xmi:type="uml:OpaqueExpression" body="crossFeature =     if ownedCrossSubsetting = null then null     else          let chainingFeatures: Sequence(Feature) =              ownedCrossSubsetting.crossedFeature.chainingFeature in         if chainingFeatures-&gt;size() &lt; 2 then null         else chainingFeatures-&gt;at(2)     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureConstantIsVariable" xmi:type="uml:Constraint" name="validateFeatureConstantIsVariable">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureConstantIsVariable-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; with &lt;code&gt;isConstant = true&lt;/code&gt; must have &lt;code&gt;isVariable = true&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureConstantIsVariable"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureConstantIsVariable-specification0" xmi:type="uml:OpaqueExpression" body="isConstant implies isVariable" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeaturePortionNotVariable" xmi:type="uml:Constraint" name="validateFeaturePortionNotVariable">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <specification xmi:id="Core-Features-Feature-validateFeaturePortionNotVariable-specification0" xmi:type="uml:OpaqueExpression" body="isPortion implies not isVariable" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedSubsetting" xmi:type="uml:Constraint" name="deriveFeatureOwnedSubsetting">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedSubsettings&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are its &lt;code&gt;ownedSpecializations&lt;/code&gt; that are &lt;code&gt;Subsettings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedSubsetting"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedSubsetting-specification0" xmi:type="uml:OpaqueExpression" body="ownedSubsetting = ownedSpecialization-&gt;selectByKind(Subsetting)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureChainingFeaturesNotSelf" xmi:type="uml:Constraint" name="validateFeatureChainingFeaturesNotSelf">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureChainingFeaturesNotSelf-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; cannot be one of its own &lt;code&gt;chainingFeatures&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureChainingFeaturesNotSelf"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureChainingFeaturesNotSelf-specification0" xmi:type="uml:OpaqueExpression" body="chainingFeature-&gt;excludes(self)" language="English" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedCrossSubsetting" xmi:type="uml:Constraint" name="deriveFeatureOwnedCrossSubsetting">
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedCrossSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedCrossSubsetting&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;ownedSubsetting&lt;/code&gt; that is a &lt;code&gt;CrossSubsetting&lt;/code&gt;, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedCrossSubsetting"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedCrossSubsetting-specification0" xmi:type="uml:OpaqueExpression" body="ownedCrossSubsetting =     let crossSubsettings: Sequence(CrossSubsetting) =          ownedSubsetting-&gt;selectByKind(CrossSubsetting) in     if crossSubsettings-&gt;isEmpty() then null     else crossSubsettings-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureFeaturingType" xmi:type="uml:Constraint" name="deriveFeatureFeaturingType">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureFeaturingType-_comment.0" xmi:type="uml:Comment" body="The &lt;code&gt;featuringTypes&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; include the &lt;code&gt;featuringTypes&lt;/code&gt; of all the &lt;code&gt;typeFeaturings&lt;/code&gt; of the &lt;code&gt;Feature&lt;/code&gt;. If the &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;chainingFeatures&lt;/code&gt;, then its &lt;code&gt;featuringTypes&lt;/code&gt; also include the &lt;code&gt;featuringTypes&lt;/code&gt; of the first &lt;code&gt;chainingFeature&lt;/code&gt;.">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureFeaturingType"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureFeaturingType-specification0" xmi:type="uml:OpaqueExpression" body="featuringType =     let featuringTypes : OrderedSet(Type) =          featuring.type-&gt;asOrderedSet() in     if chainingFeature-&gt;isEmpty() then featuringTypes     else         featuringTypes-&gt;             union(chainingFeature-&gt;first().featuringType)-&gt;             asOrderedSet()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureResultRedefinition" xmi:type="uml:Constraint" name="checkFeatureResultRedefinition">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureResultRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; is a &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt; of an &lt;code&gt;owningType&lt;/code&gt; that is a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt;, then, for each direct supertype of its &lt;code&gt;owningType&lt;/code&gt; that is also a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Expression&lt;/code&gt;, it must redefine the &lt;code&gt;result&lt;/code&gt; &lt;code&gt;parameter&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureResultRedefinition"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureResultRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="owningType &lt;&gt; null and (owningType.oclIsKindOf(Function) and     self = owningType.oclAsType(Function).result or  owningType.oclIsKindOf(Expression) and     self = owningType.oclAsType(Expression).result) implies     owningType.ownedSpecialization.general-&gt;         select(oclIsKindOf(Function) or oclIsKindOf(Expression))-&gt;         forAll(supertype |             redefines(                 if superType.oclIsKindOf(Function) then                     superType.oclAsType(Function).result                 else                     superType.oclAsType(Expression).result                 endif)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedTyping" xmi:type="uml:Constraint" name="deriveFeatureOwnedTyping">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedTyping-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedTypings&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are its &lt;code&gt;ownedSpecializations&lt;/code&gt; that are &lt;code&gt;FeatureTypings&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedTyping"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedTyping-specification0" xmi:type="uml:OpaqueExpression" body="ownedTyping = ownedGeneralization-&gt;selectByKind(FeatureTyping)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeaturePortionSpecialization" xmi:type="uml:Constraint" name="checkFeaturePortionSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeaturePortionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;isPortion = true&lt;/code&gt;, an &lt;code&gt;ownedTyping &lt;/code&gt; relationship to a &lt;code&gt;Class&lt;/code&gt;, and an &lt;code&gt;owningType&lt;/code&gt; that is a &lt;code&gt;Class&lt;/code&gt; or another &lt;code&gt;Feature&lt;/code&gt; typed by a &lt;code&gt;Class&lt;/code&gt;, then it must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Occurrences::Occurrence::portions&lt;/code&gt;&lt;/em&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeaturePortionSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeaturePortionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isPortion and ownedTyping.type-&gt;includes(oclIsKindOf(Class)) and owningType &lt;&gt; null and (owningType.oclIsKindOf(Class) or  owningType.oclIsKindOf(Feature) and     owningType.oclAsType(Feature).type-&gt;         exists(oclIsKindOf(Class))) implies     specializesFromLibrary('Occurrence::Occurrence::portions')" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureEndSpecialization" xmi:type="uml:Constraint" name="checkFeatureEndSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureEndSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;isEnd = true&lt;/code&gt; and an &lt;code&gt;owningType&lt;/code&gt; that is an &lt;code&gt;Association&lt;/code&gt; or a &lt;code&gt;Connector&lt;/code&gt;, then it must directly or indirectly specialize &lt;code&gt;&lt;em&gt;Links::Link::participant&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureEndSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureEndSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isEnd and owningType &lt;&gt; null and (owningType.oclIsKindOf(Association) or  owningType.oclIsKindOf(Connector)) implies     specializesFromLibrary('Links::Link::participant')" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureType" xmi:type="uml:Constraint" name="deriveFeatureType">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;types&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are the union of the &lt;code&gt;types&lt;/code&gt; of its &lt;code&gt;typings&lt;/code&gt; and the &lt;code&gt;types&lt;/code&gt; of the &lt;code&gt;Features&lt;/code&gt; it subsets, with all redundant supertypes removed. If the &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;chainingFeatures&lt;/code&gt;, then the union also includes the types of the last &lt;code&gt;chainingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureType"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureType-specification0" xmi:type="uml:OpaqueExpression" body="type =      let types : OrderedSet(Types) = OrderedSet{self}-&gt;         -- Note: The closure operation automatically handles circular relationships.         closure(typingFeatures()).typing.type-&gt;asOrderedSet() in     types-&gt;reject(t1 | types-&gt;exist(t2 | t2 &lt;&gt; t1 and t2.specializes(t1)))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureOwnedCrossSubsetting" xmi:type="uml:Constraint" name="validateFeatureOwnedCrossSubsetting">
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureOwnedCrossSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; must have at most one &lt;code&gt;ownedSubsetting&lt;/code&gt; that is a &lt;code&gt;CrossSubsetting&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureOwnedCrossSubsetting"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureOwnedCrossSubsetting-specification0" xmi:type="uml:OpaqueExpression" body="ownedSubsetting-&gt;selectByKind(CrossSubsetting)-&gt;size() &lt;= 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureSuboccurrenceSpecialization" xmi:type="uml:Constraint" name="checkFeatureSuboccurrenceSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureSuboccurrenceSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A composite &lt;code&gt;Feature&lt;/code&gt; that has an &lt;code&gt;ownedTyping&lt;/code&gt; relationship to a &lt;code&gt;Class&lt;/code&gt;, and whose &lt;code&gt;ownedType&lt;/code&gt; is a &lt;code&gt;Class&lt;/code&gt; or another &lt;code&gt;Feature&lt;/code&gt; typed by a &lt;code&gt;Class&lt;/code&gt;, must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Occurrences::Occurrence::suboccurrences&lt;/code&gt;&lt;/em&gt;.">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureSuboccurrenceSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureSuboccurrenceSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isComposite and ownedTyping.type-&gt;includes(oclIsKindOf(Class)) and owningType &lt;&gt; null and (owningType.oclIsKindOf(Class) or  owningType.oclIsKindOf(Feature) and     owningType.oclAsType(Feature).type-&gt;         exists(oclIsKindOf(Class))) implies     specializesFromLibrary('Occurrence::Occurrence::suboccurrences')" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedReferenceSubsetting" xmi:type="uml:Constraint" name="deriveFeatureOwnedReferenceSubsetting">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedReferenceSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedReferenceSubsetting&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; is the first &lt;code&gt;ownedSubsetting&lt;/code&gt; that is a &lt;code&gt;ReferenceSubsetting&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedReferenceSubsetting"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedReferenceSubsetting-specification0" xmi:type="uml:OpaqueExpression" body="ownedReferenceSubsetting =     let referenceSubsettings : OrderedSet(ReferenceSubsetting) =         ownedSubsetting-&gt;selectByKind(ReferenceSubsetting) in     if referenceSubsettings-&gt;isEmpty() then null     else referenceSubsettings-&gt;first() endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureSubobjectSpecialization" xmi:type="uml:Constraint" name="checkFeatureSubobjectSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureSubobjectSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A composite &lt;code&gt;Feature&lt;/code&gt; typed by a &lt;code&gt;Structure&lt;/code&gt;, and whose &lt;code&gt;ownedType&lt;/code&gt; is a &lt;code&gt;Structure&lt;/code&gt; or another &lt;code&gt;Feature&lt;/code&gt; typed by a &lt;code&gt;Structure&lt;/code&gt; must directly or indirectly specialize &lt;em&gt;&lt;code&gt;Objects::Object::subobjects&lt;/code&gt;&lt;/em&gt;.">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureSubobjectSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureSubobjectSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isComposite and ownedTyping.type-&gt;includes(oclIsKindOf(Structure)) and owningType &lt;&gt; null and (owningType.oclIsKindOf(Structure) or  owningType.type-&gt;includes(oclIsKindOf(Structure))) implies     specializesFromLibrary('Occurrence::Occurrence::suboccurrences')" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureCrossFeatureSpecialization" xmi:type="uml:Constraint" name="validateFeatureCrossFeatureSpecialization">
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureCrossFeatureSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Feature&lt;/code&gt; has a &lt;code&gt;crossFeature&lt;/code&gt;, then, for any &lt;code&gt;Feature&lt;/code&gt; that is redefined by this &lt;code&gt;Feature&lt;/code&gt;, the &lt;code&gt;crossFeature&lt;/code&gt; must specialize the &lt;code&gt;crossFeature&lt;/code&gt; of the redefined end &lt;code&gt;Feature&lt;/code&gt;, if this exists.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureCrossFeatureSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureCrossFeatureSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="crossFeature &lt;&gt; null implies     ownedRedefinition.redefinedFeature.crossFeature-&gt;             forAll(f | f &lt;&gt; null implies crossFeature.specializes(f))" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureOwnedTypeFeaturing" xmi:type="uml:Constraint" name="deriveFeatureOwnedTypeFeaturing">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureOwnedTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedTypeFeaturings&lt;/code&gt; of a &lt;code&gt;Feature&lt;/code&gt; are its &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;TypeFeaturings&lt;/code&gt; and which have the &lt;code&gt;Feature&lt;/code&gt; as their &lt;code&gt;featureOfType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureOwnedTypeFeaturing"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureOwnedTypeFeaturing-specification0" xmi:type="uml:OpaqueExpression" body="ownedTypeFeaturing = ownedRelationship-&gt;selectByKind(TypeFeaturing)-&gt; select(tf | tf.featureOfType = self)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureOwnedReferenceSubsetting" xmi:type="uml:Constraint" name="validateFeatureOwnedReferenceSubsetting">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureOwnedReferenceSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; must have at most one &lt;code&gt;ownedSubsetting&lt;/code&gt; that is an &lt;code&gt;ReferenceSubsetting&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureOwnedReferenceSubsetting"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureOwnedReferenceSubsetting-specification0" xmi:type="uml:OpaqueExpression" body="ownedSubsetting-&gt;selectByKind(ReferenceSubsetting)-&gt;size() &lt;= 1" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureDataValueSpecialization" xmi:type="uml:Constraint" name="checkFeatureDataValueSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureDataValueSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has an &lt;code&gt;ownedTyping&lt;/code&gt; relationship to a &lt;code&gt;DataType&lt;/code&gt;, then it must directly or indirectly specialize &lt;code&gt;&lt;em&gt;Base::dataValues&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureDataValueSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureDataValueSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="ownedTyping.type-&gt;exists(selectByKind(DataType)) implies specializesFromLibrary('Base::dataValues')" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureFlowFeatureRedefinition" xmi:type="uml:Constraint" name="checkFeatureFlowFeatureRedefinition">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureFlowFeatureRedefinition-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; is the first &lt;code&gt;ownedFeature&lt;/code&gt; of a first or second &lt;code&gt;FlowEnd&lt;/code&gt;, then it must directly or indirectly specialize either &lt;em&gt;&lt;code&gt;Transfers::Transfer::source::sourceOutput&lt;/code&gt;&lt;/em&gt; or &lt;em&gt;&lt;code&gt;Transfers::Transfer::target::targetInput&lt;/code&gt;&lt;/em&gt;, respectively, from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureFlowFeatureRedefinition"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureFlowFeatureRedefinition-specification0" xmi:type="uml:OpaqueExpression" body="owningType &lt;&gt; null and owningType.oclIsKindOf(FlowEnd) and owningType.ownedFeature-&gt;at(1) = self implies     let flowType : Type = owningType.owningType in     flowType &lt;&gt; null implies         let i : Integer =              flowType.ownedFeature.indexOf(owningType) in         (i = 1 implies              redefinesFromLibrary('Transfers::Transfer::source::sourceOutput')) and         (i = 2 implies             redefinesFromLibrary('Transfers::Transfer::source::targetInput'))                  " language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-deriveFeatureFeatureTarget" xmi:type="uml:Constraint" name="deriveFeatureFeatureTarget">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-deriveFeatureFeatureTarget-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has no &lt;code&gt;chainingFeatures&lt;/code&gt;, then its &lt;code&gt;featureTarget&lt;/code&gt; is the &lt;code&gt;Feature&lt;/code&gt; itself, otherwise the &lt;code&gt;featureTarget&lt;/code&gt; is the last of the &lt;code&gt;chainingFeatures&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-deriveFeatureFeatureTarget"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-deriveFeatureFeatureTarget-specification0" xmi:type="uml:OpaqueExpression" body="featureTarget = if chainingFeature-&gt;isEmpty() then self else chainingFeature-&gt;last() endif" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureEndMultiplicity" xmi:type="uml:Constraint" name="validateFeatureEndMultiplicity">
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureEndMultiplicity-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; has &lt;code&gt;isEnd = true&lt;/code&gt;, then it must have multiplicity &lt;code&gt;1..1&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureEndMultiplicity"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureEndMultiplicity-specification0" xmi:type="uml:OpaqueExpression" body="isEnd implies multiplicities().allSuperTypes()-&gt;flatten()-&gt; selectByKind(MultiplicityRange)-&gt;exists(hasBounds(1,1))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureTypeFeaturing" xmi:type="uml:Constraint" name="checkFeatureOwnedCrossFeatureTypeFeaturing">
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;ownedCrossFeature&lt;/code&gt; of an end &lt;code&gt;Feature&lt;/code&gt;, then it must have &lt;code&gt;featuringTypes&lt;/code&gt; consistent with the crossing from other end &lt;code&gt;Features&lt;/code&gt; of the &lt;code&gt;owningType&lt;/code&gt; of its end &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureOwnedCrossFeatureTypeFeaturing"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureTypeFeaturing-specification0" xmi:type="uml:OpaqueExpression" body="isOwnedCrossFeature() implies     let otherEnds : OrderedSet(Feature) =          owner.oclAsType(Feature).owningType.endFeature-&gt;excluding(self) in     if (otherEnds-&gt;size() = 1) then         featuringType = otherEnds-&gt;first().type     else         featuringType-&gt;size() = 1 and         featuringType-&gt;first().isCartesianProduct() and         featuringType-&gt;first().asCartesianProduct() = otherEnds.type and         featuringType-&gt;first().allSupertypes()-&gt;includesAll(             owner.oclAsType(Feature).ownedRedefinition.redefinedFeature-&gt;                select(crossFeature() &lt;&gt; null).crossFeature().featuringType)           endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureRedefinitionSpecialization" xmi:type="uml:Constraint" name="checkFeatureOwnedCrossFeatureRedefinitionSpecialization">
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureRedefinitionSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;ownedCrossFeature&lt;/code&gt; of an end &lt;code&gt;Feature&lt;/code&gt;, then, for any end &lt;code&gt;Feature&lt;/code&gt; that is redefined by the owning end &lt;code&gt;Feature&lt;/code&gt; of this &lt;code&gt;Feature&lt;/code&gt;, this &lt;code&gt;Feature&lt;/code&gt; must subset the &lt;code&gt;crossFeature&lt;/code&gt; of the redefined end &lt;code&gt;Feature&lt;/code&gt;, if this exists.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureOwnedCrossFeatureRedefinitionSpecialization"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureOwnedCrossFeatureRedefinitionSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="isOwnedCrossFeature() implies     ownedSubsetting.subsettedFeature-&gt;includesAll(         owner.oclAsType(Feature).ownedRedefinition.redefinedFeature-&gt;             select(crossFeature &lt;&gt; null).crossFeature)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureFeatureMembershipTypeFeaturing" xmi:type="uml:Constraint" name="checkFeatureFeatureMembershipTypeFeaturing">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureFeatureMembershipTypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If a &lt;code&gt;Feature&lt;/code&gt; is owned via a &lt;code&gt;FeatureMembership&lt;/code&gt;, then it must have a &lt;code&gt;featuringType&lt;/code&gt; for which the operation &lt;code&gt;isFeaturingType&lt;/code&gt; returns true.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureFeatureMembershipTypeFeaturing"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureFeatureMembershipTypeFeaturing-specification0" xmi:type="uml:OpaqueExpression" body="owningFeatureMembership &lt;&gt; null implies featuringTypes-&gt;exists(t | isFeaturingType(t))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-validateFeatureEndNotDerivedAbstractCompositeOrPortion" xmi:type="uml:Constraint" name="validateFeatureEndNotDerivedAbstractCompositeOrPortion">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-validateFeatureEndNotDerivedAbstractCompositeOrPortion-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; with &lt;code&gt;isEnd = true&lt;/code&gt; must have all of &lt;code&gt;isDerived = false&lt;/code&gt;, &lt;code&gt;isAbstract = false&lt;/code&gt;, &lt;code&gt;isComposite = false&lt;/code&gt;, and &lt;code&gt;isPortion = false&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-validateFeatureEndNotDerivedAbstractCompositeOrPortion"/>
</ownedComment>
            <specification xmi:id="Core-Features-Feature-validateFeatureEndNotDerivedAbstractCompositeOrPortion-specification0" xmi:type="uml:OpaqueExpression" body="isEnd implies not (isDerived or isAbstract or isComposite or isPortion)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Feature-checkFeatureSpecialization" xmi:type="uml:Constraint" name="checkFeatureSpecialization">
            <constrainedElement xmi:idref="Core-Features-Feature"/>
            <ownedComment xmi:id="Core-Features-Feature-checkFeatureSpecialization-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Feature&lt;/code&gt; must directly or indirectly specialize &lt;code&gt;&lt;em&gt;Base::things&lt;/em&gt;&lt;/code&gt; from the Kernel Semantic Library.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Feature-checkFeatureSpecialization"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Feature-checkFeatureSpecialization-specification0" xmi:type="uml:OpaqueExpression" body="specializesFromLibrary('Base::things')" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_chainingFeature_chainedFeatureChaining" xmi:type="uml:Association" name="A_chainingFeature_chainedFeatureChaining">
          <memberEnd xmi:idref="Core-Features-FeatureChaining-chainingFeature"/>
          <memberEnd xmi:idref="Core-Features-A_chainingFeature_chainedFeatureChaining-chainedFeatureChaining"/>
          <ownedComment xmi:id="Core-Features-A_chainingFeature_chainedFeatureChaining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Relationship for chainedFeatures.&lt;/p&gt;">
            <annotatedElement xmi:idref="Core-Features-A_chainingFeature_chainedFeatureChaining"/>
          </ownedComment>
          <ownedEnd xmi:id="Core-Features-A_chainingFeature_chainedFeatureChaining-chainedFeatureChaining" xmi:type="uml:Property" name="chainedFeatureChaining">
            <association xmi:idref="Core-Features-A_chainingFeature_chainedFeatureChaining"/>
            <lowerValue xmi:id="Core-Features-A_chainingFeature_chainedFeatureChaining-chainedFeatureChaining-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_chainingFeature_chainedFeatureChaining-chainedFeatureChaining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;FeatureChainings&lt;/code&gt; that identify a &lt;code&gt;Feature&lt;/code&gt; as their &lt;code&gt;chainingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_chainingFeature_chainedFeatureChaining-chainedFeatureChaining"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Core-Features-FeatureChaining"/>
            <upperValue xmi:id="Core-Features-A_chainingFeature_chainedFeatureChaining-chainedFeatureChaining-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-TypeFeaturing" xmi:type="uml:Class" name="TypeFeaturing">
          <generalization xmi:id="Core-Features-TypeFeaturing-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-TypeFeaturing-featureOfType" xmi:type="uml:Property" name="featureOfType">
            <association xmi:idref="Core-Features-A_featureOfType_typeFeaturing"/>
            <lowerValue xmi:id="Core-Features-TypeFeaturing-featureOfType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-TypeFeaturing-featureOfType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is featured by the &lt;code&gt;featuringType&lt;/code&gt;. It is the &lt;code&gt;source&lt;/code&gt; of the &lt;code&gt;TypeFeaturing&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-TypeFeaturing-featureOfType"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-TypeFeaturing-featureOfType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-TypeFeaturing-featuringType" xmi:type="uml:Property" name="featuringType">
            <association xmi:idref="Core-Features-A_featuringType_typeFeaturingOfType"/>
            <lowerValue xmi:id="Core-Features-TypeFeaturing-featuringType-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-TypeFeaturing-featuringType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that features the &lt;code&gt;featureOfType&lt;/code&gt;. It is the &lt;code&gt;target&lt;/code&gt; of the &lt;code&gt;TypeFeaturing&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-TypeFeaturing-featuringType"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Features-TypeFeaturing-featuringType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-TypeFeaturing-owningFeatureOfType" xmi:type="uml:Property" isDerived="true" name="owningFeatureOfType">
            <association xmi:idref="Core-Features-A_ownedTypeFeaturing_owningFeatureOfType"/>
            <lowerValue xmi:id="Core-Features-TypeFeaturing-owningFeatureOfType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-TypeFeaturing-owningFeatureOfType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;featureOfType&lt;/code&gt; that is also the &lt;code&gt;owningRelatedElement&lt;/code&gt; of this &lt;code&gt;TypeFeaturing&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-TypeFeaturing-owningFeatureOfType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <subsettedProperty xmi:idref="Core-Features-TypeFeaturing-featureOfType"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-TypeFeaturing-owningFeatureOfType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-TypeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;TypeFeaturing&lt;/code&gt; is a &lt;code&gt;Featuring&lt;/code&gt; &lt;code&gt;Relationship&lt;/code&gt; in which the &lt;code&gt;featureOfType&lt;/code&gt; is the &lt;code&gt;source&lt;/code&gt; and the &lt;code&gt;featuringType&lt;/code&gt; is the &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Core-Features-TypeFeaturing"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedTypeFeaturing_owningFeatureOfType" xmi:type="uml:Association" name="A_ownedTypeFeaturing_owningFeatureOfType">
          <memberEnd xmi:idref="Core-Features-Feature-ownedTypeFeaturing"/>
          <memberEnd xmi:idref="Core-Features-TypeFeaturing-owningFeatureOfType"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_redefinedFeature_redefining" xmi:type="uml:Association" name="A_redefinedFeature_redefining">
          <memberEnd xmi:idref="Core-Features-Redefinition-redefinedFeature"/>
          <memberEnd xmi:idref="Core-Features-A_redefinedFeature_redefining-redefining"/>
          <ownedEnd xmi:id="Core-Features-A_redefinedFeature_redefining-redefining" xmi:type="uml:Property" name="redefining">
            <association xmi:idref="Core-Features-A_redefinedFeature_redefining"/>
            <lowerValue xmi:id="Core-Features-A_redefinedFeature_redefining-redefining-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_redefinedFeature_redefining-redefining-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Redefinitions with a certain Feature as the &lt;code&gt;redefinedFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_redefinedFeature_redefining-redefining"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Features-A_subsettedFeature_supersetting-supersetting"/>
            <type xmi:idref="Core-Features-Redefinition"/>
            <upperValue xmi:id="Core-Features-A_redefinedFeature_redefining-redefining-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_typedFeature_type" xmi:type="uml:Association" name="A_typedFeature_type">
          <memberEnd xmi:idref="Core-Features-A_typedFeature_type-typedFeature"/>
          <memberEnd xmi:idref="Core-Features-Feature-type"/>
          <ownedEnd xmi:id="Core-Features-A_typedFeature_type-typedFeature" xmi:type="uml:Property" isDerived="true" name="typedFeature">
            <association xmi:idref="Core-Features-A_typedFeature_type"/>
            <lowerValue xmi:id="Core-Features-A_typedFeature_type-typedFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_typedFeature_type-typedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Features for which a certain Type is a &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_typedFeature_type-typedFeature"/>
            </ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-A_typedFeature_type-typedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_subsettingFeature_subsetting" xmi:type="uml:Association" name="A_subsettingFeature_subsetting">
          <memberEnd xmi:idref="Core-Features-Subsetting-subsettingFeature"/>
          <memberEnd xmi:idref="Core-Features-A_subsettingFeature_subsetting-subsetting"/>
          <ownedEnd xmi:id="Core-Features-A_subsettingFeature_subsetting-subsetting" xmi:type="uml:Property" name="subsetting">
            <association xmi:idref="Core-Features-A_subsettingFeature_subsetting"/>
            <lowerValue xmi:id="Core-Features-A_subsettingFeature_subsetting-subsetting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_subsettingFeature_subsetting-subsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Subsettings with a certain Feature as the &lt;code&gt;subsettingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_subsettingFeature_subsetting-subsetting"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_specific_specialization-specialization"/>
            <type xmi:idref="Core-Features-Subsetting"/>
            <upperValue xmi:id="Core-Features-A_subsettingFeature_subsetting-subsetting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_typing_typedFeature" xmi:type="uml:Association" name="A_typing_typedFeature">
          <memberEnd xmi:idref="Core-Features-A_typing_typedFeature-typing"/>
          <memberEnd xmi:idref="Core-Features-FeatureTyping-typedFeature"/>
          <ownedEnd xmi:id="Core-Features-A_typing_typedFeature-typing" xmi:type="uml:Property" name="typing">
            <association xmi:idref="Core-Features-A_typing_typedFeature"/>
            <lowerValue xmi:id="Core-Features-A_typing_typedFeature-typing-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_typing_typedFeature-typing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The FeatureTypings for which a certain Feature is the &lt;code&gt;typedFeature&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-A_typing_typedFeature-typing"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_specific_specialization-specialization"/>
            <type xmi:idref="Core-Features-FeatureTyping"/>
            <upperValue xmi:id="Core-Features-A_typing_typedFeature-typing-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_type_typingByType" xmi:type="uml:Association" name="A_type_typingByType">
          <memberEnd xmi:idref="Core-Features-FeatureTyping-type"/>
          <memberEnd xmi:idref="Core-Features-A_type_typingByType-typingByType"/>
          <ownedEnd xmi:id="Core-Features-A_type_typingByType-typingByType" xmi:type="uml:Property" name="typingByType">
            <association xmi:idref="Core-Features-A_type_typingByType"/>
            <lowerValue xmi:id="Core-Features-A_type_typingByType-typingByType-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_type_typingByType-typingByType-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The FeatureTyping relating this Type to a Feature.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_type_typingByType-typingByType"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Core-Types-A_general_generalization-generalization"/>
            <type xmi:idref="Core-Features-FeatureTyping"/>
            <upperValue xmi:id="Core-Features-A_type_typingByType-typingByType-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_featureOfType_typeFeaturing" xmi:type="uml:Association" name="A_featureOfType_typeFeaturing">
          <memberEnd xmi:idref="Core-Features-TypeFeaturing-featureOfType"/>
          <memberEnd xmi:idref="Core-Features-A_featureOfType_typeFeaturing-typeFeaturing"/>
          <ownedEnd xmi:id="Core-Features-A_featureOfType_typeFeaturing-typeFeaturing" xmi:type="uml:Property" name="typeFeaturing">
            <association xmi:idref="Core-Features-A_featureOfType_typeFeaturing"/>
            <lowerValue xmi:id="Core-Features-A_featureOfType_typeFeaturing-typeFeaturing-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_featureOfType_typeFeaturing-typeFeaturing-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;TypeFeaturings&lt;/code&gt; for which a certain &lt;code&gt;Feature&lt;/code&gt; is the &lt;code&gt;featureOfType&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_featureOfType_typeFeaturing-typeFeaturing"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Core-Features-TypeFeaturing"/>
            <upperValue xmi:id="Core-Features-A_featureOfType_typeFeaturing-typeFeaturing-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedCrossSubsetting_crossingFeature" xmi:type="uml:Association" name="A_ownedCrossSubsetting_crossingFeature">
          <memberEnd xmi:idref="Core-Features-Feature-ownedCrossSubsetting"/>
          <memberEnd xmi:idref="Core-Features-CrossSubsetting-crossingFeature"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_owningFeature_ownedSubsetting" xmi:type="uml:Association" name="A_owningFeature_ownedSubsetting">
          <memberEnd xmi:idref="Core-Features-Subsetting-owningFeature"/>
          <memberEnd xmi:idref="Core-Features-Feature-ownedSubsetting"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-Subsetting" xmi:type="uml:Class" name="Subsetting">
          <generalization xmi:id="Core-Features-Subsetting-_generalization.Core-Types-Specialization" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-Specialization"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-Subsetting-subsettedFeature" xmi:type="uml:Property" name="subsettedFeature">
            <association xmi:idref="Core-Features-A_subsettedFeature_supersetting"/>
            <lowerValue xmi:id="Core-Features-Subsetting-subsettedFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-Subsetting-subsettedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is subsetted by the &lt;code&gt;subsettingFeature&lt;/code&gt; of this &lt;code&gt;Subsetting&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Subsetting-subsettedFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-general"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Subsetting-subsettedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Subsetting-subsettingFeature" xmi:type="uml:Property" name="subsettingFeature">
            <association xmi:idref="Core-Features-A_subsettingFeature_subsetting"/>
            <lowerValue xmi:id="Core-Features-Subsetting-subsettingFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-Subsetting-subsettingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that is a subset of the &lt;code&gt;subsettedFeature&lt;/code&gt; of this &lt;code&gt;Subsetting&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-Subsetting-subsettingFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-specific"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Subsetting-subsettingFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-Subsetting-owningFeature" xmi:type="uml:Property" isDerived="true" name="owningFeature">
            <association xmi:idref="Core-Features-A_owningFeature_ownedSubsetting"/>
            <lowerValue xmi:id="Core-Features-Subsetting-owningFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-Subsetting-owningFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;subsettingFeature&lt;/code&gt; that is also the &lt;code&gt;owningRelatedElement&lt;/code&gt; of this &lt;code&gt;Subsetting&lt;/code&gt;.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Core-Features-Subsetting-owningFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-owningType"/>
            <subsettedProperty xmi:idref="Core-Features-Subsetting-subsettingFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-Subsetting-owningFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-Subsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Subsetting&lt;/code&gt; is &lt;code&gt;Specialization&lt;/code&gt; in which the &lt;code&gt;specific&lt;/code&gt; and &lt;code&gt;general&lt;/code&gt; &lt;code&gt;Types&lt;/code&gt; are &lt;code&gt;Features&lt;/code&gt;. This means all values of the &lt;code&gt;subsettingFeature&lt;/code&gt; (on instances of its domain, i.e., the intersection of its &lt;code&gt;featuringTypes&lt;/code&gt;) are values of the &lt;code&gt;subsettedFeature&lt;/code&gt; on instances of its domain. To support this the domain of the &lt;code&gt;subsettingFeature&lt;/code&gt; must be the same or specialize (at least indirectly) the domain of the &lt;code&gt;subsettedFeature&lt;/code&gt; (via &lt;code&gt;Specialization&lt;/code&gt;), and the co-domain (intersection of the &lt;code&gt;types&lt;/code&gt;) of the &lt;code&gt;subsettingFeature&lt;/code&gt; must specialize the co-domain of the &lt;code&gt;subsettedFeature&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Features-Subsetting"/>
</ownedComment>
          <ownedRule xmi:id="Core-Features-Subsetting-validateSubsettingConstantConformance" xmi:type="uml:Constraint" name="validateSubsettingConstantConformance">
            <constrainedElement xmi:idref="Core-Features-Subsetting"/>
            <ownedComment xmi:id="Core-Features-Subsetting-validateSubsettingConstantConformance-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;subsettedFeature&lt;/code&gt; of a &lt;code&gt;Subsetting&lt;/code&gt; has &lt;code&gt;isConstant = true&lt;/code&gt; and the &lt;code&gt;subsettingFeature&lt;/code&gt; has &lt;code&gt;isVariable = true&lt;/code&gt;, then the &lt;code&gt;subsettingFeature&lt;/code&gt; must have &lt;code&gt;isConstant = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Subsetting-validateSubsettingConstantConformance"/>
</ownedComment>
            <specification xmi:id="Core-Features-Subsetting-validateSubsettingConstantConformance-specification0" xmi:type="uml:OpaqueExpression" body="subsettedFeature.isConstant and subsettingFeature.isVariable implies subsettingFeature.isConstant " language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Subsetting-validateSubsettingUniquenessConformance" xmi:type="uml:Constraint" name="validateSubsettingUniquenessConformance">
            <constrainedElement xmi:idref="Core-Features-Subsetting"/>
            <ownedComment xmi:id="Core-Features-Subsetting-validateSubsettingUniquenessConformance-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;subsettedFeature&lt;/code&gt; of a &lt;code&gt;Subsetting&lt;/code&gt; has &lt;code&gt;isUnique = true&lt;/code&gt;, then the &lt;code&gt;subsettingFeature&lt;/code&gt; must have &lt;code&gt;isUnique = true&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Subsetting-validateSubsettingUniquenessConformance"/>
</ownedComment>
            <specification xmi:id="Core-Features-Subsetting-validateSubsettingUniquenessConformance-specification0" xmi:type="uml:OpaqueExpression" body="subsettedFeature.isUnique implies subsettingFeature.isUnique" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-Subsetting-validateSubsettingFeaturingTypes" xmi:type="uml:Constraint" name="validateSubsettingFeaturingTypes">
            <constrainedElement xmi:idref="Core-Features-Subsetting"/>
            <ownedComment xmi:id="Core-Features-Subsetting-validateSubsettingFeaturingTypes-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;subsettedFeature&lt;/code&gt; must be accessible by the &lt;code&gt;subsettingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-Subsetting-validateSubsettingFeaturingTypes"/>
            </ownedComment>
            <specification xmi:id="Core-Features-Subsetting-validateSubsettingFeaturingTypes-specification0" xmi:type="uml:OpaqueExpression" body="subsettingFeature.canAccess(subsettedFeature)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_chainingFeature_chainedFeature" xmi:type="uml:Association" name="A_chainingFeature_chainedFeature">
          <memberEnd xmi:idref="Core-Features-Feature-chainingFeature"/>
          <memberEnd xmi:idref="Core-Features-A_chainingFeature_chainedFeature-chainedFeature"/>
          <ownedEnd xmi:id="Core-Features-A_chainingFeature_chainedFeature-chainedFeature" xmi:type="uml:Property" isDerived="true" name="chainedFeature">
            <association xmi:idref="Core-Features-A_chainingFeature_chainedFeature"/>
            <lowerValue xmi:id="Core-Features-A_chainingFeature_chainedFeature-chainedFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_chainingFeature_chainedFeature-chainedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Features&lt;/code&gt; that have a particular &lt;code&gt;chainingFeature&lt;/code&gt; in their &lt;code&gt;Feature&lt;/code&gt; chain, whose values are partly determined by values of the &lt;code&gt;chainingFeature&lt;/code&gt;, as described in &lt;code&gt;chainingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_chainingFeature_chainedFeature-chainedFeature"/>
</ownedComment>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-A_chainingFeature_chainedFeature-chainedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-FeatureTyping" xmi:type="uml:Class" name="FeatureTyping">
          <generalization xmi:id="Core-Features-FeatureTyping-_generalization.Core-Types-Specialization" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-Specialization"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-FeatureTyping-typedFeature" xmi:type="uml:Property" name="typedFeature">
            <association xmi:idref="Core-Features-A_typing_typedFeature"/>
            <lowerValue xmi:id="Core-Features-FeatureTyping-typedFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-FeatureTyping-typedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Feature&lt;/code&gt; that has a &lt;code&gt;type&lt;/code&gt; determined by this &lt;code&gt;FeatureTyping&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-FeatureTyping-typedFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-specific"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-FeatureTyping-typedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-FeatureTyping-type" xmi:type="uml:Property" name="type">
            <association xmi:idref="Core-Features-A_type_typingByType"/>
            <lowerValue xmi:id="Core-Features-FeatureTyping-type-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-FeatureTyping-type-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; that is being applied by this &lt;code&gt;FeatureTyping&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-FeatureTyping-type"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-general"/>
            <type xmi:idref="Core-Types-Type"/>
            <upperValue xmi:id="Core-Features-FeatureTyping-type-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-FeatureTyping-owningFeature" xmi:type="uml:Property" isDerived="true" name="owningFeature">
            <association xmi:idref="Core-Features-A_ownedTyping_owningFeature"/>
            <lowerValue xmi:id="Core-Features-FeatureTyping-owningFeature-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-FeatureTyping-owningFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;typedFeature&lt;/code&gt; that is also the &lt;code&gt;owningRelatedElement&lt;/code&gt; of this &lt;code&gt;FeatureTyping&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-FeatureTyping-owningFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Types-Specialization-owningType"/>
            <subsettedProperty xmi:idref="Core-Features-FeatureTyping-typedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-FeatureTyping-owningFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-FeatureTyping-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;FeatureTyping&lt;/code&gt; is &lt;code&gt;Specialization&lt;/code&gt; in which the &lt;code&gt;specific&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; is a &lt;code&gt;Feature&lt;/code&gt;. This means the set of instances of the (specific) &lt;code&gt;typedFeature&lt;/code&gt; is a subset of the set of instances of the (general) &lt;code&gt;type&lt;/code&gt;. In the simplest case, the &lt;code&gt;type&lt;/code&gt; is a &lt;code&gt;Classifier&lt;/code&gt;, whereupon the &lt;code&gt;typedFeature&lt;/code&gt; has values that are instances of the &lt;code&gt;Classifier&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Features-FeatureTyping"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedMemberFeature_owningEndFeatureMembership" xmi:type="uml:Association" name="A_ownedMemberFeature_owningEndFeatureMembership">
          <memberEnd xmi:idref="Core-Features-EndFeatureMembership-ownedMemberFeature"/>
          <memberEnd xmi:idref="Core-Features-A_ownedMemberFeature_owningEndFeatureMembership-owningEndFeatureMembership"/>
          <ownedEnd xmi:id="Core-Features-A_ownedMemberFeature_owningEndFeatureMembership-owningEndFeatureMembership" xmi:type="uml:Property" isDerived="true" name="owningEndFeatureMembership">
            <association xmi:idref="Core-Features-A_ownedMemberFeature_owningEndFeatureMembership"/>
            <lowerValue xmi:id="Core-Features-A_ownedMemberFeature_owningEndFeatureMembership-owningEndFeatureMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Core-Features-Feature-owningFeatureMembership"/>
            <type xmi:idref="Core-Features-EndFeatureMembership"/>
            <upperValue xmi:id="Core-Features-A_ownedMemberFeature_owningEndFeatureMembership-owningEndFeatureMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-EndFeatureMembership" xmi:type="uml:Class" name="EndFeatureMembership">
          <generalization xmi:id="Core-Features-EndFeatureMembership-_generalization.Core-Types-FeatureMembership" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Types-FeatureMembership"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-EndFeatureMembership-ownedMemberFeature" xmi:type="uml:Property" isDerived="true" name="ownedMemberFeature">
            <association xmi:idref="Core-Features-A_ownedMemberFeature_owningEndFeatureMembership"/>
            <lowerValue xmi:id="Core-Features-EndFeatureMembership-ownedMemberFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <redefinedProperty xmi:idref="Core-Types-FeatureMembership-ownedMemberFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-EndFeatureMembership-ownedMemberFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-EndFeatureMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;EndFeatureMembership&lt;/code&gt; is a &lt;code&gt;FeatureMembership&lt;/code&gt; that requires its &lt;code&gt;memberFeature&lt;/code&gt; be owned and have &lt;code&gt;isEnd = true&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Core-Features-EndFeatureMembership"/>
</ownedComment>
          <ownedRule xmi:id="Core-Features-EndFeatureMembership-validateEndFeatureMembershipIsEnd" xmi:type="uml:Constraint" name="validateEndFeatureMembershipIsEnd">
            <constrainedElement xmi:idref="Core-Features-EndFeatureMembership"/>
            <ownedComment xmi:id="Core-Features-EndFeatureMembership-validateEndFeatureMembershipIsEnd-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberFeature&lt;/code&gt; of an &lt;code&gt;EndFeatureMembership&lt;/code&gt; must be an end &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-EndFeatureMembership-validateEndFeatureMembershipIsEnd"/>
</ownedComment>
            <specification xmi:id="Core-Features-EndFeatureMembership-validateEndFeatureMembershipIsEnd-specification0" xmi:type="uml:OpaqueExpression" body="ownedMemberFeature.isEnd" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedTyping_owningFeature" xmi:type="uml:Association" name="A_ownedTyping_owningFeature">
          <memberEnd xmi:idref="Core-Features-Feature-ownedTyping"/>
          <memberEnd xmi:idref="Core-Features-FeatureTyping-owningFeature"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedReferenceSubsetting_referencingFeature" xmi:type="uml:Association" name="A_ownedReferenceSubsetting_referencingFeature">
          <memberEnd xmi:idref="Core-Features-Feature-ownedReferenceSubsetting"/>
          <memberEnd xmi:idref="Core-Features-ReferenceSubsetting-referencingFeature"/>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-CrossSubsetting" xmi:type="uml:Class" name="CrossSubsetting">
          <generalization xmi:id="Core-Features-CrossSubsetting-_generalization.Core-Features-Subsetting" xmi:type="uml:Generalization">
            <general xmi:idref="Core-Features-Subsetting"/>
          </generalization>
          <ownedAttribute xmi:id="Core-Features-CrossSubsetting-crossedFeature" xmi:type="uml:Property" name="crossedFeature">
            <association xmi:idref="Core-Features-A_crossedFeature_crossSupersetting"/>
            <lowerValue xmi:id="Core-Features-CrossSubsetting-crossedFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-CrossSubsetting-crossedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The chained &lt;code&gt;Feature&lt;/code&gt; that is cross subset by the &lt;code&gt;crossingFeature&lt;/code&gt; of this &lt;code&gt;CrossSubsetting&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Core-Features-CrossSubsetting-crossedFeature"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-subsettedFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-CrossSubsetting-crossedFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Core-Features-CrossSubsetting-crossingFeature" xmi:type="uml:Property" isDerived="true" name="crossingFeature">
            <association xmi:idref="Core-Features-A_ownedCrossSubsetting_crossingFeature"/>
            <lowerValue xmi:id="Core-Features-CrossSubsetting-crossingFeature-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Core-Features-CrossSubsetting-crossingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The end &lt;code&gt;Feature&lt;/code&gt; that owns this &lt;code&gt;CrossSubsetting&lt;/code&gt; relationship and is also its &lt;/code&gt;subsettingFeature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-CrossSubsetting-crossingFeature"/>
</ownedComment>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-owningFeature"/>
            <redefinedProperty xmi:idref="Core-Features-Subsetting-subsettingFeature"/>
            <type xmi:idref="Core-Features-Feature"/>
            <upperValue xmi:id="Core-Features-CrossSubsetting-crossingFeature-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Core-Features-CrossSubsetting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;CrossSubsetting&lt;/code&gt; is a kind of &lt;code&gt;Subsetting&lt;/code&gt; for end &lt;code&gt;Features&lt;/code&gt;, as identified by &lt;code&gt;crossingFeature&lt;/code&gt;, to subset a chained &lt;code&gt;Feature&lt;/code&gt;, identified by &lt;code&gt;crossedFeature.&lt;/code&gt; It navigates to instances of the end &lt;code&gt;Feature&lt;/code&gt;’s type from instances of other end &lt;code&gt;Feature&lt;/code&gt; types on the same &lt;code&gt;owningType&lt;/code&gt; (at least two end &lt;code&gt;Features&lt;/code&gt; are required for any of them to have a &lt;code&gt;CrossSubsetting&lt;/code&gt;).&lt;/p&gt;  &lt;p&gt;The &lt;code&gt;crossedFeature&lt;/code&gt; of a &lt;code&gt;CrossSubsetting&lt;/code&gt; must have a feature chain of exactly two &lt;code&gt;Features&lt;/code&gt;. The second &lt;code&gt;Feature&lt;/code&gt; in the chain is the &lt;code&gt;crossFeature&lt;/code&gt; of the &lt;code&gt;crossingFeature&lt;/code&gt; (end &lt;code&gt;Feature&lt;/code&gt;), which has the same type as the &lt;code&gt;crossingFeature&lt;/code&gt;. When the &lt;code&gt;owningType&lt;/code&gt; of the &lt;code&gt;crossingFeature&lt;/code&gt; has exactly two end &lt;code&gt;Features&lt;/code&gt;, the first &lt;code&gt;Feature&lt;/code&gt; in the chain of the &lt;code&gt;crossedFeature&lt;/code&gt; is the other end &lt;code&gt;Feature&lt;/code&gt;. The &lt;code&gt;crossFeature&lt;/code&gt;’s &lt;code&gt;featuringType&lt;/code&gt; in this case is the other end &lt;code&gt;Feature&lt;/code&gt;. When the &lt;code&gt;owningType&lt;/code&gt; has more than two end &lt;code&gt;Features&lt;/code&gt;, the first &lt;code&gt;Feature&lt;/code&gt; in the chain is a &lt;code&gt;Feature&lt;/code&gt; that &lt;code&gt;CrossMultiplies&lt;/code&gt; all the other end &lt;code&gt;Features&lt;/code&gt;, which is also the &lt;code&gt;featuringType&lt;/code&gt; of the &lt;code&gt;crossFeature&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;A &lt;code&gt;crossFeature&lt;/code&gt; must be owned by its &lt;code&gt;featureCrossing&lt;/code&gt; (end &lt;code&gt;Feature&lt;/code&gt;) when the &lt;code&gt;featureCrossing&lt;/code&gt; &lt;code&gt;owningType&lt;/code&gt; has more than two end &lt;code&gt;Features&lt;/code&gt;. Otherwise, for exactly two end &lt;code&gt;Features&lt;/code&gt;, the &lt;code&gt;crossFeatures&lt;/code&gt; of each the ends can instead optionally be inherited by the other end from one of its &lt;code&gt;types&lt;/code&gt; or a subsetted &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
            <annotatedElement xmi:idref="Core-Features-CrossSubsetting"/>
</ownedComment>
          <ownedRule xmi:id="Core-Features-CrossSubsetting-validateCrossSubsettingCrossedFeature" xmi:type="uml:Constraint" name="validateCrossSubsettingCrossedFeature">
            <ownedComment xmi:id="Core-Features-CrossSubsetting-validateCrossSubsettingCrossedFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;crossedFeature&lt;/code&gt; of a &lt;code&gt;CrossSubsetting&lt;/code&gt; must have exactly two &lt;code&gt;chainingFeatures&lt;/code&gt;. If the &lt;code&gt;crossingFeature&lt;/code&gt; of the &lt;code&gt;CrossSubsetting&lt;/code&gt; is one of two end &lt;code&gt;Features&lt;/code&gt;, then the first &lt;code&gt;chainingFeature&lt;/code&gt; must be the other end &lt;code&gt;Feature&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-CrossSubsetting-validateCrossSubsettingCrossedFeature"/>
</ownedComment>
            <specification xmi:id="Core-Features-CrossSubsetting-validateCrossSubsettingCrossedFeature-specification0" xmi:type="uml:OpaqueExpression" body="crossingFeature.isEnd and crossingFeature.owningType &lt;&gt; null implies     let endFeatures: Sequence(Feature) = crossingFeature.owningType.endFeature in     let chainingFeatures: Sequence(Feature) = crossedFeature.chainingFeature in     chainingFeatures-&gt;size() = 2 and     endFeatures-&gt;size() = 2 implies          chainingFeatures-&gt;at(1) = endFeatures-&gt;excluding(crossingFeature)-&gt;at(1)" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Core-Features-CrossSubsetting-validateCrossSubsettingCrossingFeature" xmi:type="uml:Constraint" name="validateCrossSubsettingCrossingFeature">
            <ownedComment xmi:id="Core-Features-CrossSubsetting-validateCrossSubsettingCrossingFeature-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;crossingFeature&lt;/code&gt; of a &lt;code&gt;CrossSubsetting&lt;/code&gt; must be an end &lt;code&gt;Feature&lt;/code&gt; that is owned by a &lt;code&gt;Type&lt;/code&gt; with at least two end &lt;code&gt;Features&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-CrossSubsetting-validateCrossSubsettingCrossingFeature"/>
</ownedComment>
            <specification xmi:id="Core-Features-CrossSubsetting-validateCrossSubsettingCrossingFeature-specification0" xmi:type="uml:OpaqueExpression" body="crossingFeature.isEnd and crossingFeature.owningType&lt;&gt;null and crossingFeature.owningType.endFeature -&gt;size() &gt; 1" language="OCL2.0" name="">
            </specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_invertingFeatureInverting_featureInverted" xmi:type="uml:Association" name="A_invertingFeatureInverting_featureInverted">
          <memberEnd xmi:idref="Core-Features-A_invertingFeatureInverting_featureInverted-invertingFeatureInverting"/>
          <memberEnd xmi:idref="Core-Features-FeatureInverting-featureInverted"/>
          <ownedEnd xmi:id="Core-Features-A_invertingFeatureInverting_featureInverted-invertingFeatureInverting" xmi:type="uml:Property" name="invertingFeatureInverting">
            <association xmi:idref="Core-Features-A_invertingFeatureInverting_featureInverted"/>
            <lowerValue xmi:id="Core-Features-A_invertingFeatureInverting_featureInverted-invertingFeatureInverting-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Core-Features-A_invertingFeatureInverting_featureInverted-invertingFeatureInverting-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The FeatureInvertings that identify this Feature as their &lt;code&gt;featureInverted&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Core-Features-A_invertingFeatureInverting_featureInverted-invertingFeatureInverting"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Core-Features-FeatureInverting"/>
            <upperValue xmi:id="Core-Features-A_invertingFeatureInverting_featureInverted-invertingFeatureInverting-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Core-Features-A_ownedFeatureInverting_owningFeature" xmi:type="uml:Association" name="A_ownedFeatureInverting_owningFeature">
          <memberEnd xmi:idref="Core-Features-Feature-ownedFeatureInverting"/>
          <memberEnd xmi:idref="Core-Features-FeatureInverting-owningFeature"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:id="Root" xmi:type="uml:Package" URI="" name="Root">
      <ownedComment xmi:id="Root-_comment.0" xmi:type="uml:Comment" body="The Root layer provides the syntactic foundation for KerML. ">
        <annotatedElement xmi:idref="Root"/>
      </ownedComment>
      <packagedElement xmi:id="Root-Dependencies" xmi:type="uml:Package" URI="" name="Dependencies">
        <packagedElement xmi:id="Root-Dependencies-Dependency" xmi:type="uml:Class" name="Dependency">
          <generalization xmi:id="Root-Dependencies-Dependency-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Dependencies-Dependency-client" xmi:type="uml:Property" isOrdered="true" name="client">
            <association xmi:idref="Root-Dependencies-A_client_clientDependency"/>
            <lowerValue xmi:id="Root-Dependencies-Dependency-client-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Dependencies-Dependency-client-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Elements&lt;/code&gt; dependent on the &lt;code&gt;supplier&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Dependencies-Dependency-client"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Dependencies-Dependency-client-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Dependencies-Dependency-supplier" xmi:type="uml:Property" isOrdered="true" name="supplier">
            <association xmi:idref="Root-Dependencies-A_supplier_supplierDependency"/>
            <lowerValue xmi:id="Root-Dependencies-Dependency-supplier-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Dependencies-Dependency-supplier-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Elements&lt;/code&gt; on which the &lt;code&gt;client&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt; depend in some respect.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Dependencies-Dependency-supplier"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Dependencies-Dependency-supplier-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Dependencies-Dependency-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Dependency&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; that indicates that one or more &lt;code&gt;client&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt; require one more &lt;code&gt;supplier&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt; for their complete specification. In general, this means that a change to one of the &lt;code&gt;supplier&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt; may necessitate a change to, or re-specification of, the &lt;code&gt;client&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Note that a &lt;code&gt;Dependency&lt;/code&gt; is entirely a model-level &lt;code&gt;Relationship&lt;/code&gt;, without instance-level semantics.&lt;/p&gt;">
            <annotatedElement xmi:idref="Root-Dependencies-Dependency"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Root-Dependencies-A_supplier_supplierDependency" xmi:type="uml:Association" name="A_supplier_supplierDependency">
          <memberEnd xmi:idref="Root-Dependencies-Dependency-supplier"/>
          <memberEnd xmi:idref="Root-Dependencies-A_supplier_supplierDependency-supplierDependency"/>
          <ownedEnd xmi:id="Root-Dependencies-A_supplier_supplierDependency-supplierDependency" xmi:type="uml:Property" name="supplierDependency">
            <association xmi:idref="Root-Dependencies-A_supplier_supplierDependency"/>
            <lowerValue xmi:id="Root-Dependencies-A_supplier_supplierDependency-supplierDependency-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Dependencies-A_supplier_supplierDependency-supplierDependency-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Dependencies&lt;/code&gt; that have a certain &lt;code&gt;supplier&lt;/code&gt; &lt;code&gt;Element&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Dependencies-A_supplier_supplierDependency-supplierDependency"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Root-Dependencies-Dependency"/>
            <upperValue xmi:id="Root-Dependencies-A_supplier_supplierDependency-supplierDependency-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Dependencies-A_client_clientDependency" xmi:type="uml:Association" name="A_client_clientDependency">
          <memberEnd xmi:idref="Root-Dependencies-Dependency-client"/>
          <memberEnd xmi:idref="Root-Dependencies-A_client_clientDependency-clientDependency"/>
          <ownedEnd xmi:id="Root-Dependencies-A_client_clientDependency-clientDependency" xmi:type="uml:Property" name="clientDependency">
            <association xmi:idref="Root-Dependencies-A_client_clientDependency"/>
            <lowerValue xmi:id="Root-Dependencies-A_client_clientDependency-clientDependency-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Dependencies-A_client_clientDependency-clientDependency-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Dependencies&lt;/code&gt; that have a certain &lt;code&gt;client&lt;/code&gt; &lt;code&gt;Element&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Dependencies-A_client_clientDependency-clientDependency"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Root-Dependencies-Dependency"/>
            <upperValue xmi:id="Root-Dependencies-A_client_clientDependency-clientDependency-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Root-Annotations" xmi:type="uml:Package" URI="" name="Annotations">
        <packagedElement xmi:id="Root-Annotations-A_ownedAnnotatingRelationship_owningAnnotatingElement" xmi:type="uml:Association" name="A_ownedAnnotatingRelationship_owningAnnotatingElement">
          <memberEnd xmi:idref="Root-Annotations-AnnotatingElement-ownedAnnotatingRelationship"/>
          <memberEnd xmi:idref="Root-Annotations-Annotation-owningAnnotatingElement"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-A_annotatedElement_annotatingElement" xmi:type="uml:Association" name="A_annotatedElement_annotatingElement">
          <memberEnd xmi:idref="Root-Annotations-AnnotatingElement-annotatedElement"/>
          <memberEnd xmi:idref="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement"/>
          <ownedEnd xmi:id="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="annotatingElement">
            <association xmi:idref="Root-Annotations-A_annotatedElement_annotatingElement"/>
            <lowerValue xmi:id="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The AnnotatingElements that have a certain Element as their &lt;code&gt;annotatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement"/>
            </ownedComment>
            <type xmi:idref="Root-Annotations-AnnotatingElement"/>
            <upperValue xmi:id="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-TextualRepresentation" xmi:type="uml:Class" name="TextualRepresentation">
          <generalization xmi:id="Root-Annotations-TextualRepresentation-_generalization.Root-Annotations-AnnotatingElement" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Annotations-AnnotatingElement"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Annotations-TextualRepresentation-language" xmi:type="uml:Property" name="language">
            <lowerValue xmi:id="Root-Annotations-TextualRepresentation-language-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-TextualRepresentation-language-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The natural or artifical language in which the &lt;code&gt;body&lt;/code&gt; text is written.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-TextualRepresentation-language"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Annotations-TextualRepresentation-language-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-TextualRepresentation-representedElement" xmi:type="uml:Property" isDerived="true" name="representedElement">
            <association xmi:idref="Root-Elements-A_textualRepresentation_representedElement"/>
            <lowerValue xmi:id="Root-Annotations-TextualRepresentation-representedElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-TextualRepresentation-representedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; that is represented by this &lt;code&gt;TextualRepresentation&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-TextualRepresentation-representedElement"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Annotations-AnnotatingElement-annotatedElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-owner"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Annotations-TextualRepresentation-representedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-TextualRepresentation-body" xmi:type="uml:Property" name="body">
            <lowerValue xmi:id="Root-Annotations-TextualRepresentation-body-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-TextualRepresentation-body-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The textual representation of the &lt;code&gt;representedElement&lt;/code&gt; in the given &lt;code&gt;language&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-TextualRepresentation-body"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Annotations-TextualRepresentation-body-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Annotations-TextualRepresentation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;TextualRepresentation&lt;/code&gt; is an &lt;code&gt;AnnotatingElement&lt;/code&gt; whose &lt;code&gt;body&lt;/code&gt; represents the &lt;code&gt;representedElement&lt;/code&gt; in a given &lt;code&gt;language&lt;/code&gt;. The &lt;code&gt;representedElement&lt;/code&gt; must be the &lt;code&gt;owner&lt;/code&gt; of the &lt;code&gt;TextualRepresentation&lt;/code&gt;. The named &lt;code&gt;language&lt;/code&gt; can be a natural language, in which case the &lt;code&gt;body&lt;/code&gt; is an informal representation, or an artificial language, in which case the &lt;code&gt;body&lt;/code&gt; is expected to be a formal, machine-parsable representation.&lt;/p&gt;  &lt;p&gt;If the named &lt;code&gt;language&lt;/code&gt; of a &lt;code&gt;TextualRepresentation&lt;/code&gt; is machine-parsable, then the &lt;code&gt;body&lt;/code&gt; text should be legal input text as defined for that &lt;code&gt;language&lt;/code&gt;. The interpretation of the named language string shall be case insensitive. The following &lt;code&gt;language&lt;/code&gt; names are defined to correspond to the given standard languages:&lt;/p&gt;  &lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot; width=&quot;498&quot;&gt;  &lt;thead&gt;  &lt;/thead&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td style=&quot;text-align: center; width: 154px;&quot;&gt;&lt;code&gt;kerml&lt;/code&gt;&lt;/td&gt;    &lt;td style=&quot;width: 332px;&quot;&gt;Kernel Modeling Language&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td style=&quot;text-align: center; width: 154px;&quot;&gt;&lt;code&gt;ocl&lt;/code&gt;&lt;/td&gt;    &lt;td style=&quot;width: 332px;&quot;&gt;Object Constraint Language&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td style=&quot;text-align: center; width: 154px;&quot;&gt;&lt;code&gt;alf&lt;/code&gt;&lt;/td&gt;    &lt;td style=&quot;width: 332px;&quot;&gt;Action Language for fUML&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt;  &lt;p&gt;Other specifications may define specific &lt;code&gt;language&lt;/code&gt; strings, other than those shown above, to be used to indicate the use of languages from those specifications in KerML &lt;code&gt;TextualRepresentation&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;language&lt;/code&gt; of a &lt;code&gt;TextualRepresentation&lt;/code&gt; is &amp;quot;&lt;code&gt;kerml&lt;/code&gt;&amp;quot;, then the &lt;code&gt;body&lt;/code&gt; text shall be a legal representation of the &lt;code&gt;representedElement&lt;/code&gt; in the KerML textual concrete syntax. A conforming tool can use such a &lt;code&gt;TextualRepresentation&lt;/code&gt; &lt;code&gt;Annotation&lt;/code&gt; to record the original KerML concrete syntax text from which an &lt;code&gt;Element&lt;/code&gt; was parsed. In this case, it is a tool responsibility to ensure that the &lt;code&gt;body&lt;/code&gt; of the &lt;code&gt;TextualRepresentation&lt;/code&gt; remains correct (or the Annotation is removed) if the annotated &lt;code&gt;Element&lt;/code&gt; changes other than by re-parsing the &lt;code&gt;body&lt;/code&gt; text.&lt;/p&gt;  &lt;p&gt;An &lt;code&gt;Element&lt;/code&gt; with a &lt;code&gt;TextualRepresentation&lt;/code&gt; in a language other than KerML is essentially a semantically &amp;quot;opaque&amp;quot; &lt;code&gt;Element&lt;/code&gt; specified in the other language. However, a conforming KerML tool may interpret such an element consistently with the specification of the named language.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Annotations-TextualRepresentation"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-Documentation" xmi:type="uml:Class" name="Documentation">
          <generalization xmi:id="Root-Annotations-Documentation-_generalization.Root-Annotations-Comment" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Annotations-Comment"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Annotations-Documentation-documentedElement" xmi:type="uml:Property" isDerived="true" name="documentedElement">
            <association xmi:idref="Root-Elements-A_documentation_documentedElement"/>
            <lowerValue xmi:id="Root-Annotations-Documentation-documentedElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-Documentation-documentedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; that is documented by this &lt;code&gt;Documentation&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-Documentation-documentedElement"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Annotations-AnnotatingElement-annotatedElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-owner"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Annotations-Documentation-documentedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Annotations-Documentation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;Documentation&lt;/code&gt; is a &lt;code&gt;Comment&lt;/code&gt; that specifically documents a &lt;code&gt;documentedElement&lt;/code&gt;, which must be its &lt;code&gt;owner&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Annotations-Documentation"/>
</ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-Comment" xmi:type="uml:Class" name="Comment">
          <generalization xmi:id="Root-Annotations-Comment-_generalization.Root-Annotations-AnnotatingElement" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Annotations-AnnotatingElement"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Annotations-Comment-locale" xmi:type="uml:Property" name="locale">
            <lowerValue xmi:id="Root-Annotations-Comment-locale-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-Comment-locale-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Identification of the language of the &lt;code&gt;body&lt;/code&gt; text and, optionally, the region and/or encoding. The format shall be a POSIX locale conformant to ISO/IEC 15897, with the format &lt;code&gt;[language[_territory][.codeset][@modifier]]&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-Comment-locale"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Annotations-Comment-locale-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-Comment-body" xmi:type="uml:Property" name="body">
            <lowerValue xmi:id="Root-Annotations-Comment-body-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-Comment-body-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The annotation text for the &lt;code&gt;Comment&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-Comment-body"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Annotations-Comment-body-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Annotations-Comment-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Comment&lt;/code&gt; is an &lt;code&gt;AnnotatingElement&lt;/code&gt; whose &lt;code&gt;body&lt;/code&gt; in some way describes its &lt;code&gt;annotatedElements&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Annotations-Comment"/>
          </ownedComment>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-A_annotatedElement_annotation" xmi:type="uml:Association" name="A_annotatedElement_annotation">
          <memberEnd xmi:idref="Root-Annotations-Annotation-annotatedElement"/>
          <memberEnd xmi:idref="Root-Annotations-A_annotatedElement_annotation-annotation"/>
          <ownedEnd xmi:id="Root-Annotations-A_annotatedElement_annotation-annotation" xmi:type="uml:Property" isOrdered="true" name="annotation">
            <association xmi:idref="Root-Annotations-A_annotatedElement_annotation"/>
            <lowerValue xmi:id="Root-Annotations-A_annotatedElement_annotation-annotation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-A_annotatedElement_annotation-annotation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Annotations associated with a certain &lt;code&gt;annotatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-A_annotatedElement_annotation-annotation"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Root-Annotations-Annotation"/>
            <upperValue xmi:id="Root-Annotations-A_annotatedElement_annotation-annotation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-A_annotation_annotatingElement" xmi:type="uml:Association" name="A_annotation_annotatingElement">
          <memberEnd xmi:idref="Root-Annotations-AnnotatingElement-annotation"/>
          <memberEnd xmi:idref="Root-Annotations-Annotation-annotatingElement"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-Annotation" xmi:type="uml:Class" name="Annotation">
          <generalization xmi:id="Root-Annotations-Annotation-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Annotations-Annotation-annotatingElement" xmi:type="uml:Property" isDerived="true" name="annotatingElement">
            <association xmi:idref="Root-Annotations-A_annotation_annotatingElement"/>
            <lowerValue xmi:id="Root-Annotations-Annotation-annotatingElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-Annotation-annotatingElement-_comment.0" xmi:type="uml:Comment" body=" &lt;p&gt;The &lt;code&gt;AnnotatingElement&lt;/code&gt; that annotates the &lt;code&gt;annotatedElement&lt;/code&gt; of this &lt;code&gt;Annotation&lt;/code&gt;. This is always either the &lt;code&gt;ownedAnnotatingElement&lt;/code&gt; or the &lt;code&gt;owningAnnotatingElement&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-annotatingElement"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <type xmi:idref="Root-Annotations-AnnotatingElement"/>
            <upperValue xmi:id="Root-Annotations-Annotation-annotatingElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-Annotation-annotatedElement" xmi:type="uml:Property" name="annotatedElement">
            <association xmi:idref="Root-Annotations-A_annotatedElement_annotation"/>
            <lowerValue xmi:id="Root-Annotations-Annotation-annotatedElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-Annotation-annotatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; that is annotated by the &lt;code&gt;annotatingElement&lt;/code&gt; of this Annotation.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-annotatedElement"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Annotations-Annotation-annotatedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-Annotation-owningAnnotatedElement" xmi:type="uml:Property" isDerived="true" name="owningAnnotatedElement">
            <association xmi:idref="Root-Elements-A_ownedAnnotation_owningAnnotatedElement"/>
            <lowerValue xmi:id="Root-Annotations-Annotation-owningAnnotatedElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-Annotation-owningAnnotatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;annotatedElement&lt;/code&gt; of this &lt;code&gt;Annotation&lt;/code&gt;, when it is also the &lt;code&gt;owningRelatedElement&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-owningAnnotatedElement"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Annotations-Annotation-annotatedElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Annotations-Annotation-owningAnnotatedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-Annotation-owningAnnotatingElement" xmi:type="uml:Property" isDerived="true" name="owningAnnotatingElement">
            <association xmi:idref="Root-Annotations-A_ownedAnnotatingRelationship_owningAnnotatingElement"/>
            <lowerValue xmi:id="Root-Annotations-Annotation-owningAnnotatingElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-Annotation-owningAnnotatingElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;annotatingElement&lt;/code&gt; of this &lt;code&gt;Annotation&lt;/code&gt;, when it is the &lt;code&gt;owningRelatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-owningAnnotatingElement"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Annotations-Annotation-annotatingElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Root-Annotations-AnnotatingElement"/>
            <upperValue xmi:id="Root-Annotations-Annotation-owningAnnotatingElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-Annotation-ownedAnnotatingElement" xmi:type="uml:Property" isDerived="true" name="ownedAnnotatingElement">
            <association xmi:idref="Root-Annotations-A_ownedAnnotatingElement_owningAnnotatingRelationship"/>
            <lowerValue xmi:id="Root-Annotations-Annotation-ownedAnnotatingElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-Annotation-ownedAnnotatingElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;annotatingElement&lt;/code&gt; of this &lt;code&gt;Annotation&lt;/code&gt;, when it is an &lt;code&gt;ownedRelatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-ownedAnnotatingElement"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Annotations-Annotation-annotatingElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-ownedRelatedElement"/>
            <type xmi:idref="Root-Annotations-AnnotatingElement"/>
            <upperValue xmi:id="Root-Annotations-Annotation-ownedAnnotatingElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Annotations-Annotation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Annotation&lt;/code&gt; is a Relationship between an &lt;code&gt;AnnotatingElement&lt;/code&gt; and the &lt;code&gt;Element&lt;/code&gt; that is annotated by that &lt;code&gt;AnnotatingElement&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Annotations-Annotation"/>
</ownedComment>
          <ownedRule xmi:id="Root-Annotations-Annotation-deriveAnnotationOwnedAnnotatingElement" xmi:type="uml:Constraint" name="deriveAnnotationOwnedAnnotatingElement">
            <ownedComment xmi:id="Root-Annotations-Annotation-deriveAnnotationOwnedAnnotatingElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedAnnotatingElement&lt;/code&gt; of an &lt;code&gt;Annotation&lt;/code&gt; is the first &lt;code&gt;ownedRelatedElement&lt;/code&gt; that is an &lt;code&gt;AnnotatingElement&lt;/code&gt;, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-deriveAnnotationOwnedAnnotatingElement"/>
</ownedComment>
            <specification xmi:id="Root-Annotations-Annotation-deriveAnnotationOwnedAnnotatingElement-specification0" xmi:type="uml:OpaqueExpression" body="ownedAnnotatingElement =     let ownedAnnotatingElements : Sequence(AnnotatingElement) =          ownedRelatedElement-&gt;selectByKind(AnnotatingElement) in     if ownedAnnotatingElements-&gt;isEmpty() then null     else ownedAnnotatingElements-&gt;first()     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Root-Annotations-Annotation-validateAnnotationAnnotatingElement" xmi:type="uml:Constraint" name="validateAnnotationAnnotatingElement">
            <ownedComment xmi:id="Root-Annotations-Annotation-validateAnnotationAnnotatingElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Either the &lt;code&gt;ownedAnnotatingElement&lt;/code&gt; of an &lt;code&gt;Annotation&lt;/code&gt; must be non-null, or the &lt;code&gt;owningAnnotatingElement&lt;/code&gt; must be non-null, but not both.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-validateAnnotationAnnotatingElement"/>
</ownedComment>
            <specification xmi:id="Root-Annotations-Annotation-validateAnnotationAnnotatingElement-specification0" xmi:type="uml:OpaqueExpression" body="ownedAnnotatingElement &lt;&gt; null xor owningAnnotatingElement &lt;&gt; null" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Annotations-Annotation-validateAnnotationAnnotatedElementOwnership" xmi:type="uml:Constraint" name="validateAnnotationAnnotatedElementOwnership">
            <ownedComment xmi:id="Root-Annotations-Annotation-validateAnnotationAnnotatedElementOwnership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Annotation&lt;/code&gt; owns its &lt;code&gt;annotatingElement&lt;/code&gt; if and only if it is owned by its &lt;code&gt;annotatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-validateAnnotationAnnotatedElementOwnership"/>
</ownedComment>
            <specification xmi:id="Root-Annotations-Annotation-validateAnnotationAnnotatedElementOwnership-specification0" xmi:type="uml:OpaqueExpression" body="(owningAnnotatedElement &lt;&gt; null) = (ownedAnnotatingElement &lt;&gt; null)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Annotations-Annotation-deriveAnnotationAnnotatingElement" xmi:type="uml:Constraint" name="deriveAnnotationAnnotatingElement">
            <ownedComment xmi:id="Root-Annotations-Annotation-deriveAnnotationAnnotatingElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;annotatingElement&lt;/code&gt; of an &lt;code&gt;Annotation&lt;/code&gt; is either its &lt;code&gt;ownedAnnotatingElement&lt;/code&gt; or its &lt;code&gt;owningAnnotatingElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-Annotation-deriveAnnotationAnnotatingElement"/>
</ownedComment>
            <specification xmi:id="Root-Annotations-Annotation-deriveAnnotationAnnotatingElement-specification0" xmi:type="uml:OpaqueExpression" body="annotatingElement = if ownedAnnotatingElement &lt;&gt; null then ownedAnnotatingElement else owningAnnotatingElement endif" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-AnnotatingElement" xmi:type="uml:Class" name="AnnotatingElement">
          <generalization xmi:id="Root-Annotations-AnnotatingElement-_generalization.Root-Elements-Element" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Element"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Annotations-AnnotatingElement-annotatedElement" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="annotatedElement">
            <association xmi:idref="Root-Annotations-A_annotatedElement_annotatingElement"/>
            <lowerValue xmi:id="Root-Annotations-AnnotatingElement-annotatedElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Annotations-AnnotatingElement-annotatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Elements&lt;/code&gt; that are annotated by this &lt;code&gt;AnnotatingElement&lt;/code&gt;. If &lt;code&gt;annotation&lt;/code&gt; is not empty, these are the &lt;code&gt;annotatedElements&lt;/code&gt; of the &lt;code&gt;annotations&lt;/code&gt;. If &lt;code&gt;annotation&lt;/code&gt; is empty, then it is the &lt;code&gt;owningNamespace&lt;/code&gt; of the &lt;code&gt;AnnotatingElement&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement-annotatedElement"/>
</ownedComment>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Annotations-AnnotatingElement-annotatedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-AnnotatingElement-ownedAnnotatingRelationship" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedAnnotatingRelationship">
            <association xmi:idref="Root-Annotations-A_ownedAnnotatingRelationship_owningAnnotatingElement"/>
            <lowerValue xmi:id="Root-Annotations-AnnotatingElement-ownedAnnotatingRelationship-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-AnnotatingElement-ownedAnnotatingRelationship-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;AnnotatingElement&lt;/code&gt; that are &lt;code&gt;Annotations&lt;/code&gt;, for which this &lt;code&gt;AnnotatingElement&lt;/code&gt; is the &lt;code&gt;annotatingElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement-ownedAnnotatingRelationship"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Annotations-AnnotatingElement-annotation"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <type xmi:idref="Root-Annotations-Annotation"/>
            <upperValue xmi:id="Root-Annotations-AnnotatingElement-ownedAnnotatingRelationship-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-AnnotatingElement-owningAnnotatingRelationship" xmi:type="uml:Property" isDerived="true" name="owningAnnotatingRelationship">
            <association xmi:idref="Root-Annotations-A_ownedAnnotatingElement_owningAnnotatingRelationship"/>
            <lowerValue xmi:id="Root-Annotations-AnnotatingElement-owningAnnotatingRelationship-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-AnnotatingElement-owningAnnotatingRelationship-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;owningRelationship&lt;/code&gt; of this &lt;code&gt;AnnotatingRelationship&lt;/code&gt;, if it is an &lt;code&gt;Annotation&lt;/code&gt;&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement-owningAnnotatingRelationship"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-owningRelationship"/>
            <subsettedProperty xmi:idref="Root-Annotations-AnnotatingElement-annotation"/>
            <type xmi:idref="Root-Annotations-Annotation"/>
            <upperValue xmi:id="Root-Annotations-AnnotatingElement-owningAnnotatingRelationship-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Annotations-AnnotatingElement-annotation" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="annotation">
            <association xmi:idref="Root-Annotations-A_annotation_annotatingElement"/>
            <lowerValue xmi:id="Root-Annotations-AnnotatingElement-annotation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Annotations-AnnotatingElement-annotation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Annotations&lt;/code&gt; that relate this &lt;code&gt;AnnotatingElement&lt;/code&gt; to its &lt;code&gt;annotatedElements&lt;/code&gt;. This includes the &lt;code&gt;owningAnnotatingRelationship&lt;/code&gt; (if any) followed by all the &lt;code&gt;ownedAnnotatingRelationshps&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement-annotation"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Root-Annotations-Annotation"/>
            <upperValue xmi:id="Root-Annotations-AnnotatingElement-annotation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Annotations-AnnotatingElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;AnnotatingElement&lt;/code&gt; is an &lt;code&gt;Element&lt;/code&gt; that provides additional description of or metadata on some other &lt;code&gt;Element&lt;/code&gt;. An &lt;code&gt;AnnotatingElement&lt;/code&gt; is either attached to its &lt;code&gt;annotatedElements&lt;/code&gt; by &lt;code&gt;Annotation&lt;/code&gt; &lt;code&gt;Relationships&lt;/code&gt;, or it implicitly annotates its &lt;code&gt;owningNamespace&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement"/>
</ownedComment>
          <ownedRule xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotation" xmi:type="uml:Constraint" name="deriveAnnotatingElementAnnotation">
            <ownedComment xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;annotations&lt;/code&gt; of an &lt;code&gt;AnnotatingElement&lt;/code&gt; are its &lt;code&gt;owningAnnotatingRelationship&lt;/code&gt; (if any) followed by all its &lt;code&gt;ownedAnnotatingRelationships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotation"/>
</ownedComment>
            <specification xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotation-specification0" xmi:type="uml:OpaqueExpression" body="annotation =      if owningAnnotatingRelationship = null then ownedAnnotatingRelationship     else owningAnnotatingRelationship-&gt;prepend(owningAnnotatingRelationship)     endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotatedElement" xmi:type="uml:Constraint" name="deriveAnnotatingElementAnnotatedElement">
            <constrainedElement xmi:idref="Root-Annotations-AnnotatingElement"/>
            <ownedComment xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If an &lt;code&gt;AnnotatingElement&lt;/code&gt; has &lt;code&gt;annotations&lt;/code&gt;, then its &lt;code&gt;annotatedElements&lt;/code&gt; are the &lt;code&gt;annotatedElements&lt;/code&gt; of all its &lt;code&gt;annotations&lt;/code&gt;. Otherwise, it's single &lt;code&gt;annotatedElement&lt;/code&gt; is its &lt;code&gt;owningNamespace&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotatedElement"/>
</ownedComment>
            <specification xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementAnnotatedElement-specification0" xmi:type="uml:OpaqueExpression" body="annotatedElement = if annotation-&gt;notEmpty() then annotation.annotatedElement else Sequence{owningNamespace} endif" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementOwnedAnnotatingRelationship" xmi:type="uml:Constraint" name="deriveAnnotatingElementOwnedAnnotatingRelationship">
            <constrainedElement xmi:idref="Root-Annotations-AnnotatingElement"/>
            <ownedComment xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementOwnedAnnotatingRelationship-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedAnnotatingRelationships&lt;/code&gt; of an &lt;code&gt;AnnotatingElement&lt;/code&gt; are its &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Annotations&lt;/code&gt;, for which the &lt;code&gt;AnnotatingElement&lt;/code&gt; is not the &lt;code&gt;annotatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Annotations-AnnotatingElement-deriveAnnotatingElementOwnedAnnotatingRelationship"/>
</ownedComment>
            <specification xmi:id="Root-Annotations-AnnotatingElement-deriveAnnotatingElementOwnedAnnotatingRelationship-specification0" xmi:type="uml:OpaqueExpression" body="ownedAnnotatingRelationship = ownedRelationship-&gt;     selectByKind(Annotation)-&gt;     select(a | a.annotatedElement &lt;&gt; self)" language="OCL2.0" name="">
</specification>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Annotations-A_ownedAnnotatingElement_owningAnnotatingRelationship" xmi:type="uml:Association" name="A_ownedAnnotatingElement_owningAnnotatingRelationship">
          <memberEnd xmi:idref="Root-Annotations-Annotation-ownedAnnotatingElement"/>
          <memberEnd xmi:idref="Root-Annotations-AnnotatingElement-owningAnnotatingRelationship"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Root-Namespaces" xmi:type="uml:Package" URI="" name="Namespaces">
        <packagedElement xmi:id="Root-Namespaces-A_ownedImport_importOwningNamespace" xmi:type="uml:Association" name="A_ownedImport_importOwningNamespace">
          <memberEnd xmi:idref="Root-Namespaces-Namespace-ownedImport"/>
          <memberEnd xmi:idref="Root-Namespaces-Import-importOwningNamespace"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-NamespaceImport" xmi:type="uml:Class" name="NamespaceImport">
          <generalization xmi:id="Root-Namespaces-NamespaceImport-_generalization.Root-Namespaces-Import" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-Import"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Namespaces-NamespaceImport-importedNamespace" xmi:type="uml:Property" name="importedNamespace">
            <association xmi:idref="Root-Namespaces-A_importedNamespace_import"/>
            <lowerValue xmi:id="Root-Namespaces-NamespaceImport-importedNamespace-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-NamespaceImport-importedNamespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Namespace&lt;/code&gt; whose visible &lt;code&gt;Memberships&lt;/code&gt; are imported by this &lt;code&gt;NamespaceImport&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-NamespaceImport-importedNamespace"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Root-Namespaces-Namespace"/>
            <upperValue xmi:id="Root-Namespaces-NamespaceImport-importedNamespace-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Namespaces-NamespaceImport-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;NamespaceImport&lt;/code&gt; is an Import that imports &lt;code&gt;Memberships&lt;/code&gt; from its &lt;code&gt;importedNamespace&lt;/code&gt; into the &lt;code&gt;importOwningNamespace&lt;/code&gt;. If &lt;code&gt; isRecursive = false&lt;/code&gt;, then only the visible &lt;code&gt;Memberships&lt;/code&gt; of the &lt;code&gt;importedNamespace&lt;/code&gt; are imported. If &lt;code&gt; isRecursive = true&lt;/code&gt;, then, in addition, &lt;code&gt;Memberships&lt;/code&gt; are recursively imported from any &lt;code&gt;ownedMembers&lt;/code&gt; of the &lt;code&gt;importedNamespace&lt;/code&gt; that are &lt;code&gt;Namespaces&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Namespaces-NamespaceImport"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace" xmi:type="uml:Operation" name="importedMemberships">
            <bodyCondition xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if excluded-&gt;includes(importedNamespace) then Sequence{} else importedNamespace.visibleMemberships(excluded, isRecursive, isImportAll)" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Returns at least the visible &lt;code&gt;Memberships&lt;/code&gt; of the &lt;code&gt;importedNamespace&lt;/code&gt;. If &lt;code&gt;isRecursive = true&lt;/code&gt;, then &lt;code&gt;Memberships&lt;/code&gt; are also recursively imported from any &lt;code&gt;ownedMembers&lt;/code&gt; of the &lt;code&gt;importedNamespace&lt;/code&gt; that are themselves &lt;code&gt;Namespaces&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-NamespaceImport-importedMemberships_Namespace"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-NamespaceImport-importedMemberships_Namespace--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-NamespaceImport-importedMemberships_Namespace-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Namespaces-Import-importedMemberships_Namespace"/>
          </ownedOperation>
          <ownedRule xmi:id="Root-Namespaces-NamespaceImport-deriveNamespaceImportImportedElement" xmi:type="uml:Constraint" name="deriveNamespaceImportImportedElement">
            <constrainedElement xmi:idref="Root-Namespaces-NamespaceImport"/>
            <ownedComment xmi:id="Root-Namespaces-NamespaceImport-deriveNamespaceImportImportedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;importedElement&lt;/code&gt; of a &lt;code&gt;NamespaceImport&lt;/code&gt; is its &lt;code&gt;importedNamespace&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-NamespaceImport-deriveNamespaceImportImportedElement"/>
            </ownedComment>
            <specification xmi:id="Root-Namespaces-NamespaceImport-deriveNamespaceImportImportedElement-specification0" xmi:type="uml:OpaqueExpression" body="importedElement = importedNamespace" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_memberElement_membership" xmi:type="uml:Association" name="A_memberElement_membership">
          <memberEnd xmi:idref="Root-Namespaces-Membership-memberElement"/>
          <memberEnd xmi:idref="Root-Namespaces-A_memberElement_membership-membership"/>
          <ownedEnd xmi:id="Root-Namespaces-A_memberElement_membership-membership" xmi:type="uml:Property" name="membership">
            <association xmi:idref="Root-Namespaces-A_memberElement_membership"/>
            <lowerValue xmi:id="Root-Namespaces-A_memberElement_membership-membership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-A_memberElement_membership-membership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Membership with a certain Element as its &lt;code&gt;memberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-A_memberElement_membership-membership"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Root-Namespaces-Membership"/>
            <upperValue xmi:id="Root-Namespaces-A_memberElement_membership-membership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_membership_membershipNamespace" xmi:type="uml:Association" name="A_membership_membershipNamespace">
          <memberEnd xmi:idref="Root-Namespaces-Namespace-membership"/>
          <memberEnd xmi:idref="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace"/>
          <ownedEnd xmi:id="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace" xmi:type="uml:Property" isDerived="true" isDerivedUnion="true" name="membershipNamespace">
            <association xmi:idref="Root-Namespaces-A_membership_membershipNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Namespace that has a certain &lt;code&gt;membership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace"/>
            </ownedComment>
            <type xmi:idref="Root-Namespaces-Namespace"/>
            <upperValue xmi:id="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-MembershipImport" xmi:type="uml:Class" name="MembershipImport">
          <generalization xmi:id="Root-Namespaces-MembershipImport-_generalization.Root-Namespaces-Import" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-Import"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Namespaces-MembershipImport-importedMembership" xmi:type="uml:Property" name="importedMembership">
            <association xmi:idref="Root-Namespaces-A_importedMembership_import"/>
            <lowerValue xmi:id="Root-Namespaces-MembershipImport-importedMembership-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-MembershipImport-importedMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Membership&lt;/code&gt; to be imported.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-MembershipImport-importedMembership"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Root-Namespaces-Membership"/>
            <upperValue xmi:id="Root-Namespaces-MembershipImport-importedMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Namespaces-MembershipImport-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;MembershipImport&lt;/code&gt; is an &lt;code&gt;Import&lt;/code&gt; that imports its &lt;code&gt;importedMembership&lt;/code&gt; into the &lt;code&gt;importOwningNamespace&lt;/code&gt;. If &lt;code&gt;isRecursive = true&lt;/code&gt; and the &lt;code&gt;memberElement&lt;/code&gt; of the &lt;code&gt;importedMembership&lt;/code&gt; is a &lt;code&gt;Namespace&lt;/code&gt;, then the equivalent of a recursive &lt;code&gt;NamespaceImport&lt;/code&gt; is also performed on that &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Namespaces-MembershipImport"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace" xmi:type="uml:Operation" name="importedMemberships">
            <bodyCondition xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if not isRecursive or     not importedElement.oclIsKindOf(Namespace) or    excluded-&gt;includes(importedElement) then Sequence{importedMembership} else importedElement.oclAsType(Namespace).         visibleMemberships(excluded, true, importAll)-&gt;         prepend(importedMembership) endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Returns at least the &lt;code&gt;importedMembership&lt;/code&gt;. If &lt;code&gt;isRecursive = true&lt;/code&gt; and the &lt;code&gt;memberElement&lt;/code&gt; of the &lt;code&gt;importedMembership&lt;/code&gt; is a &lt;code&gt;Namespace&lt;/code&gt;, then &lt;code&gt;Memberships&lt;/code&gt; are also recursively imported from that &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-MembershipImport-importedMemberships_Namespace"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-MembershipImport-importedMemberships_Namespace--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-MembershipImport-importedMemberships_Namespace-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Namespaces-Import-importedMemberships_Namespace"/>
          </ownedOperation>
          <ownedRule xmi:id="Root-Namespaces-MembershipImport-deriveMembershipImportImportedElement" xmi:type="uml:Constraint" name="deriveMembershipImportImportedElement">
            <constrainedElement xmi:idref="Root-Namespaces-MembershipImport"/>
            <ownedComment xmi:id="Root-Namespaces-MembershipImport-deriveMembershipImportImportedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;importedElement&lt;/code&gt; of a &lt;code&gt;MembershipImport&lt;/code&gt; is the &lt;code&gt;memberElement&lt;/code&gt; of its &lt;code&gt;importedMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-MembershipImport-deriveMembershipImportImportedElement"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-MembershipImport-deriveMembershipImportImportedElement-specification0" xmi:type="uml:OpaqueExpression" body="importedElement = importedMembership.memberElement" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-OwningMembership" xmi:type="uml:Class" name="OwningMembership">
          <generalization xmi:id="Root-Namespaces-OwningMembership-_generalization.Root-Namespaces-Membership" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Namespaces-Membership"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Namespaces-OwningMembership-ownedMemberElement" xmi:type="uml:Property" isDerived="true" name="ownedMemberElement">
            <association xmi:idref="Root-Namespaces-A_ownedMemberElement_owningMembership"/>
            <lowerValue xmi:id="Root-Namespaces-OwningMembership-ownedMemberElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-OwningMembership-ownedMemberElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; that becomes an &lt;code&gt;ownedMember&lt;/code&gt; of the &lt;code&gt;membershipOwningNamespace&lt;/code&gt; due to this &lt;code&gt;OwningMembership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-OwningMembership-ownedMemberElement"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-Membership-memberElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-ownedRelatedElement"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Namespaces-OwningMembership-ownedMemberElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-OwningMembership-ownedMemberElementId" xmi:type="uml:Property" isDerived="true" name="ownedMemberElementId">
            <ownedComment xmi:id="Root-Namespaces-OwningMembership-ownedMemberElementId-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;elementId&lt;/code&gt; of the &lt;code&gt;ownedMemberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-OwningMembership-ownedMemberElementId"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-Membership-memberElementId"/>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-OwningMembership-ownedMemberShortName" xmi:type="uml:Property" isDerived="true" name="ownedMemberShortName">
            <lowerValue xmi:id="Root-Namespaces-OwningMembership-ownedMemberShortName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-OwningMembership-ownedMemberShortName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;shortName&lt;/code&gt; of the &lt;code&gt;ownedMemberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-OwningMembership-ownedMemberShortName"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-Membership-memberShortName"/>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Namespaces-OwningMembership-ownedMemberShortName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-OwningMembership-ownedMemberName" xmi:type="uml:Property" isDerived="true" name="ownedMemberName">
            <lowerValue xmi:id="Root-Namespaces-OwningMembership-ownedMemberName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-OwningMembership-ownedMemberName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;ownedMemberElement&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-OwningMembership-ownedMemberName"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Namespaces-Membership-memberName"/>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Namespaces-OwningMembership-ownedMemberName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Namespaces-OwningMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;OwningMembership&lt;/code&gt; is a &lt;code&gt;Membership&lt;/code&gt; that owns its &lt;code&gt;memberElement&lt;/code&gt; as a &lt;code&gt;ownedRelatedElement&lt;/code&gt;. The &lt;code&gt;ownedMemberElement&lt;/code&gt; becomes an &lt;code&gt;ownedMember&lt;/code&gt; of the &lt;code&gt;membershipOwningNamespace&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Namespaces-OwningMembership"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Namespaces-OwningMembership-path_" xmi:type="uml:Operation" name="path">
            <bodyCondition xmi:id="Root-Namespaces-OwningMembership-path_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-OwningMembership-path_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if ownedElement.qualifiedName &lt;&gt; null then ownedElement.qualifiedName + '/owningMembership' else self.oclAsType(Relationship).path() endif" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-OwningMembership-path_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;ownedMemberElement&lt;/code&gt; of this &lt;code&gt;OwningMembership&lt;/code&gt; has a non-null &lt;code&gt;qualifiedName&lt;/code&gt;, then return the string constructed by appending to that &lt;code&gt;qualifiedName&lt;/code&gt; the string &lt;code&gt;&quot;/owningMembership&quot;&lt;/code&gt;. Otherwise, return the &lt;code&gt;path&lt;/code&gt; of the &lt;code&gt;OwningMembership&lt;/code&gt; as specified for a &lt;code&gt;Relationship&lt;/code&gt; in general.">
              <annotatedElement xmi:idref="Root-Namespaces-OwningMembership-path_"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-OwningMembership-path_-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-OwningMembership-path_-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Elements-Relationship-path_"/>
          </ownedOperation>
          <ownedRule xmi:id="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberName" xmi:type="uml:Constraint" name="deriveOwningMembershipOwnedMemberName">
            <constrainedElement xmi:idref="Root-Namespaces-OwningMembership"/>
            <ownedComment xmi:id="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberName&lt;/code&gt; of an &lt;code&gt;OwningMembership&lt;/code&gt; is the &lt;code&gt;name&lt;/code&gt; of its &lt;code&gt;ownedMemberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberName"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberName-specification0" xmi:type="uml:OpaqueExpression" body="ownedMemberName = ownedMemberElement.name" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberShortName" xmi:type="uml:Constraint" name="deriveOwningMembershipOwnedMemberShortName">
            <constrainedElement xmi:idref="Root-Namespaces-OwningMembership"/>
            <ownedComment xmi:id="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberShortName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberShortName&lt;/code&gt; of an &lt;code&gt;OwningMembership&lt;/code&gt; is the &lt;code&gt;shortName&lt;/code&gt; of its &lt;code&gt;ownedMemberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberShortName"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-OwningMembership-deriveOwningMembershipOwnedMemberShortName-specification0" xmi:type="uml:OpaqueExpression" body="ownedMemberShortName = ownedMemberElement.shortName" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-Import" xmi:type="uml:Class" isAbstract="true" name="Import">
          <generalization xmi:id="Root-Namespaces-Import-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Namespaces-Import-importOwningNamespace" xmi:type="uml:Property" isDerived="true" name="importOwningNamespace">
            <association xmi:idref="Root-Namespaces-A_ownedImport_importOwningNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-Import-importOwningNamespace-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-Import-importOwningNamespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Namespace into which Memberships are imported by this Import, which must be the &lt;code&gt;owningRelatedElement&lt;/code&gt; of the Import.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Root-Namespaces-Import-importOwningNamespace"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Root-Namespaces-Namespace"/>
            <upperValue xmi:id="Root-Namespaces-Import-importOwningNamespace-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Import-visibility" xmi:type="uml:Property" name="visibility">
            <defaultValue xmi:id="Root-Namespaces-Import-visibility-defaultValue0" xmi:type="uml:InstanceValue" name="">
              <instance xmi:idref="Root-Namespaces-VisibilityKind-private"/>
            </defaultValue>
            <ownedComment xmi:id="Root-Namespaces-Import-visibility-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The visibility level of the imported &lt;code&gt;members&lt;/code&gt; from this Import relative to the &lt;code&gt;importOwningNamespace&lt;/code&gt;. The default is &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Import-visibility"/>
</ownedComment>
            <type xmi:idref="Root-Namespaces-VisibilityKind"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Import-isRecursive" xmi:type="uml:Property" name="isRecursive">
            <defaultValue xmi:id="Root-Namespaces-Import-isRecursive-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Import-isRecursive-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether to recursively import Memberships from visible, owned sub-Namespaces.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Import-isRecursive"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Import-isImportAll" xmi:type="uml:Property" name="isImportAll">
            <defaultValue xmi:id="Root-Namespaces-Import-isImportAll-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Import-isImportAll-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether to import memberships without regard to declared visibility.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Import-isImportAll"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Import-importedElement" xmi:type="uml:Property" isDerived="true" name="importedElement">
            <association xmi:idref="Root-Namespaces-A_importedElement_membershipImport"/>
            <lowerValue xmi:id="Root-Namespaces-Import-importedElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-Import-importedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The effectively imported &lt;code&gt;Element&lt;/code&gt; for this &lt;/code&gt;Import&lt;/code&gt;. For a &lt;code&gt;MembershipImport&lt;/code&gt;, this is the &lt;code&gt;memberElement&lt;/code&gt; of the &lt;code&gt;importedMembership&lt;/code&gt;. For a &lt;code&gt;NamespaceImport&lt;/code&gt;, it is the &lt;code&gt;importedNamespace&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Import-importedElement"/>
</ownedComment>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Namespaces-Import-importedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Namespaces-Import-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Import&lt;/code&gt; is an &lt;code&gt;Relationship&lt;/code&gt; between its &lt;code&gt;importOwningNamespace&lt;/code&gt; and either a &lt;code&gt;Membership&lt;/code&gt; (for a &lt;code&gt;MembershipImport&lt;/code&gt;) or another &lt;code&gt;Namespace&lt;/code&gt; (for a &lt;code&gt;NamespaceImport&lt;/code&gt;), which determines a set of &lt;code&gt;Memberships&lt;/code&gt; that become &lt;code&gt;importedMemberships&lt;/code&gt; of the &lt;code&gt;importOwningNamespace&lt;/code&gt;. If &lt;code&gt;isImportAll = false&lt;/code&gt; (the default), then only public &lt;code&gt;Memberships&lt;/code&gt; are considered &amp;quot;visible&amp;quot;. If &lt;code&gt;isImportAll = true&lt;/code&gt;, then all &lt;code&gt;Memberships&lt;/code&gt; are considered &amp;quot;visible&amp;quot;, regardless of their declared &lt;code&gt;visibility&lt;/code&gt;. If &lt;code&gt;isRecursive = true&lt;/code&gt;, then visible &lt;code&gt;Memberships&lt;/code&gt; are also recursively imported from owned sub-&lt;code&gt;Namespaces&lt;/code&gt;.&lt;/p&gt;  ">
            <annotatedElement xmi:idref="Root-Namespaces-Import"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Namespaces-Import-importedMemberships_Namespace" xmi:type="uml:Operation" isAbstract="true" name="importedMemberships">
            <ownedComment xmi:id="Root-Namespaces-Import-importedMemberships_Namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Returns Memberships that are to become &lt;code&gt;importedMemberships&lt;/code&gt; of the &lt;code&gt;importOwningNamespace&lt;/code&gt;. (The &lt;code&gt;excluded&lt;/code&gt; parameter is used to handle the possibility of circular Import Relationships.)&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Import-importedMemberships_Namespace"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Import-importedMemberships_Namespace-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Root-Namespaces-Import-importedMemberships_Namespace-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Namespaces-Import-importedMemberships_Namespace-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Import-importedMemberships_Namespace-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Root-Namespaces-Import-importedMemberships_Namespace--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Import-importedMemberships_Namespace--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
          </ownedOperation>
          <ownedRule xmi:id="Root-Namespaces-Import-validateImportTopLevelVisibility" xmi:type="uml:Constraint" name="validateImportTopLevelVisibility">
            <constrainedElement xmi:idref="Root-Namespaces-Import"/>
            <ownedComment xmi:id="Root-Namespaces-Import-validateImportTopLevelVisibility-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A top-level &lt;code&gt;Import&lt;/code&gt; (that is, one that is owned by a root &lt;code&gt;Namespace&lt;/code&gt;) must have a &lt;code&gt;visibility&lt;/code&gt; of &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Import-validateImportTopLevelVisibility"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-Import-validateImportTopLevelVisibility-specification0" xmi:type="uml:OpaqueExpression" body="importOwningNamespace.owner = null implies visibility = VisibilityKind::private" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_ownedMember_owningNamespace" xmi:type="uml:Association" name="A_ownedMember_owningNamespace">
          <memberEnd xmi:idref="Root-Namespaces-Namespace-ownedMember"/>
          <memberEnd xmi:idref="Root-Elements-Element-owningNamespace"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-Namespace" xmi:type="uml:Class" name="Namespace">
          <generalization xmi:id="Root-Namespaces-Namespace-_generalization.Root-Elements-Element" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Element"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Namespaces-Namespace-membership" xmi:type="uml:Property" isDerived="true" isDerivedUnion="true" isOrdered="true" name="membership">
            <association xmi:idref="Root-Namespaces-A_membership_membershipNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-Namespace-membership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-membership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;Memberships&lt;/code&gt; in this &lt;code&gt;Namespace&lt;/code&gt;, including (at least) the union of &lt;code&gt;ownedMemberships&lt;/code&gt; and &lt;code&gt;importedMemberships&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-membership"/>
</ownedComment>
            <type xmi:idref="Root-Namespaces-Membership"/>
            <upperValue xmi:id="Root-Namespaces-Namespace-membership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Namespace-ownedImport" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedImport">
            <association xmi:idref="Root-Namespaces-A_ownedImport_importOwningNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-Namespace-ownedImport-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-ownedImport-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt; that are &lt;code&gt;Imports&lt;/code&gt;, for which the &lt;code&gt;Namespace&lt;/code&gt; is the &lt;code&gt;importOwningNamespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-ownedImport"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <type xmi:idref="Root-Namespaces-Import"/>
            <upperValue xmi:id="Root-Namespaces-Namespace-ownedImport-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Namespace-member" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="member">
            <association xmi:idref="Root-Namespaces-A_member_namespace"/>
            <lowerValue xmi:id="Root-Namespaces-Namespace-member-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-member-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The set of all member &lt;code&gt;Elements&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt;, which are the &lt;code&gt;memberElements&lt;/code&gt; of all &lt;code&gt;memberships&lt;/code&gt; of the &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-member"/>
</ownedComment>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Namespaces-Namespace-member-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Namespace-ownedMember" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedMember">
            <association xmi:idref="Root-Namespaces-A_ownedMember_owningNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-Namespace-ownedMember-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-ownedMember-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The owned &lt;code&gt;members&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt;, which are the &lt;cpde&gt;&lt;code&gt;ownedMemberElements&lt;/code&gt; of the &lt;code&gt;ownedMemberships&lt;/code&gt; of the &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-ownedMember"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-member"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Namespaces-Namespace-ownedMember-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Namespace-ownedMembership" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedMembership">
            <association xmi:idref="Root-Namespaces-A_ownedMembership_membershipOwningNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-Namespace-ownedMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-ownedMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt; that are &lt;code&gt;Memberships&lt;/code&gt;, for which the &lt;code&gt;Namespace&lt;/code&gt; is the &lt;code&gt;membershipOwningNamespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-ownedMembership"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-membership"/>
            <subsettedProperty xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <type xmi:idref="Root-Namespaces-Membership"/>
            <upperValue xmi:id="Root-Namespaces-Namespace-ownedMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Namespace-importedMembership" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="importedMembership">
            <association xmi:idref="Root-Namespaces-A_importedMembership_importingNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-Namespace-importedMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-importedMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Memberships&lt;/code&gt; in this &lt;code&gt;Namespace&lt;/code&gt; that result from the &lt;code&gt;ownedImports&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-importedMembership"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-Namespace-membership"/>
            <type xmi:idref="Root-Namespaces-Membership"/>
            <upperValue xmi:id="Root-Namespaces-Namespace-importedMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Namespaces-Namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Namespace&lt;/code&gt; is an &lt;code&gt;Element&lt;/code&gt; that contains other &lt;code&gt;Elements&lt;/code&gt;, known as its &lt;code&gt;members&lt;/code&gt;, via &lt;code&gt;Membership&lt;/code&gt; &lt;code&gt;Relationships&lt;/code&gt; with those &lt;code&gt;Elements&lt;/code&gt;. The &lt;code&gt;members&lt;/code&gt; of a &lt;code&gt;Namespace&lt;/code&gt; may be owned by the &lt;code&gt;Namespace&lt;/code&gt;, aliased in the &lt;code&gt;Namespace&lt;/code&gt;, or imported into the &lt;code&gt;Namespace&lt;/code&gt; via &lt;code&gt;Import&lt;/code&gt; &lt;code&gt;Relationships&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;A &lt;code&gt;Namespace&lt;/code&gt; can provide names for its &lt;code&gt;members&lt;/code&gt; via the &lt;code&gt;memberNames&lt;/code&gt; and &lt;code&gt;memberShortNames&lt;/code&gt; specified by the &lt;code&gt;Memberships&lt;/code&gt; in the &lt;code&gt;Namespace&lt;/code&gt;. If a &lt;code&gt;Membership&lt;/code&gt; specifies a &lt;code&gt;memberName&lt;/code&gt; and/or &lt;code&gt;memberShortName&lt;/code&gt;, then those are names of the corresponding &lt;code&gt;memberElement&lt;/code&gt; relative to the &lt;code&gt;Namespace&lt;/code&gt;. For an &lt;code&gt;OwningMembership&lt;/code&gt;, the &lt;code&gt;ownedMemberName&lt;/code&gt; and &lt;code&gt;ownedMemberShortName&lt;/code&gt; are given by the &lt;code&gt;Element&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;shortName&lt;/code&gt;. Note that the same &lt;code&gt;Element&lt;/code&gt; may be the &lt;code&gt;memberElement&lt;/code&gt; of multiple &lt;code&gt;Memberships&lt;/code&gt; in a &lt;code&gt;Namespace&lt;/code&gt; (though it may be owned at most once), each of which may define a separate alias for the &lt;code&gt;Element&lt;/code&gt; relative to the &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Namespaces-Namespace"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-namesOf_Element" xmi:type="uml:Operation" name="namesOf">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-namesOf_Element-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-namesOf_Element-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let elementMemberships : Sequence(Membership) =      memberships-&gt;select(memberElement = element) in memberships.memberShortName-&gt;     union(memberships.memberName)-&gt;     asSet()" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-namesOf_Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the names of the given &lt;code&gt;element&lt;/code&gt; as it is known in this &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-namesOf_Element"/>
            </ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-namesOf_Element-element" xmi:type="uml:Parameter" name="element">
              <type xmi:idref="Root-Elements-Element"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-namesOf_Element-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-namesOf_Element--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-namesOf_Element--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-namesOf_Element-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-visibilityOf_Membership" xmi:type="uml:Operation" name="visibilityOf">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-visibilityOf_Membership-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-visibilityOf_Membership-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if importedMembership-&gt;includes(mem) then     ownedImport-&gt;         select(importedMemberships(Set{})-&gt;includes(mem)).         first().visibility else if memberships-&gt;includes(mem) then     mem.visibility else     VisibilityKind::private endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-visibilityOf_Membership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Returns this visibility of &lt;code&gt;mem&lt;/code&gt; relative to this &lt;code&gt;Namespace&lt;/code&gt;. If &lt;code&gt;mem&lt;/code&gt; is an &lt;code&gt;importedMembership&lt;/code&gt;, this is the &lt;code&gt;visibility&lt;/code&gt; of its Import. Otherwise it is the &lt;code&gt;visibility&lt;/code&gt; of the &lt;code&gt;Membership&lt;/code&gt; itself.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-visibilityOf_Membership"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-visibilityOf_Membership-mem" xmi:type="uml:Parameter" name="mem">
              <type xmi:idref="Root-Namespaces-Membership"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-visibilityOf_Membership-" xmi:type="uml:Parameter" name="">
              <type xmi:idref="Root-Namespaces-VisibilityKind"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-visibilityOf_Membership-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean" xmi:type="uml:Operation" name="visibleMemberships">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let visibleMemberships : OrderedSet(Membership) =      if includeAll then membershipsOfVisibility(null, excluded)     else membershipsOfVisibility(VisibilityKind::public, excluded)     endif in if not isRecursive then visibleMemberships else visibleMemberships-&gt;union(ownedMember-&gt;     selectAsKind(Namespace).     select(includeAll or owningMembership.visibility = VisibilityKind::public)-&gt;     visibleMemberships(excluded-&gt;including(self), true, includeAll)) endif " language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If &lt;code&gt;includeAll = true&lt;/code&gt;, then return all the &lt;code&gt;Memberships&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt;. Otherwise, return only the publicly visible &lt;code&gt;Memberships&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt;, including &lt;code&gt;ownedMemberships&lt;/code&gt; that have a &lt;code&gt;visibility&lt;/code&gt; of &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;Memberships&lt;/code&gt; imported with a &lt;code&gt;visibility&lt;/code&gt; of &lt;code&gt;public&lt;/code&gt;. If &lt;code&gt;isRecursive = true&lt;/code&gt;, also recursively include all visible &lt;code&gt;Memberships&lt;/code&gt; of any &lt;code&gt;public&lt;/code&gt; owned &lt;code&gt;Namespaces&lt;/code&gt;, or, if &lt;code&gt;IncludeAll = true&lt;/code&gt;, all &lt;code&gt;Memberships&lt;/code&gt; of all owned &lt;code&gt;Namespaces&lt;/code&gt;. When computing imported &lt;code&gt;Memberships&lt;/code&gt;, ignore this &lt;code&gt;Namespace&lt;/code&gt; and any &lt;code&gt;Namespaces&lt;/code&gt; in the given &lt;code&gt;excluded&lt;/code&gt; set.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-isRecursive" xmi:type="uml:Parameter" name="isRecursive">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-includeAll" xmi:type="uml:Parameter" name="includeAll">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-visibleMemberships_Namespace_Boolean_Boolean-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace" xmi:type="uml:Operation" name="importedMemberships">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="ownedImport.importedMemberships(excluded-&gt;including(self))" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Derive the imported &lt;code&gt;Memberships&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt; as the &lt;code&gt;importedMembership&lt;/code&gt; of all &lt;code&gt;ownedImports&lt;/code&gt;, excluding those Imports whose &lt;code&gt;importOwningNamespace&lt;/code&gt; is in the &lt;code&gt;excluded&lt;/code&gt; set, and excluding &lt;code&gt;Memberships&lt;/code&gt; that have distinguisibility collisions with each other or with any &lt;code&gt;ownedMembership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-importedMemberships_Namespace"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace-" xmi:type="uml:Parameter" isOrdered="true" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-importedMemberships_Namespace--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-importedMemberships_Namespace-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace" xmi:type="uml:Operation" name="membershipsOfVisibility">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="ownedMembership-&gt;     select(mem | visibility = null or mem.visibility = visibility)-&gt;     union(ownedImport-&gt;         select(imp | visibility = null or imp.visibility = visibility).         importedMemberships(excluded-&gt;including(self)))" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If &lt;code&gt;visibility&lt;/code&gt; is not null, return the &lt;code&gt;Memberships&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt; with the given &lt;code&gt;visibility&lt;/code&gt;, including &lt;code&gt;ownedMemberships&lt;/code&gt; with the given &lt;code&gt;visibility&lt;/code&gt; and &lt;code&gt;Memberships&lt;/code&gt; imported with the given &lt;code&gt;visibility&lt;/code&gt;. If &lt;code&gt;visibility&lt;/code&gt; is null, return all &lt;code&gt;ownedMemberships&lt;/code&gt; and imported &lt;code&gt;Memberships&lt;/code&gt; regardless of visibility. When computing imported &lt;code&gt;Memberships&lt;/code&gt;, ignore this &lt;code&gt;Namespace&lt;/code&gt; and any &lt;code&gt;Namespaces&lt;/code&gt; in the given &lt;code&gt;excluded&lt;/code&gt; set.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-visibility" xmi:type="uml:Parameter" name="visibility">
              <lowerValue xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-visibility-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-VisibilityKind"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-visibility-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-excluded" xmi:type="uml:Parameter" name="excluded">
              <lowerValue xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-excluded-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-excluded-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-membershipsOfVisibility_VisibilityKind_Namespace-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-resolve_String" xmi:type="uml:Operation" name="resolve">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-resolve_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-resolve_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let qualification : String = qualificationOf(qualifiedName) in let name : String = unqualifiedNameOf(qualifiedName) in if qualification = null then resolveLocal(name) else if qualification = '$' then  resolveGlobal(name) else      let namespaceMembership : Membership = resolve(qualification) in     if namespaceMembership = null or         not namespaceMembership.memberElement.oclIsKindOf(Namespace)      then null     else          namespaceMembership.memberElement.oclAsType(Namespace).         resolveVisible(name)      endif endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-resolve_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Resolve the given qualified name to the named &lt;code&gt;Membership&lt;/code&gt; (if any), starting with this &lt;code&gt;Namespace&lt;/code&gt; as the local scope. The qualified name string must conform to the concrete syntax of the KerML textual notation. According to the KerML name resolution rules every qualified name will resolve to either a single &lt;code&gt;Membership&lt;/code&gt;, or to none.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-resolve_String"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolve_String-qualifiedName" xmi:type="uml:Parameter" name="qualifiedName">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolve_String-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-resolve_String--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-resolve_String--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-resolve_String-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-resolveGlobal_String" xmi:type="uml:Operation" name="resolveGlobal">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-resolveGlobal_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-resolveGlobal_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="No OCL" language="English" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-resolveGlobal_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Resolve the given qualified name to the named &lt;code&gt;Membership&lt;/code&gt; (if any) in the effective global &lt;code&gt;Namespace&lt;/code&gt; that is the outermost naming scope. The qualified name string must conform to the concrete syntax of the KerML textual notation.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-resolveGlobal_String"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolveGlobal_String-qualifiedName" xmi:type="uml:Parameter" name="qualifiedName">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolveGlobal_String-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-resolveGlobal_String--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-resolveGlobal_String--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-resolveGlobal_String-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-resolveLocal_String" xmi:type="uml:Operation" name="resolveLocal">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-resolveLocal_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-resolveLocal_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if owningNamespace = null then resolveGlobal(name) else     let memberships : Membership = membership-&gt;         select(memberShortName = name or memberName = name) in     if memberships-&gt;notEmpty() then memberships-&gt;first()     else owningNamspace.resolveLocal(name)     endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-resolveLocal_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Resolve a simple &lt;code&gt;name&lt;/code&gt; starting with this &lt;code&gt;Namespace&lt;/code&gt; as the local scope, and continuing with containing outer scopes as necessary. However, if this &lt;code&gt;Namespace&lt;/code&gt; is a root &lt;code&gt;Namespace&lt;/code&gt;, then the resolution is done directly in global scope.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-resolveLocal_String"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolveLocal_String-name" xmi:type="uml:Parameter" name="name">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolveLocal_String-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-resolveLocal_String--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-resolveLocal_String--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-resolveLocal_String-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-resolveVisible_String" xmi:type="uml:Operation" name="resolveVisible">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-resolveVisible_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-resolveVisible_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="let memberships : Sequence(Membership) =     visibleMemberships(Set{}, false, false)-&gt;     select(memberShortName = name or memberName = name) in if memberships-&gt;isEmpty() then null else memberships-&gt;first() endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-resolveVisible_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Resolve a simple name from the visible &lt;code&gt;Memberships&lt;/code&gt; of this &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-resolveVisible_String"/>
            </ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolveVisible_String-name" xmi:type="uml:Parameter" name="name">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-resolveVisible_String-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-resolveVisible_String--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Membership"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-resolveVisible_String--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-resolveVisible_String-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-qualificationOf_String" xmi:type="uml:Operation" name="qualificationOf">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-qualificationOf_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-qualificationOf_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="No OCL" language="English" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-qualificationOf_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return a string with valid KerML syntax representing the qualification part of a given &lt;code&gt;qualifiedName&lt;/code&gt;, that is, a qualified name with all the segment names of the given name except the last. If the given &lt;code&gt;qualifiedName&lt;/code&gt; has only one segment, then return null.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-qualificationOf_String"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-qualificationOf_String-qualifiedName" xmi:type="uml:Parameter" name="qualifiedName">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-qualificationOf_String-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Namespaces-Namespace-qualificationOf_String--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
              <upperValue xmi:id="Root-Namespaces-Namespace-qualificationOf_String--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-qualificationOf_String-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Namespaces-Namespace-unqualifiedNameOf_String" xmi:type="uml:Operation" name="unqualifiedNameOf">
            <bodyCondition xmi:id="Root-Namespaces-Namespace-unqualifiedNameOf_String-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Namespace-unqualifiedNameOf_String-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="No OCL" language="English" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Namespace-unqualifiedNameOf_String-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return the simple name that is the last segment name of the given &lt;code&gt;qualifiedName&lt;/code&gt;. If this segment name has the form of a KerML unrestricted name, then &quot;unescape&quot; it by removing the surrounding single quotes and replacing all escape sequences with the specified character.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-unqualifiedNameOf_String"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-unqualifiedNameOf_String-qualifiedName" xmi:type="uml:Parameter" name="qualifiedName">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Namespace-unqualifiedNameOf_String-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Namespace-unqualifiedNameOf_String-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Root-Namespaces-Namespace-validateNamespaceDistinguishibility" xmi:type="uml:Constraint" name="validateNamespaceDistinguishibility">
            <constrainedElement xmi:idref="Root-Namespaces-Namespace"/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-validateNamespaceDistinguishibility-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;All &lt;code&gt;memberships&lt;/code&gt; of a &lt;code&gt;Namespace&lt;/code&gt; must be distinguishable from each other.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-validateNamespaceDistinguishibility"/>
            </ownedComment>
            <specification xmi:id="Root-Namespaces-Namespace-validateNamespaceDistinguishibility-specification0" xmi:type="uml:OpaqueExpression" body="membership-&gt;forAll(m1 | membership-&gt;forAll(m2 | m1 &lt;&gt; m2 implies m1.isDistinguishableFrom(m2)))" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Namespaces-Namespace-deriveNamespaceImportedMembership" xmi:type="uml:Constraint" name="deriveNamespaceImportedMembership">
            <constrainedElement xmi:idref="Root-Namespaces-Namespace"/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-deriveNamespaceImportedMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;importedMemberships&lt;/code&gt; of a &lt;code&gt;Namespace&lt;/code&gt; are derived using the &lt;code&gt;importedMemberships()&lt;/code&gt; operation, with no initially &lt;code&gt;excluded&lt;/code&gt; &lt;code&gt;Namespaces&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-deriveNamespaceImportedMembership"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-Namespace-deriveNamespaceImportedMembership-specification0" xmi:type="uml:OpaqueExpression" body="importedMembership = importedMemberships(Set{})" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedMembership" xmi:type="uml:Constraint" name="deriveNamespaceOwnedMembership">
            <constrainedElement xmi:idref="Root-Namespaces-Namespace"/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMemberships&lt;/code&gt; of a &lt;code&gt;Namespace&lt;/code&gt; are all its &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Memberships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-deriveNamespaceOwnedMembership"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedMembership-specification0" xmi:type="uml:OpaqueExpression" body="ownedMembership = ownedRelationship-&gt;selectByKind(Membership)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedMember" xmi:type="uml:Constraint" name="deriveNamespaceOwnedMember">
            <constrainedElement xmi:idref="Root-Namespaces-Namespace"/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedMember-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedMembers&lt;/code&gt; of a &lt;code&gt;Namespace&lt;/code&gt; are the &lt;code&gt;ownedMemberElements&lt;/code&gt; of all its &lt;code&gt;ownedMemberships&lt;/code&gt; that are &lt;code&gt;OwningMemberships&lt;/code&gt;.">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-deriveNamespaceOwnedMember"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedMember-specification0" xmi:type="uml:OpaqueExpression" body="ownedMember = ownedMembership-&gt;selectByKind(OwningMembership).ownedMemberElement" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Namespaces-Namespace-deriveNamespaceMembers" xmi:type="uml:Constraint" name="deriveNamespaceMembers">
            <constrainedElement xmi:idref="Root-Namespaces-Namespace"/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-deriveNamespaceMembers-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;members&lt;/code&gt; of a &lt;code&gt;Namespace&lt;/code&gt; are the &lt;code&gt;memberElements&lt;/code&gt; of all its &lt;code&gt;memberships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-deriveNamespaceMembers"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-Namespace-deriveNamespaceMembers-specification0" xmi:type="uml:OpaqueExpression" body="member = membership.memberElement" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedImport" xmi:type="uml:Constraint" name="deriveNamespaceOwnedImport">
            <constrainedElement xmi:idref="Root-Namespaces-Namespace"/>
            <ownedComment xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedImport-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedImports&lt;/code&gt; of a &lt;code&gt;Namespace&lt;/code&gt; are all its &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Imports&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Namespace-deriveNamespaceOwnedImport"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-Namespace-deriveNamespaceOwnedImport-specification0" xmi:type="uml:OpaqueExpression" body="ownedImport = ownedRelationship-&gt;selectByKind(Import)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_importedMembership_importingNamespace" xmi:type="uml:Association" name="A_importedMembership_importingNamespace">
          <memberEnd xmi:idref="Root-Namespaces-Namespace-importedMembership"/>
          <memberEnd xmi:idref="Root-Namespaces-A_importedMembership_importingNamespace-importingNamespace"/>
          <ownedEnd xmi:id="Root-Namespaces-A_importedMembership_importingNamespace-importingNamespace" xmi:type="uml:Property" isDerived="true" name="importingNamespace">
            <association xmi:idref="Root-Namespaces-A_importedMembership_importingNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-A_importedMembership_importingNamespace-importingNamespace-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-A_importedMembership_importingNamespace-importingNamespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Namespace with a certain &lt;code&gt;importedMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-A_importedMembership_importingNamespace-importingNamespace"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace"/>
            <type xmi:idref="Root-Namespaces-Namespace"/>
            <upperValue xmi:id="Root-Namespaces-A_importedMembership_importingNamespace-importingNamespace-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-Membership" xmi:type="uml:Class" name="Membership">
          <generalization xmi:id="Root-Namespaces-Membership-_generalization.Root-Elements-Relationship" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Relationship"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Namespaces-Membership-memberElementId" xmi:type="uml:Property" isDerived="true" name="memberElementId">
            <ownedComment xmi:id="Root-Namespaces-Membership-memberElementId-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;elementId&lt;/code&gt; of the &lt;code&gt;memberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-memberElementId"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Membership-membershipOwningNamespace" xmi:type="uml:Property" isDerived="true" name="membershipOwningNamespace">
            <association xmi:idref="Root-Namespaces-A_ownedMembership_membershipOwningNamespace"/>
            <lowerValue xmi:id="Root-Namespaces-Membership-membershipOwningNamespace-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-Membership-membershipOwningNamespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Namespace&lt;/code&gt; of which the &lt;code&gt;memberElement&lt;/code&gt; becomes a &lt;code&gt;member&lt;/code&gt; due to this &lt;code&gt;Membership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-membershipOwningNamespace"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-source"/>
            <subsettedProperty xmi:idref="Root-Namespaces-A_membership_membershipNamespace-membershipNamespace"/>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            <type xmi:idref="Root-Namespaces-Namespace"/>
            <upperValue xmi:id="Root-Namespaces-Membership-membershipOwningNamespace-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Membership-memberShortName" xmi:type="uml:Property" name="memberShortName">
            <lowerValue xmi:id="Root-Namespaces-Membership-memberShortName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Membership-memberShortName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The short name of the &lt;code&gt;memberElement&lt;/code&gt; relative to the &lt;code&gt;membershipOwningNamespace&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-memberShortName"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Namespaces-Membership-memberShortName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Membership-memberElement" xmi:type="uml:Property" name="memberElement">
            <association xmi:idref="Root-Namespaces-A_memberElement_membership"/>
            <lowerValue xmi:id="Root-Namespaces-Membership-memberElement-lowerValue" xmi:type="uml:LiteralInteger" name="" value="1"/>
            <ownedComment xmi:id="Root-Namespaces-Membership-memberElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Element&lt;/code&gt; that becomes a &lt;code&gt;member&lt;/code&gt; of the &lt;code&gt;membershipOwningNamespace&lt;/code&gt; due to this &lt;code&gt;Membership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-memberElement"/>
</ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-Relationship-target"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Namespaces-Membership-memberElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Membership-memberName" xmi:type="uml:Property" name="memberName">
            <lowerValue xmi:id="Root-Namespaces-Membership-memberName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-Membership-memberName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The name of the &lt;code&gt;memberElement&lt;/code&gt; relative to the &lt;code&gt;membershipOwningNamespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-memberName"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Namespaces-Membership-memberName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Namespaces-Membership-visibility" xmi:type="uml:Property" name="visibility">
            <defaultValue xmi:id="Root-Namespaces-Membership-visibility-defaultValue0" xmi:type="uml:InstanceValue" name="">
              <instance xmi:idref="Root-Namespaces-VisibilityKind-public"/>
            </defaultValue>
            <ownedComment xmi:id="Root-Namespaces-Membership-visibility-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether or not the &lt;code&gt;Membership&lt;/code&gt; of the &lt;code&gt;memberElement&lt;/code&gt; in the &lt;code&gt;membershipOwningNamespace&lt;/code&gt; is publicly visible outside that &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-visibility"/>
</ownedComment>
            <type xmi:idref="Root-Namespaces-VisibilityKind"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Namespaces-Membership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Membership&lt;/code&gt; is a &lt;code&gt;Relationship&lt;/code&gt; between a &lt;code&gt;Namespace&lt;/code&gt; and an &lt;code&gt;Element&lt;/code&gt; that indicates the &lt;code&gt;Element&lt;/code&gt; is a &lt;code&gt;member&lt;/code&gt; of (i.e., is contained in) the Namespace. Any &lt;code&gt;memberNames&lt;/code&gt; specify how the &lt;code&gt;memberElement&lt;/code&gt; is identified in the &lt;code&gt;Namespace&lt;/code&gt; and the &lt;code&gt;visibility&lt;/code&gt; specifies whether or not the &lt;code&gt;memberElement&lt;/code&gt; is publicly visible from outside the &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If a &lt;code&gt;Membership&lt;/code&gt; is an &lt;code&gt;OwningMembership&lt;/code&gt;, then it owns its &lt;code&gt;memberElement&lt;/code&gt;, which becomes an &lt;code&gt;ownedMember&lt;/code&gt; of the &lt;code&gt;membershipOwningNamespace&lt;/code&gt;. Otherwise, the &lt;code&gt;memberNames&lt;/code&gt; of a &lt;code&gt;Membership&lt;/code&gt; are effectively aliases within the &lt;code&gt;membershipOwningNamespace&lt;/code&gt; for an &lt;code&gt;Element&lt;/code&gt; with a separate &lt;code&gt;OwningMembership&lt;/code&gt; in the same or a different &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Namespaces-Membership"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Namespaces-Membership-isDistinguishableFrom_Membership" xmi:type="uml:Operation" name="isDistinguishableFrom">
            <bodyCondition xmi:id="Root-Namespaces-Membership-isDistinguishableFrom_Membership-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Namespaces-Membership-isDistinguishableFrom_Membership-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="not (memberElement.oclKindOf(other.memberElement.oclType()) or      other.memberElement.oclKindOf(memberElement.oclType())) or (shortMemberName = null or     (shortMemberName &lt;&gt; other.shortMemberName and      shortMemberName &lt;&gt; other.memberName)) and (memberName = null or     (memberName &lt;&gt; other.shortMemberName and      memberName &lt;&gt; other.memberName))) " language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Namespaces-Membership-isDistinguishableFrom_Membership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this &lt;code&gt;Membership&lt;/code&gt; is distinguishable from a given &lt;code&gt;other&lt;/code&gt; &lt;code&gt;Membership&lt;/code&gt;. By default, this is true if this &lt;code&gt;Membership&lt;/code&gt; has no &lt;code&gt;memberShortName&lt;/code&gt; or &lt;code&gt;memberName&lt;/code&gt;; or each of the &lt;code&gt;memberShortName&lt;/code&gt; and &lt;code&gt;memberName&lt;/code&gt; are different than both of those of the &lt;code&gt;other&lt;/code&gt; &lt;code&gt;Membership&lt;/code&gt;; or neither of the metaclasses of the &lt;code&gt;memberElement&lt;/code&gt; of this &lt;code&gt;Membership&lt;/code&gt; and the &lt;code&gt;memberElement&lt;/code&gt; of the &lt;code&gt;other&lt;/code&gt; &lt;code&gt;Membership&lt;/code&gt; conform to the other. But this may be overridden in specializations of &lt;code&gt;Membership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-isDistinguishableFrom_Membership"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Namespaces-Membership-isDistinguishableFrom_Membership-other" xmi:type="uml:Parameter" name="other">
              <type xmi:idref="Root-Namespaces-Membership"/>
            </ownedParameter>
            <ownedParameter xmi:id="Root-Namespaces-Membership-isDistinguishableFrom_Membership-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Namespaces-Membership-isDistinguishableFrom_Membership-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Root-Namespaces-Membership-deriveMembershipMemberElementId" xmi:type="uml:Constraint" name="deriveMembershipMemberElementId">
            <constrainedElement xmi:idref="Root-Namespaces-Membership"/>
            <ownedComment xmi:id="Root-Namespaces-Membership-deriveMembershipMemberElementId-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;memberElementId&lt;/code&gt; of a &lt;code&gt;Membership&lt;/code&gt; is the &lt;code&gt;elementId&lt;/code&gt; of its &lt;code&gt;memberElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-Membership-deriveMembershipMemberElementId"/>
</ownedComment>
            <specification xmi:id="Root-Namespaces-Membership-deriveMembershipMemberElementId-specification0" xmi:type="uml:OpaqueExpression" body="memberElementId = memberElement.elementId" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_member_namespace" xmi:type="uml:Association" name="A_member_namespace">
          <memberEnd xmi:idref="Root-Namespaces-Namespace-member"/>
          <memberEnd xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
          <ownedEnd xmi:id="Root-Namespaces-A_member_namespace-namespace" xmi:type="uml:Property" isDerived="true" name="namespace">
            <association xmi:idref="Root-Namespaces-A_member_namespace"/>
            <lowerValue xmi:id="Root-Namespaces-A_member_namespace-namespace-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-A_member_namespace-namespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Namespace the has a certain Element as a &lt;code&gt;member&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            </ownedComment>
            <type xmi:idref="Root-Namespaces-Namespace"/>
            <upperValue xmi:id="Root-Namespaces-A_member_namespace-namespace-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-VisibilityKind" xmi:type="uml:Enumeration" name="VisibilityKind">
          <ownedComment xmi:id="Root-Namespaces-VisibilityKind-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;&lt;code&gt;VisibilityKind&lt;/code&gt; is an enumeration whose literals specify the visibility of a &lt;code&gt;Membership&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; in a &lt;code&gt;Namespace&lt;/code&gt; outside of that &lt;code&gt;Namespace&lt;/code&gt;. Note that &amp;quot;visibility&amp;quot; specifically restricts whether an &lt;code&gt;Element&lt;/code&gt; in a &lt;code&gt;Namespace&lt;/code&gt; may be referenced by name from outside the &lt;code&gt;Namespace&lt;/code&gt; and only otherwise restricts access to an &lt;code&gt;Element&lt;/code&gt; as provided by specific constraints in the abstract syntax (e.g., preventing the import or inheritance of private &lt;code&gt;Elements&lt;/code&gt;).&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Namespaces-VisibilityKind"/>
</ownedComment>
          <ownedLiteral xmi:id="Root-Namespaces-VisibilityKind-private" xmi:type="uml:EnumerationLiteral" name="private">
            <ownedComment xmi:id="Root-Namespaces-VisibilityKind-private-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Indicates a &lt;code&gt;Membership&lt;/code&gt; is not visible outside its owning &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-VisibilityKind-private"/>
            </ownedComment>
          </ownedLiteral>
          <ownedLiteral xmi:id="Root-Namespaces-VisibilityKind-protected" xmi:type="uml:EnumerationLiteral" name="protected">
            <ownedComment xmi:id="Root-Namespaces-VisibilityKind-protected-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An intermediate level of visibility between &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt;. By default, it is equivalent to &lt;code&gt;private&lt;/code&gt; for the purposes of normal access to and import of &lt;code&gt;Elements&lt;/code&gt; from a &lt;code&gt;Namespace&lt;/code&gt;. However, other &lt;code&gt;Relationships&lt;/code&gt; may be specified to include &lt;code&gt;Memberships&lt;/code&gt; with &lt;code&gt;protected&lt;/code&gt; visibility in the list of &lt;code&gt;memberships&lt;/code&gt; for a &lt;code&gt;Namespace&lt;/code&gt; (e.g., &lt;code&gt;Specialization&lt;/code&gt;).&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-VisibilityKind-protected"/>
</ownedComment>
          </ownedLiteral>
          <ownedLiteral xmi:id="Root-Namespaces-VisibilityKind-public" xmi:type="uml:EnumerationLiteral" name="public">
            <ownedComment xmi:id="Root-Namespaces-VisibilityKind-public-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Indicates that a &lt;code&gt;Membership&lt;/code&gt; is publicly visible outside its owning &lt;code&gt;Namespace&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-VisibilityKind-public"/>
            </ownedComment>
          </ownedLiteral>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_importedElement_membershipImport" xmi:type="uml:Association" name="A_importedElement_membershipImport">
          <memberEnd xmi:idref="Root-Namespaces-Import-importedElement"/>
          <memberEnd xmi:idref="Root-Namespaces-A_importedElement_membershipImport-membershipImport"/>
          <ownedEnd xmi:id="Root-Namespaces-A_importedElement_membershipImport-membershipImport" xmi:type="uml:Property" isDerived="true" name="membershipImport">
            <association xmi:idref="Root-Namespaces-A_importedElement_membershipImport"/>
            <lowerValue xmi:id="Root-Namespaces-A_importedElement_membershipImport-membershipImport-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-A_importedElement_membershipImport-membershipImport-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An Import with a certain &lt;code&gt;importedElement&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Namespaces-A_importedElement_membershipImport-membershipImport"/>
            </ownedComment>
            <type xmi:idref="Root-Namespaces-Import"/>
            <upperValue xmi:id="Root-Namespaces-A_importedElement_membershipImport-membershipImport-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_importedMembership_import" xmi:type="uml:Association" name="A_importedMembership_import">
          <memberEnd xmi:idref="Root-Namespaces-MembershipImport-importedMembership"/>
          <memberEnd xmi:idref="Root-Namespaces-A_importedMembership_import-import"/>
          <ownedEnd xmi:id="Root-Namespaces-A_importedMembership_import-import" xmi:type="uml:Property" name="import">
            <association xmi:idref="Root-Namespaces-A_importedMembership_import"/>
            <lowerValue xmi:id="Root-Namespaces-A_importedMembership_import-import-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-A_importedMembership_import-import-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A MembershipImport that has a certain &lt;code&gt;importedMembership&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-A_importedMembership_import-import"/>
            </ownedComment>
            <redefinedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Root-Namespaces-MembershipImport"/>
            <upperValue xmi:id="Root-Namespaces-A_importedMembership_import-import-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_ownedMemberElement_owningMembership" xmi:type="uml:Association" name="A_ownedMemberElement_owningMembership">
          <memberEnd xmi:idref="Root-Namespaces-OwningMembership-ownedMemberElement"/>
          <memberEnd xmi:idref="Root-Elements-Element-owningMembership"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_importedNamespace_import" xmi:type="uml:Association" name="A_importedNamespace_import">
          <memberEnd xmi:idref="Root-Namespaces-NamespaceImport-importedNamespace"/>
          <memberEnd xmi:idref="Root-Namespaces-A_importedNamespace_import-import"/>
          <ownedEnd xmi:id="Root-Namespaces-A_importedNamespace_import-import" xmi:type="uml:Property" name="import">
            <association xmi:idref="Root-Namespaces-A_importedNamespace_import"/>
            <lowerValue xmi:id="Root-Namespaces-A_importedNamespace_import-import-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Namespaces-A_importedNamespace_import-import-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A NamespaceImport that has a certain &lt;code&gt;importedNamespace&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Namespaces-A_importedNamespace_import-import"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
            <type xmi:idref="Root-Namespaces-NamespaceImport"/>
            <upperValue xmi:id="Root-Namespaces-A_importedNamespace_import-import-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Namespaces-A_ownedMembership_membershipOwningNamespace" xmi:type="uml:Association" name="A_ownedMembership_membershipOwningNamespace">
          <memberEnd xmi:idref="Root-Namespaces-Namespace-ownedMembership"/>
          <memberEnd xmi:idref="Root-Namespaces-Membership-membershipOwningNamespace"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:id="Root-Elements" xmi:type="uml:Package" URI="" name="Elements">
        <packagedElement xmi:id="Root-Elements-A_ownedRelatedElement_owningRelationship" xmi:type="uml:Association" name="A_ownedRelatedElement_owningRelationship">
          <memberEnd xmi:idref="Root-Elements-Relationship-ownedRelatedElement"/>
          <memberEnd xmi:idref="Root-Elements-Element-owningRelationship"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_documentation_documentedElement" xmi:type="uml:Association" name="A_documentation_documentedElement">
          <memberEnd xmi:idref="Root-Elements-Element-documentation"/>
          <memberEnd xmi:idref="Root-Annotations-Documentation-documentedElement"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_ownedAnnotation_owningAnnotatedElement" xmi:type="uml:Association" name="A_ownedAnnotation_owningAnnotatedElement">
          <memberEnd xmi:idref="Root-Elements-Element-ownedAnnotation"/>
          <memberEnd xmi:idref="Root-Annotations-Annotation-owningAnnotatedElement"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_source_sourceRelationship" xmi:type="uml:Association" name="A_source_sourceRelationship">
          <memberEnd xmi:idref="Root-Elements-Relationship-source"/>
          <memberEnd xmi:idref="Root-Elements-A_source_sourceRelationship-sourceRelationship"/>
          <ownedEnd xmi:id="Root-Elements-A_source_sourceRelationship-sourceRelationship" xmi:type="uml:Property" name="sourceRelationship">
            <association xmi:idref="Root-Elements-A_source_sourceRelationship"/>
            <lowerValue xmi:id="Root-Elements-A_source_sourceRelationship-sourceRelationship-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Elements-A_relatedElement_relationship-relationship"/>
            <type xmi:idref="Root-Elements-Relationship"/>
            <upperValue xmi:id="Root-Elements-A_source_sourceRelationship-sourceRelationship-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_ownedRelationship_owningRelatedElement" xmi:type="uml:Association" name="A_ownedRelationship_owningRelatedElement">
          <memberEnd xmi:idref="Root-Elements-Element-ownedRelationship"/>
          <memberEnd xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-Relationship" xmi:type="uml:Class" isAbstract="true" name="Relationship">
          <generalization xmi:id="Root-Elements-Relationship-_generalization.Root-Elements-Element" xmi:type="uml:Generalization">
            <general xmi:idref="Root-Elements-Element"/>
          </generalization>
          <ownedAttribute xmi:id="Root-Elements-Relationship-relatedElement" xmi:type="uml:Property" isDerived="true" isOrdered="true" isUnique="false" name="relatedElement">
            <association xmi:idref="Root-Elements-A_relatedElement_relationship"/>
            <lowerValue xmi:id="Root-Elements-Relationship-relatedElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Relationship-relatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Elements that are related by this Relationship, derived as the union of the &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; Elements of the Relationship.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-relatedElement"/>
</ownedComment>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Elements-Relationship-relatedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Relationship-target" xmi:type="uml:Property" isOrdered="true" name="target">
            <association xmi:idref="Root-Elements-A_target_targetRelationship"/>
            <lowerValue xmi:id="Root-Elements-Relationship-target-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Relationship-target-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;relatedElements&lt;/code&gt; to which this Relationship is considered to be directed.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Elements-Relationship-target"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-relatedElement"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Elements-Relationship-target-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Relationship-source" xmi:type="uml:Property" isOrdered="true" name="source">
            <association xmi:idref="Root-Elements-A_source_sourceRelationship"/>
            <lowerValue xmi:id="Root-Elements-Relationship-source-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Relationship-source-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;relatedElements&lt;/c ode&gt; from which this Relationship is considered to be directed.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-source"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-relatedElement"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Elements-Relationship-source-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Relationship-owningRelatedElement" xmi:type="uml:Property" name="owningRelatedElement">
            <association xmi:idref="Root-Elements-A_ownedRelationship_owningRelatedElement"/>
            <lowerValue xmi:id="Root-Elements-Relationship-owningRelatedElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Relationship-owningRelatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;tt&gt;relatedElement&lt;/tt&gt; of this Relationship that owns the Relationship, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-owningRelatedElement"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-relatedElement"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Elements-Relationship-owningRelatedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Relationship-ownedRelatedElement" xmi:type="uml:Property" isOrdered="true" name="ownedRelatedElement">
            <association xmi:idref="Root-Elements-A_ownedRelatedElement_owningRelationship"/>
            <lowerValue xmi:id="Root-Elements-Relationship-ownedRelatedElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Relationship-ownedRelatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;tt&gt;relatedElements&lt;/tt&gt; of this Relationship that are owned by the Relationship.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-ownedRelatedElement"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Relationship-relatedElement"/>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Elements-Relationship-ownedRelatedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Relationship-isImplied" xmi:type="uml:Property" name="isImplied">
            <defaultValue xmi:id="Root-Elements-Relationship-isImplied-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Root-Elements-Relationship-isImplied-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this Relationship was generated by tooling to meet semantic rules, rather than being directly created by a modeler.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-isImplied"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Elements-Relationship-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;A &lt;code&gt;Relationship&lt;/code&gt; is an &lt;code&gt;Element&lt;/code&gt; that relates other &lt;code&gt;Element&lt;/code&gt;. Some of its &lt;code&gt;relatedElements&lt;/code&gt; may be owned, in which case those &lt;code&gt;ownedRelatedElements&lt;/code&gt; will be deleted from a model if their &lt;code&gt;owningRelationship&lt;/code&gt; is. A &lt;code&gt;Relationship&lt;/code&gt; may also be owned by another &lt;code&gt;Element&lt;/code&gt;, in which case the &lt;code&gt;ownedRelatedElements&lt;/code&gt; of the &lt;code&gt;Relationship&lt;/code&gt; are also considered to be transitively owned by the &lt;code&gt;owningRelatedElement&lt;/code&gt; of the &lt;code&gt;Relationship&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;The &lt;code&gt;relatedElements&lt;/code&gt; of a &lt;code&gt;Relationship&lt;/code&gt; are divided into &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt;. The &lt;code&gt;Relationship&lt;/code&gt; is considered to be directed from the &lt;code&gt;source&lt;/code&gt; to the &lt;code&gt;target&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt;. An undirected &lt;code&gt;Relationship&lt;/code&gt; may have either all &lt;code&gt;source&lt;/code&gt; or all &lt;code&gt;target&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;A &amp;quot;relationship &lt;code&gt;Element&lt;/code&gt;&amp;quot; in the abstract syntax is generically any &lt;code&gt;Element&lt;/code&gt; that is an instance of either &lt;code&gt;Relationship&lt;/code&gt; or a direct or indirect specialization of &lt;code&gt;Relationship&lt;/code&gt;. Any other kind of &lt;code&gt;Element&lt;/code&gt; is a &amp;quot;non-relationship &lt;code&gt;Element&lt;/code&gt;&amp;quot;. It is a convention of that non-relationship &lt;code&gt;Elements&lt;/code&gt; are &lt;em&gt;only&lt;/em&gt; related via reified relationship &lt;code&gt;Elements&lt;/code&gt;. Any meta-associations directly between non-relationship &lt;code&gt;Elements&lt;/code&gt; must be derived from underlying reified &lt;code&gt;Relationship&lt;/code&gt;.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Elements-Relationship"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Elements-Relationship-libraryNamespace_" xmi:type="uml:Operation" name="libraryNamespace">
            <bodyCondition xmi:id="Root-Elements-Relationship-libraryNamespace_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Elements-Relationship-libraryNamespace_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if owningRelatedElement &lt;&gt; null then owningRelatedElement.libraryNamespace() else if owningRelationship &lt;&gt; null then owningRelationship.libraryNamespace()  else null endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Elements-Relationship-libraryNamespace_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return whether this Relationship has either an &lt;code&gt;owningRelatedElement&lt;/code&gt; or &lt;code&gt;owningRelationship&lt;/code&gt; that is a library element.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-libraryNamespace_"/>
            </ownedComment>
            <ownedParameter xmi:id="Root-Elements-Relationship-libraryNamespace_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Elements-Relationship-libraryNamespace_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Elements-Relationship-libraryNamespace_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Elements-Relationship-libraryNamespace_-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Elements-Element-libraryNamespace_"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Elements-Relationship-path_" xmi:type="uml:Operation" name="path">
            <bodyCondition xmi:id="Root-Elements-Relationship-path_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Elements-Relationship-path_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if owningRelationship = null and owningRelatedElement &lt;&gt; null then     owningRelatedElement.path() + '/' +      owningRelatedElement.ownedRelationship-&gt;indexOf(self).toString()     -- A position index shall be converted to a decimal string representation      -- consisting of only decimal digits, with no sign, leading zeros or leading      -- or trailing whitespace. else self.oclAsType(Element).path() endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Elements-Relationship-path_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If the &lt;code&gt;owningRelationship&lt;/code&gt; of the &lt;code&gt;Relationship&lt;/code&gt; is null but its &lt;code&gt;owningRelatedElement&lt;/code&gt; is non-null, construct the &lt;code&gt;path&lt;/code&gt; using the position of the &lt;code&gt;Relationship&lt;/code&gt; in the list of &lt;code&gt;ownedRelationships&lt;/code&gt; of its &lt;code&gt;owningRelatedElement&lt;/code&gt;. Otherwise, return the &lt;code&gt;path&lt;/code&gt; of the &lt;code&gt;Relationship&lt;/code&gt; as specified for an &lt;code&gt;Element&lt;/code&gt; in general.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-path_"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Elements-Relationship-path_-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Elements-Relationship-path_-unnamed1"/>
            <redefinedOperation xmi:idref="Root-Elements-Element-path_"/>
          </ownedOperation>
          <ownedRule xmi:id="Root-Elements-Relationship-deriveRelationshipRelatedElement" xmi:type="uml:Constraint" name="deriveRelationshipRelatedElement">
            <constrainedElement xmi:idref="Root-Elements-Relationship"/>
            <ownedComment xmi:id="Root-Elements-Relationship-deriveRelationshipRelatedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;relatedElements&lt;/code&gt; of a &lt;code&gt;Relationship&lt;/code&gt; consist of all of its &lt;code&gt;source&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt; followed by all of its &lt;code&gt;target&lt;/code&gt; &lt;code&gt;Elements&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Relationship-deriveRelationshipRelatedElement"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Relationship-deriveRelationshipRelatedElement-specification0" xmi:type="uml:OpaqueExpression" body="relatedElement = source-&gt;union(target)" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_owner_ownedElement" xmi:type="uml:Association" name="A_owner_ownedElement">
          <memberEnd xmi:idref="Root-Elements-Element-owner"/>
          <memberEnd xmi:idref="Root-Elements-Element-ownedElement"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-Element" xmi:type="uml:Class" isAbstract="true" name="Element">
          <ownedAttribute xmi:id="Root-Elements-Element-owningMembership" xmi:type="uml:Property" isDerived="true" name="owningMembership">
            <association xmi:idref="Root-Namespaces-A_ownedMemberElement_owningMembership"/>
            <lowerValue xmi:id="Root-Elements-Element-owningMembership-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-owningMembership-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;owningRelationship&lt;/code&gt; of this &lt;code&gt;Element&lt;/code&gt;, if that &lt;code&gt;Relationship&lt;/code&gt; is a &lt;code&gt;Membership&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Elements-Element-owningMembership"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_memberElement_membership-membership"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-owningRelationship"/>
            <type xmi:idref="Root-Namespaces-OwningMembership"/>
            <upperValue xmi:id="Root-Elements-Element-owningMembership-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-owningRelationship" xmi:type="uml:Property" name="owningRelationship">
            <association xmi:idref="Root-Elements-A_ownedRelatedElement_owningRelationship"/>
            <lowerValue xmi:id="Root-Elements-Element-owningRelationship-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-owningRelationship-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Relationship for which this Element is an &lt;tt&gt;ownedRelatedElement&lt;/tt&gt;, if any.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Elements-Element-owningRelationship"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_relatedElement_relationship-relationship"/>
            <type xmi:idref="Root-Elements-Relationship"/>
            <upperValue xmi:id="Root-Elements-Element-owningRelationship-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-owningNamespace" xmi:type="uml:Property" isDerived="true" name="owningNamespace">
            <association xmi:idref="Root-Namespaces-A_ownedMember_owningNamespace"/>
            <lowerValue xmi:id="Root-Elements-Element-owningNamespace-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-owningNamespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;Namespace&lt;/code&gt; that owns this &lt;code&gt;Element&lt;/code&gt;, which is the &lt;code&gt;membershipOwningNamespace&lt;/code&gt; of the &lt;code&gt;owningMembership&lt;/code&gt; of this &lt;code&gt;Element&lt;/code&gt;, if any.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Elements-Element-owningNamespace"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Namespaces-A_member_namespace-namespace"/>
            <type xmi:idref="Root-Namespaces-Namespace"/>
            <upperValue xmi:id="Root-Elements-Element-owningNamespace-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-elementId" xmi:type="uml:Property" isID="true" name="elementId">
            <ownedComment xmi:id="Root-Elements-Element-elementId-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The globally unique identifier for this Element. This is intended to be set by tooling, and it must not change during the lifetime of the Element.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-elementId"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-ownedRelationship" xmi:type="uml:Property" isOrdered="true" name="ownedRelationship">
            <association xmi:idref="Root-Elements-A_ownedRelationship_owningRelatedElement"/>
            <lowerValue xmi:id="Root-Elements-Element-ownedRelationship-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-ownedRelationship-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Relationships for which this Element is the &lt;tt&gt;owningRelatedElement&lt;/tt&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-ownedRelationship"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-A_relatedElement_relationship-relationship"/>
            <type xmi:idref="Root-Elements-Relationship"/>
            <upperValue xmi:id="Root-Elements-Element-ownedRelationship-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-owner" xmi:type="uml:Property" isDerived="true" name="owner">
            <association xmi:idref="Root-Elements-A_owner_ownedElement"/>
            <lowerValue xmi:id="Root-Elements-Element-owner-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-owner-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The owner of this Element, derived as the &lt;code&gt;owningRelatedElement&lt;/code&gt; of the &lt;code&gt;owningRelationship&lt;/code&gt; of this Element, if any.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-owner"/>
            </ownedComment>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Elements-Element-owner-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-ownedElement" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedElement">
            <association xmi:idref="Root-Elements-A_owner_ownedElement"/>
            <lowerValue xmi:id="Root-Elements-Element-ownedElement-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-ownedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Elements owned by this Element, derived as the &lt;tt&gt;ownedRelatedElements&lt;/tt&gt; of the &lt;tt&gt;ownedRelationships&lt;/tt&gt; of this Element.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Elements-Element-ownedElement"/>
            </ownedComment>
            <type xmi:idref="Root-Elements-Element"/>
            <upperValue xmi:id="Root-Elements-Element-ownedElement-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-documentation" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="documentation">
            <association xmi:idref="Root-Elements-A_documentation_documentedElement"/>
            <lowerValue xmi:id="Root-Elements-Element-documentation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-documentation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The Documentation owned by this Element.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-documentation"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedElement"/>
            <type xmi:idref="Root-Annotations-Documentation"/>
            <upperValue xmi:id="Root-Elements-Element-documentation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-ownedAnnotation" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="ownedAnnotation">
            <association xmi:idref="Root-Elements-A_ownedAnnotation_owningAnnotatedElement"/>
            <lowerValue xmi:id="Root-Elements-Element-ownedAnnotation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-ownedAnnotation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedRelationships&lt;/code&gt; of this &lt;code&gt;Element&lt;/code&gt; that are &lt;code&gt;Annotations&lt;/code&gt;, for which this &lt;code&gt;Element&lt;/code&gt; is the &lt;code&gt;annotatedElement&lt;/code&gt;.&lt;/code&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-ownedAnnotation"/>
</ownedComment>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedRelationship"/>
            <subsettedProperty xmi:idref="Root-Annotations-A_annotatedElement_annotation-annotation"/>
            <type xmi:idref="Root-Annotations-Annotation"/>
            <upperValue xmi:id="Root-Elements-Element-ownedAnnotation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-textualRepresentation" xmi:type="uml:Property" isDerived="true" isOrdered="true" name="textualRepresentation">
            <association xmi:idref="Root-Elements-A_textualRepresentation_representedElement"/>
            <lowerValue xmi:id="Root-Elements-Element-textualRepresentation-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-textualRepresentation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;TextualRepresentations&lt;/code&gt; that annotate this &lt;code&gt;Element&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-textualRepresentation"/>
            </ownedComment>
            <subsettedProperty xmi:idref="Root-Annotations-A_annotatedElement_annotatingElement-annotatingElement"/>
            <subsettedProperty xmi:idref="Root-Elements-Element-ownedElement"/>
            <type xmi:idref="Root-Annotations-TextualRepresentation"/>
            <upperValue xmi:id="Root-Elements-Element-textualRepresentation-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-aliasIds" xmi:type="uml:Property" isOrdered="true" name="aliasIds">
            <lowerValue xmi:id="Root-Elements-Element-aliasIds-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-aliasIds-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Various alternative identifiers for this Element. Generally, these will be set by tools.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-aliasIds"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Elements-Element-aliasIds-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-declaredShortName" xmi:type="uml:Property" name="declaredShortName">
            <lowerValue xmi:id="Root-Elements-Element-declaredShortName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-declaredShortName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An optional alternative name for the &lt;code&gt;Element&lt;/code&gt; that is intended to be shorter or in some way more succinct than its primary &lt;code&gt;name&lt;/code&gt;. It may act as a modeler-specified identifier for the &lt;code&gt;Element&lt;/code&gt;, though it is then the responsibility of the modeler to maintain the uniqueness of this identifier within a model or relative to some other context.&lt;/p&gt;  ">
              <annotatedElement xmi:idref="Root-Elements-Element-declaredShortName"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Elements-Element-declaredShortName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-declaredName" xmi:type="uml:Property" name="declaredName">
            <lowerValue xmi:id="Root-Elements-Element-declaredName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-declaredName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The declared name of this &lt;code&gt;Element&lt;/code&gt;.&lt;/p&gt; ">
              <annotatedElement xmi:idref="Root-Elements-Element-declaredName"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Elements-Element-declaredName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-shortName" xmi:type="uml:Property" isDerived="true" name="shortName">
            <lowerValue xmi:id="Root-Elements-Element-shortName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-shortName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The short name to be used for this &lt;code&gt;Element&lt;/code&gt; during name resolution within its &lt;code&gt;owningNamespace&lt;/code&gt;. This is derived using the &lt;code&gt;effectiveShortName()&lt;/code&gt; operation. By default, it is the same as the &lt;code&gt;declaredShortName&lt;/code&gt;, but this is overridden for certain kinds of &lt;code&gt;Elements&lt;/code&gt; to compute a &lt;code&gt;shortName&lt;/code&gt; even when the &lt;code&gt;declaredName&lt;/code&gt; is null.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-shortName"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Elements-Element-shortName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-name" xmi:type="uml:Property" isDerived="true" name="name">
            <lowerValue xmi:id="Root-Elements-Element-name-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-name-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The name to be used for this &lt;code&gt;Element&lt;/code&gt; during name resolution within its &lt;code&gt;owningNamespace&lt;/code&gt;. This is derived using the &lt;code&gt;effectiveName()&lt;/code&gt; operation. By default, it is the same as the &lt;code&gt;declaredName&lt;/code&gt;, but this is overridden for certain kinds of &lt;code&gt;Elements&lt;/code&gt; to compute a &lt;code&gt;name&lt;/code&gt; even when the &lt;code&gt;declaredName&lt;/code&gt; is null.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-name"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Elements-Element-name-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-qualifiedName" xmi:type="uml:Property" isDerived="true" name="qualifiedName">
            <lowerValue xmi:id="Root-Elements-Element-qualifiedName-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-qualifiedName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The full ownership-qualified name of this &lt;code&gt;Element&lt;/code&gt;, represented in a form that is valid according to the KerML textual concrete syntax for qualified names (including use of unrestricted name notation and escaped characters, as necessary). The &lt;code&gt;qualifiedName&lt;/code&gt; is null if this &lt;code&gt;Element&lt;/code&gt; has no &lt;code&gt;owningNamespace&lt;/code&gt; or if there is not a complete ownership chain of named &lt;code&gt;Namespaces&lt;/code&gt; from a root &lt;code&gt;Namespace&lt;/code&gt; to this &lt;code&gt;Element&lt;/code&gt;. If the &lt;code&gt;owningNamespace&lt;/code&gt; has other &lt;code&gt;Elements&lt;/code&gt; with the same name as this one, then the &lt;code&gt;qualifiedName&lt;/code&gt; is null for all such &lt;code&gt;Elements&lt;/code&gt; other than the first.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-qualifiedName"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            <upperValue xmi:id="Root-Elements-Element-qualifiedName-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-isImpliedIncluded" xmi:type="uml:Property" name="isImpliedIncluded">
            <defaultValue xmi:id="Root-Elements-Element-isImpliedIncluded-defaultValue" xmi:type="uml:LiteralBoolean" name=""/>
            <ownedComment xmi:id="Root-Elements-Element-isImpliedIncluded-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether all necessary implied Relationships have been included in the &lt;code&gt;ownedRelationships&lt;/code&gt; of this Element. This property may be true, even if there are not actually any &lt;code&gt;ownedRelationships&lt;/code&gt; with &lt;code&gt;isImplied = true&lt;/code&gt;, meaning that no such Relationships are actually implied for this Element. However, if it is false, then &lt;code&gt;ownedRelationships&lt;/code&gt; may &lt;em&gt;not&lt;/em&gt; contain any implied Relationships. That is, either &lt;em&gt;all&lt;/em&gt; required implied Relationships must be included, or none of them.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-isImpliedIncluded"/>
</ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="Root-Elements-Element-isLibraryElement" xmi:type="uml:Property" isDerived="true" name="isLibraryElement">
            <ownedComment xmi:id="Root-Elements-Element-isLibraryElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Whether this Element is contained in the ownership tree of a library model.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-isLibraryElement"/>
            </ownedComment>
            <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#Boolean"/>
          </ownedAttribute>
          <ownedComment xmi:id="Root-Elements-Element-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Element&lt;/code&gt; is a constituent of a model that is uniquely identified relative to all other &lt;code&gt;Elements&lt;/code&gt;. It can have &lt;code&gt;Relationships&lt;/code&gt; with other &lt;code&gt;Elements&lt;/code&gt;. Some of these &lt;code&gt;Relationships&lt;/code&gt; might imply ownership of other &lt;code&gt;Elements&lt;/code&gt;, which means that if an &lt;code&gt;Element&lt;/code&gt; is deleted from a model, then so are all the &lt;code&gt;Elements&lt;/code&gt; that it owns.&lt;/p&gt; ">
            <annotatedElement xmi:idref="Root-Elements-Element"/>
</ownedComment>
          <ownedOperation xmi:id="Root-Elements-Element-escapedName_" xmi:type="uml:Operation" name="escapedName">
            <ownedComment xmi:id="Root-Elements-Element-escapedName_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return &lt;code&gt;name&lt;/code&gt;, if that is not null, otherwise the &lt;code&gt;shortName&lt;/code&gt;, if that is not null, otherwise null. If the returned value is non-null, it is returned as-is if it has the form of a basic name, or, otherwise, represented as a restricted name according to the lexical structure of the KerML textual notation (i.e., surrounded by single quote characters and with special characters escaped).&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-escapedName_"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Elements-Element-escapedName_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Elements-Element-escapedName_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
              <upperValue xmi:id="Root-Elements-Element-escapedName_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Elements-Element-effectiveShortName_" xmi:type="uml:Operation" name="effectiveShortName">
            <bodyCondition xmi:id="Root-Elements-Element-effectiveShortName_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Elements-Element-effectiveShortName_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="declaredShortName" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Elements-Element-effectiveShortName_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return an effective &lt;code&gt;shortName&lt;/code&gt; for this &lt;code&gt;Element&lt;/code&gt;. By default this is the same as its &lt;code&gt;declaredShortName&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-effectiveShortName_"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Elements-Element-effectiveShortName_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Elements-Element-effectiveShortName_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
              <upperValue xmi:id="Root-Elements-Element-effectiveShortName_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Elements-Element-effectiveShortName_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Elements-Element-effectiveName_" xmi:type="uml:Operation" name="effectiveName">
            <bodyCondition xmi:id="Root-Elements-Element-effectiveName_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Elements-Element-effectiveName_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="declaredName" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Elements-Element-effectiveName_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return an effective &lt;code&gt;name&lt;/code&gt; for this &lt;code&gt;Element&lt;/code&gt;. By default this is the same as its &lt;code&gt;declaredName&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-effectiveName_"/>
            </ownedComment>
            <ownedParameter xmi:id="Root-Elements-Element-effectiveName_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Elements-Element-effectiveName_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
              <upperValue xmi:id="Root-Elements-Element-effectiveName_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Elements-Element-effectiveName_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Elements-Element-libraryNamespace_" xmi:type="uml:Operation" name="libraryNamespace">
            <bodyCondition xmi:id="Root-Elements-Element-libraryNamespace_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Elements-Element-libraryNamespace_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if owningRelationship &lt;&gt; null then owningRelationship.libraryNamespace() else null endif" language="OCL2.0" name=""/>
            </bodyCondition>
            <ownedComment xmi:id="Root-Elements-Element-libraryNamespace_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;By default, return the library Namespace of the &lt;code&gt;owningRelationship&lt;/code&gt; of this Element, if it has one.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-libraryNamespace_"/>
            </ownedComment>
            <ownedParameter xmi:id="Root-Elements-Element-libraryNamespace_-" xmi:type="uml:Parameter" name="">
              <lowerValue xmi:id="Root-Elements-Element-libraryNamespace_--lowerValue" xmi:type="uml:LiteralInteger" name=""/>
              <type xmi:idref="Root-Namespaces-Namespace"/>
              <upperValue xmi:id="Root-Elements-Element-libraryNamespace_--upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="1"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Elements-Element-libraryNamespace_-unnamed1"/>
          </ownedOperation>
          <ownedOperation xmi:id="Root-Elements-Element-path_" xmi:type="uml:Operation" name="path">
            <bodyCondition xmi:id="Root-Elements-Element-path_-unnamed1" xmi:type="uml:Constraint" name="unnamed1">
              <specification xmi:id="Root-Elements-Element-path_-unnamed1-specification0" xmi:type="uml:OpaqueExpression" body="if qualifiedName &lt;&gt; null then qualifiedName else if owningRelationship &lt;&gt; null then     owningRelationship.path() + '/' +      owningRelationship.ownedRelatedElement-&gt;indexOf(self).toString()     -- A position index shall be converted to a decimal string representation      -- consisting of only decimal digits, with no sign, leading zeros or leading      -- or trailing whitespace. else '' endif endif" language="OCL2.0" name="">
</specification>
            </bodyCondition>
            <ownedComment xmi:id="Root-Elements-Element-path_-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;Return a unique description of the location of this &lt;code&gt;Element&lt;/code&gt; in the containment structure rooted in a root &lt;code&gt;Namespace&lt;/code&gt;. If the &lt;code&gt;Element&lt;/code&gt; has a non-null &lt;code&gt;qualifiedName&lt;/code&gt;, then return that. Otherwise, if it has an &lt;code&gt;owningRelationship&lt;/code&gt;, then return the string constructed by appending to the &lt;code&gt;path&lt;/code&gt; of it's &lt;code&gt;owningRelationship&lt;/code&gt; the character &lt;code&gt;/&lt;/code&gt; followed by the string representation of its position in the list of &lt;code&gt;ownedRelatedElements&lt;/code&gt; of the &lt;code&gt;owningRelationship&lt;/code&gt; (indexed starting at 1). Otherwise, return the empty string.&lt;/p&gt;  &lt;p&gt;(Note that this operation is overridden for &lt;code&gt;Relationships&lt;/code&gt; to use &lt;code&gt;owningRelatedElement&lt;/code&gt; when appropriate.)&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-path_"/>
</ownedComment>
            <ownedParameter xmi:id="Root-Elements-Element-path_-" xmi:type="uml:Parameter" name="">
              <type href="https://www.omg.org/spec/UML/20161101/PrimitiveTypes.xmi#String"/>
            </ownedParameter>
            <ownedRule xmi:idref="Root-Elements-Element-path_-unnamed1"/>
          </ownedOperation>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementName" xmi:type="uml:Constraint" name="deriveElementName">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; is given by the result of the &lt;code&gt;effectiveName()&lt;/code&gt; operation.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementName"/>
            </ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementName-specification0" xmi:type="uml:OpaqueExpression" body="name = effectiveName()" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementQualifiedName" xmi:type="uml:Constraint" name="deriveElementQualifiedName">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementQualifiedName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If this &lt;code&gt;Element&lt;/code&gt; does not have an &lt;code&gt;owningNamespace&lt;/code&gt;, then its &lt;code&gt;qualifiedName&lt;/code&gt; is null. If the &lt;code&gt;owningNamespace&lt;/code&gt; of this Element is a root &lt;code&gt;Namespace&lt;/code&gt;, then the &lt;code&gt;qualifiedName&lt;/code&gt; of the &lt;code&gt;Element&lt;/code&gt; is the escaped name of the &lt;code&gt;Element&lt;/code&gt; (if any). If the &lt;code&gt;owningNamespace&lt;/code&gt; is non-null but not a root &lt;code&gt;Namespace&lt;/code&gt;, then the &lt;code&gt;qualifiedName&lt;/code&gt; of this &lt;code&gt;Element&lt;/code&gt; is constructed from the &lt;code&gt;qualifiedName&lt;/code&gt; of the &lt;code&gt;owningNamespace&lt;/code&gt; and the escaped name of the &lt;code&gt;Element&lt;/code&gt;, unless the &lt;code&gt;qualifiedName&lt;/code&gt; of the &lt;code&gt;owningNamespace&lt;/code&gt; is null or the escaped name is null, in which case the &lt;code&gt;qualifiedName&lt;/code&gt; of this &lt;code&gt;Element&lt;/code&gt; is also null. Further, if the &lt;code&gt;owningNamespace&lt;/code&gt; has other &lt;code&gt;ownedMembers&lt;/code&gt; with the same non-null name as this &lt;code&gt;Element&lt;/code&gt;, and this &lt;code&gt;Element&lt;/code&gt; is not the first, then the &lt;code&gt;qualifiedName&lt;/code&gt; of this &lt;code&gt;Element&lt;/code&gt; is null.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementQualifiedName"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementQualifiedName-specification0" xmi:type="uml:OpaqueExpression" body="qualifiedName =     if owningNamespace = null then null     else if name &lt;&gt; null and          owningNamespace.ownedMember-&gt;         select(m | m.name = name).indexOf(self) &lt;&gt; 1 then null     else if owningNamespace.owner = null then escapedName()     else if owningNamespace.qualifiedName = null or              escapedName() = null then null     else owningNamespace.qualifiedName + '::' + escapedName()     endif endif endif endif" language="OCL2.0" name="">
</specification>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementOwnedAnnotation" xmi:type="uml:Constraint" name="deriveElementOwnedAnnotation">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementOwnedAnnotation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedAnnotations&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; are its &lt;code&gt;ownedRelationships&lt;/code&gt; that are &lt;code&gt;Annotations&lt;/code&gt;, for which the &lt;code&gt;Element&lt;/code&gt; is the &lt;code&gt;annotatedElement&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementOwnedAnnotation"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementOwnedAnnotation-specification0" xmi:type="uml:OpaqueExpression" body="ownedAnnotation = ownedRelationship-&gt; selectByKind(Annotation)-&gt; select(a | a.annotatedElement = self)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementShortName" xmi:type="uml:Constraint" name="deriveElementShortName">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementShortName-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;shortName&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; is given by the result of the &lt;code&gt;effectiveShortName()&lt;/code&gt; operation.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementShortName"/>
            </ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementShortName-specification0" xmi:type="uml:OpaqueExpression" body="shortName = effectiveShortName()" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementOwner" xmi:type="uml:Constraint" name="deriveElementOwner">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementOwner-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;owner&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; is the &lt;code&gt;owningRelatedElement&lt;/code&gt; of its &lt;code&gt;owningRelationship&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementOwner"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementOwner-specification0" xmi:type="uml:OpaqueExpression" body="owner = owningRelationship.owningRelatedElement" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementIsLibraryElement" xmi:type="uml:Constraint" name="deriveElementIsLibraryElement">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementIsLibraryElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;An &lt;code&gt;Element&lt;/code&gt; &lt;code&gt;isLibraryElement&lt;/code&gt; if &lt;code&gt;libraryNamespace()&lt;/code&gt; is not null.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementIsLibraryElement"/>
            </ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementIsLibraryElement-specification0" xmi:type="uml:OpaqueExpression" body="isLibraryElement = libraryNamespace() &lt;&gt; null " language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementTextualRepresentation" xmi:type="uml:Constraint" name="deriveElementTextualRepresentation">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementTextualRepresentation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;textualRepresentations&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; are its &lt;code&gt;ownedElements&lt;/code&gt; that are &lt;code&gt;TextualRepresentations&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementTextualRepresentation"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementTextualRepresentation-specification0" xmi:type="uml:OpaqueExpression" body="textualRepresentation = ownedElement-&gt;selectByKind(TextualRepresentation)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementOwnedElement" xmi:type="uml:Constraint" name="deriveElementOwnedElement">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementOwnedElement-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;ownedElements&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; are the &lt;code&gt;ownedRelatedElements&lt;/code&gt; of its &lt;code&gt;ownedRelationships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementOwnedElement"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementOwnedElement-specification0" xmi:type="uml:OpaqueExpression" body="ownedElement = ownedRelationship.ownedRelatedElement" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveOwningNamespace" xmi:type="uml:Constraint" name="deriveOwningNamespace">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveOwningNamespace-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;owningNamespace&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; is the &lt;code&gt;membershipOwningNamspace&lt;/code&gt; of its &lt;code&gt;owningMembership&lt;/code&gt; (if any).&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveOwningNamespace"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveOwningNamespace-specification0" xmi:type="uml:OpaqueExpression" body="owningNamespace = if owningMembership = null then null else owningMembership.membershipOwningNamespace endif" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-deriveElementDocumentation" xmi:type="uml:Constraint" name="deriveElementDocumentation">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-deriveElementDocumentation-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;The &lt;code&gt;documentation&lt;/code&gt; of an &lt;code&gt;Element&lt;/code&gt; is its &lt;code&gt;ownedElements&lt;/code&gt; that are &lt;code&gt;Documentation&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-deriveElementDocumentation"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-deriveElementDocumentation-specification0" xmi:type="uml:OpaqueExpression" body="documentation = ownedElement-&gt;selectByKind(Documentation)" language="OCL2.0" name=""/>
          </ownedRule>
          <ownedRule xmi:id="Root-Elements-Element-validateElementIsImpliedIncluded" xmi:type="uml:Constraint" name="validateElementIsImpliedIncluded">
            <constrainedElement xmi:idref="Root-Elements-Element"/>
            <ownedComment xmi:id="Root-Elements-Element-validateElementIsImpliedIncluded-_comment.0" xmi:type="uml:Comment" body="&lt;p&gt;If an &lt;code&gt;Element&lt;/code&gt; has any &lt;code&gt;ownedRelationships&lt;/code&gt; for which &lt;code&gt;isImplied = true&lt;/code&gt;, then the &lt;code&gt;Element&lt;/code&gt; must also have &lt;code&gt;isImpliedIncluded = true&lt;/code&gt;. (Note that an &lt;code&gt;Element&lt;/code&gt; &lt;em&gt;can&lt;/em&gt; have &lt;code&gt;isImplied = true&lt;/code&gt; even if no &lt;code&gt;ownedRelationships&lt;/code&gt; have &lt;code&gt;isImplied = true&lt;/code&gt;, indicating the &lt;code&gt;Element&lt;/code&gt; simply has no implied &lt;code&gt;Relationships&lt;/code&gt;.&lt;/p&gt;">
              <annotatedElement xmi:idref="Root-Elements-Element-validateElementIsImpliedIncluded"/>
</ownedComment>
            <specification xmi:id="Root-Elements-Element-validateElementIsImpliedIncluded-specification0" xmi:type="uml:OpaqueExpression" body="ownedRelationship-&gt;exists(isImplied) implies isImpliedIncluded" language="OCL2.0" name=""/>
          </ownedRule>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_textualRepresentation_representedElement" xmi:type="uml:Association" name="A_textualRepresentation_representedElement">
          <memberEnd xmi:idref="Root-Elements-Element-textualRepresentation"/>
          <memberEnd xmi:idref="Root-Annotations-TextualRepresentation-representedElement"/>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_target_targetRelationship" xmi:type="uml:Association" name="A_target_targetRelationship">
          <memberEnd xmi:idref="Root-Elements-Relationship-target"/>
          <memberEnd xmi:idref="Root-Elements-A_target_targetRelationship-targetRelationship"/>
          <ownedEnd xmi:id="Root-Elements-A_target_targetRelationship-targetRelationship" xmi:type="uml:Property" name="targetRelationship">
            <association xmi:idref="Root-Elements-A_target_targetRelationship"/>
            <lowerValue xmi:id="Root-Elements-A_target_targetRelationship-targetRelationship-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <subsettedProperty xmi:idref="Root-Elements-A_relatedElement_relationship-relationship"/>
            <type xmi:idref="Root-Elements-Relationship"/>
            <upperValue xmi:id="Root-Elements-A_target_targetRelationship-targetRelationship-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
        <packagedElement xmi:id="Root-Elements-A_relatedElement_relationship" xmi:type="uml:Association" name="A_relatedElement_relationship">
          <memberEnd xmi:idref="Root-Elements-Relationship-relatedElement"/>
          <memberEnd xmi:idref="Root-Elements-A_relatedElement_relationship-relationship"/>
          <ownedEnd xmi:id="Root-Elements-A_relatedElement_relationship-relationship" xmi:type="uml:Property" isDerived="true" isDerivedUnion="true" isUnique="false" name="relationship">
            <association xmi:idref="Root-Elements-A_relatedElement_relationship"/>
            <lowerValue xmi:id="Root-Elements-A_relatedElement_relationship-relationship-lowerValue" xmi:type="uml:LiteralInteger" name=""/>
            <type xmi:idref="Root-Elements-Relationship"/>
            <upperValue xmi:id="Root-Elements-A_relatedElement_relationship-relationship-upperValue" xmi:type="uml:LiteralUnlimitedNatural" name="" value="-1"/>
          </ownedEnd>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </uml:Package>
  <mofext:Tag xmi:id="KerML_mofTag0" xmi:type="mofext:Tag" name="org.omg.xmi.nsPrefix" element="KerML"/>
</xmi:XMI>
