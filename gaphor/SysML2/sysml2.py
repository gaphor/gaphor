# This file is generated by coder.py. DO NOT EDIT!
# ruff: noqa: F401, E402, F811
# fmt: off

from __future__ import annotations

import enum

from gaphor.core.modeling.properties import (
    association,
    attribute as _attribute,
    derived,
    derivedunion,
    enumeration as _enumeration,
    redefine,
    relation_many,
    relation_one,
)


from gaphor.KerML.kerml import Classifier as _Classifier
from gaphor.KerML.kerml import Class as _Class
from gaphor.KerML.kerml import Behavior as _Behavior
from gaphor.KerML.kerml import Interaction as _Interaction
from gaphor.KerML.kerml import Feature as _Feature
from gaphor.KerML.kerml import Connector as _Connector
from gaphor.KerML.kerml import Flow as _Flow
from gaphor.KerML.kerml import Step as _Step
from gaphor.KerML.kerml import SuccessionFlow as _SuccessionFlow
from gaphor.KerML.kerml import DataType as _DataType
from gaphor.KerML.kerml import BooleanExpression as _BooleanExpression
from gaphor.KerML.kerml import FeatureMembership as _FeatureMembership
from gaphor.KerML.kerml import ParameterMembership as _ParameterMembership
from gaphor.KerML.kerml import Predicate as _Predicate
from gaphor.KerML.kerml import Invariant as _Invariant
from gaphor.KerML.kerml import Function as _Function
from gaphor.KerML.kerml import Expression as _Expression
from gaphor.KerML.kerml import Structure as _Structure
from gaphor.KerML.kerml import Metaclass as _Metaclass
from gaphor.KerML.kerml import MetadataFeature as _MetadataFeature
from gaphor.KerML.kerml import InvocationExpression as _InvocationExpression
from gaphor.KerML.kerml import OwningMembership as _OwningMembership
from gaphor.KerML.kerml import Conjugation as _Conjugation
from gaphor.KerML.kerml import FeatureTyping as _FeatureTyping
from gaphor.KerML.kerml import Import as _Import
from gaphor.KerML.kerml import MembershipImport as _MembershipImport
from gaphor.KerML.kerml import NamespaceImport as _NamespaceImport
from gaphor.KerML.kerml import Succession as _Succession
from gaphor.KerML.kerml import AssociationStructure as _AssociationStructure
from gaphor.KerML.kerml import BindingConnector as _BindingConnector
from gaphor.KerML.kerml import Association as _Association
from gaphor.KerML.kerml import Element as _Element
from gaphor.KerML.kerml import Type as _Type
from gaphor.KerML.kerml import Namespace as _Namespace
from gaphor.KerML.kerml import Membership as _Membership
from gaphor.KerML.kerml import Specialization as _Specialization
from gaphor.KerML.kerml import VisibilityKind as _VisibilityKind


class PortionKind(enum.StrEnum):
    timeslice = "timeslice"
    snapshot = "snapshot"


class RequirementConstraintKind(enum.StrEnum):
    assumption = "assumption"
    requirement = "requirement"


class StateSubactionKind(enum.StrEnum):
    entry = "entry"
    do = "do"
    exit = "exit"


class TransitionFeatureKind(enum.StrEnum):
    trigger = "trigger"
    guard = "guard"
    effect = "effect"


class TriggerKind(enum.StrEnum):
    when = "when"
    at = "at"
    after = "after"


class Definition(_Classifier):
    directedUsage: relation_many[Usage]
    isVariation: _attribute[bool] = _attribute("isVariation", bool)
    ownedAction: relation_many[ActionUsage]
    ownedAllocation: relation_many[AllocationUsage]
    ownedAnalysisCase: relation_many[AnalysisCaseUsage]
    ownedAttribute: relation_many[AttributeUsage]
    ownedCalculation: relation_many[CalculationUsage]
    ownedCase: relation_many[CaseUsage]
    ownedConcern: relation_many[ConcernUsage]
    ownedConnection: relation_many[ConnectorAsUsage]
    ownedConstraint: relation_many[ConstraintUsage]
    ownedEnumeration: relation_many[EnumerationUsage]
    ownedFlow: relation_many[FlowUsage]
    ownedInterface: relation_many[InterfaceUsage]
    ownedItem: relation_many[ItemUsage]
    ownedMetadata: relation_many[MetadataUsage]
    ownedOccurrence: relation_many[OccurrenceUsage]
    ownedPart: relation_many[PartUsage]
    ownedPort: relation_many[PortUsage]
    ownedReference: relation_many[ReferenceUsage]
    ownedRendering: relation_many[RenderingUsage]
    ownedRequirement: relation_many[RequirementUsage]
    ownedState: relation_many[StateUsage]
    ownedTransition: relation_many[TransitionUsage]
    ownedUsage: relation_many[Usage]
    ownedUseCase: relation_many[UseCaseUsage]
    ownedVerificationCase: relation_many[VerificationCaseUsage]
    ownedView: relation_many[ViewUsage]
    ownedViewpoint: relation_many[ViewpointUsage]
    usage: relation_many[Usage]
    variant: relation_many[Usage]
    variantMembership: relation_many[VariantMembership]


class OccurrenceDefinition(Definition, _Class):
    isIndividual: _attribute[bool] = _attribute("isIndividual", bool, default=False)


class ActionDefinition(OccurrenceDefinition, _Behavior):
    action: relation_many[ActionUsage]


class FlowDefinition(ActionDefinition, _Interaction):
    flowEnd: relation_many[Usage]


class Usage(_Feature):
    definition: relation_many[_Classifier]
    directedUsage: relation_many[Usage]
    isVariation: _attribute[bool] = _attribute("isVariation", bool)
    nestedAction: relation_many[ActionUsage]
    nestedAllocation: relation_many[AllocationUsage]
    nestedAnalysisCase: relation_many[AnalysisCaseUsage]
    nestedAttribute: relation_many[AttributeUsage]
    nestedCalculation: relation_many[CalculationUsage]
    nestedCase: relation_many[CaseUsage]
    nestedConcern: relation_many[ConcernUsage]
    nestedConnection: relation_many[ConnectorAsUsage]
    nestedConstraint: relation_many[ConstraintUsage]
    nestedEnumeration: relation_many[EnumerationUsage]
    nestedFlow: relation_many[FlowUsage]
    nestedInterface: relation_many[InterfaceUsage]
    nestedItem: relation_many[ItemUsage]
    nestedMetadata: relation_many[MetadataUsage]
    nestedOccurrence: relation_many[OccurrenceUsage]
    nestedPart: relation_many[PartUsage]
    nestedPort: relation_many[PortUsage]
    nestedReference: relation_many[ReferenceUsage]
    nestedRendering: relation_many[RenderingUsage]
    nestedRequirement: relation_many[RequirementUsage]
    nestedState: relation_many[StateUsage]
    nestedTransition: relation_many[TransitionUsage]
    nestedUsage: relation_many[Usage]
    nestedUseCase: relation_many[UseCaseUsage]
    nestedVerificationCase: relation_many[VerificationCaseUsage]
    nestedView: relation_many[ViewUsage]
    nestedViewpoint: relation_many[ViewpointUsage]
    owningDefinition: relation_one[Definition]
    owningUsage: relation_one[Usage]
    usage: relation_many[Usage]
    variant: relation_many[Usage]
    variantMembership: relation_many[VariantMembership]


class ConnectorAsUsage(Usage, _Connector):
    pass


class OccurrenceUsage(Usage):
    individualDefinition: relation_one[OccurrenceDefinition]
    isIndividual: _attribute[bool] = _attribute("isIndividual", bool, default=False)
    occurrenceDefinition: relation_many[_Class]
    portionKind = _enumeration("portionKind", PortionKind, PortionKind.timeslice)


class ActionUsage(OccurrenceUsage, _Step):
    actionDefinition: relation_many[_Behavior]


class FlowUsage(ActionUsage, ConnectorAsUsage, _Flow):
    flowDefinition: relation_many[_Interaction]


class SuccessionFlowUsage(FlowUsage, _SuccessionFlow):
    pass


class AttributeDefinition(Definition, _DataType):
    pass


class EnumerationDefinition(AttributeDefinition):
    enumeratedValue: relation_many[EnumerationUsage]
    isVariation: _attribute[bool] = _attribute("isVariation", bool, default=False)


class AttributeUsage(Usage):
    attributeDefinition: relation_many[_DataType]


class EnumerationUsage(AttributeUsage):
    enumerationDefinition: relation_one[EnumerationDefinition]


class ConstraintUsage(OccurrenceUsage, _BooleanExpression):
    constraintDefinition: relation_one[_Predicate]


class RequirementUsage(ConstraintUsage):
    actorParameter: relation_many[PartUsage]
    assumedConstraint: relation_many[ConstraintUsage]
    framedConcern: relation_many[ConcernUsage]
    reqId: _attribute[str] = _attribute("reqId", str)
    requiredConstraint: relation_many[ConstraintUsage]
    requirementDefinition: relation_one[RequirementDefinition]
    stakeholderParameter: relation_many[PartUsage]
    subjectParameter: relation_one[Usage]


class ConcernUsage(RequirementUsage):
    concernDefinition: relation_one[ConcernDefinition]


class RequirementConstraintMembership(_FeatureMembership):
    kind = _enumeration("kind", RequirementConstraintKind, RequirementConstraintKind.assumption)
    ownedConstraint: relation_one[ConstraintUsage]
    referencedConstraint: relation_one[ConstraintUsage]


class FramedConcernMembership(RequirementConstraintMembership):
    kind = _enumeration("kind", RequirementConstraintKind, RequirementConstraintKind.assumption)
    ownedConcern: relation_one[ConcernUsage]
    referencedConcern: relation_one[ConcernUsage]


class ActorMembership(_ParameterMembership):
    ownedActorParameter: relation_one[PartUsage]


class StakeholderMembership(_ParameterMembership):
    ownedStakeholderParameter: relation_one[PartUsage]


class SubjectMembership(_ParameterMembership):
    ownedSubjectParameter: relation_one[Usage]


class ConstraintDefinition(OccurrenceDefinition, _Predicate):
    pass


class RequirementDefinition(ConstraintDefinition):
    actorParameter: relation_many[PartUsage]
    assumedConstraint: relation_many[ConstraintUsage]
    framedConcern: relation_many[ConcernUsage]
    reqId: _attribute[str] = _attribute("reqId", str)
    requiredConstraint: relation_many[ConstraintUsage]
    stakeholderParameter: relation_many[PartUsage]
    subjectParameter: relation_one[Usage]


class ConcernDefinition(RequirementDefinition):
    pass


class AssertConstraintUsage(ConstraintUsage, _Invariant):
    assertedConstraint: relation_one[ConstraintUsage]


class SatisfyRequirementUsage(AssertConstraintUsage, RequirementUsage):
    satisfiedRequirement: relation_one[RequirementUsage]
    satisfyingFeature: relation_one[_Feature]


class CalculationDefinition(ActionDefinition, _Function):
    calculation: relation_many[CalculationUsage]


class CalculationUsage(ActionUsage, _Expression):
    calculationDefinition: relation_one[_Function]


class ItemDefinition(OccurrenceDefinition, _Structure):
    pass


class MetadataDefinition(ItemDefinition, _Metaclass):
    pass


class ItemUsage(OccurrenceUsage):
    itemDefinition: relation_many[_Structure]


class MetadataUsage(ItemUsage, _MetadataFeature):
    metadataDefinition: relation_one[_Metaclass]


class CaseUsage(CalculationUsage):
    actorParameter: relation_many[PartUsage]
    caseDefinition: relation_one[CaseDefinition]
    objectiveRequirement: relation_one[RequirementUsage]
    subjectParameter: relation_one[Usage]


class CaseDefinition(CalculationDefinition):
    actorParameter: relation_many[PartUsage]
    objectiveRequirement: relation_one[RequirementUsage]
    subjectParameter: relation_one[Usage]


class ObjectiveMembership(_FeatureMembership):
    ownedObjectiveRequirement: relation_one[RequirementUsage]


class TransitionFeatureMembership(_FeatureMembership):
    kind = _enumeration("kind", TransitionFeatureKind, TransitionFeatureKind.trigger)
    transitionFeature: relation_one[_Step]


class EventOccurrenceUsage(OccurrenceUsage):
    eventOccurrence: relation_one[OccurrenceUsage]


class PerformActionUsage(ActionUsage, EventOccurrenceUsage):
    performedAction: relation_one[ActionUsage]


class StateUsage(ActionUsage):
    doAction: relation_one[ActionUsage]
    entryAction: relation_one[ActionUsage]
    exitAction: relation_one[ActionUsage]
    isParallel: _attribute[bool] = _attribute("isParallel", bool, default=False)
    stateDefinition: relation_many[_Behavior]


class ExhibitStateUsage(PerformActionUsage, StateUsage):
    exhibitedState: relation_one[StateUsage]


class StateSubactionMembership(_FeatureMembership):
    action: relation_one[ActionUsage]
    kind = _enumeration("kind", StateSubactionKind, StateSubactionKind.entry)


class StateDefinition(ActionDefinition):
    doAction: relation_one[ActionUsage]
    entryAction: relation_one[ActionUsage]
    exitAction: relation_one[ActionUsage]
    isParallel: _attribute[bool] = _attribute("isParallel", bool, default=False)
    state: relation_many[StateUsage]


class TransitionUsage(ActionUsage):
    effectAction: relation_many[ActionUsage]
    guardExpression: relation_many[_Expression]
    source: relation_one[ActionUsage]
    succession: relation_one[_Succession]
    target: relation_one[ActionUsage]
    triggerAction: relation_many[AcceptActionUsage]


class UseCaseUsage(CaseUsage):
    includedUseCase: relation_many[UseCaseUsage]
    useCaseDefinition: relation_one[UseCaseDefinition]


class IncludeUseCaseUsage(PerformActionUsage, UseCaseUsage):
    useCaseIncluded: relation_one[UseCaseUsage]


class UseCaseDefinition(CaseDefinition):
    includedUseCase: relation_many[UseCaseUsage]


class AssignmentActionUsage(ActionUsage):
    referent: relation_one[_Feature]
    targetArgument: relation_one[_Expression]
    valueExpression: relation_one[_Expression]


class LoopActionUsage(ActionUsage):
    bodyAction: relation_one[ActionUsage]


class ForLoopActionUsage(LoopActionUsage):
    loopVariable: relation_one[ReferenceUsage]
    seqArgument: relation_one[_Expression]


class TriggerInvocationExpression(_InvocationExpression):
    kind = _enumeration("kind", TriggerKind, TriggerKind.when)


class ControlNode(ActionUsage):
    pass


class DecisionNode(ControlNode):
    pass


class ForkNode(ControlNode):
    pass


class JoinNode(ControlNode):
    pass


class MergeNode(ControlNode):
    pass


class TerminateActionUsage(ActionUsage):
    terminatedOccurrenceArgument: relation_one[_Expression]


class AcceptActionUsage(ActionUsage):
    payloadArgument: relation_one[_Expression]
    payloadParameter: relation_one[ReferenceUsage]
    receiverArgument: relation_one[_Expression]


class WhileLoopActionUsage(LoopActionUsage):
    untilArgument: relation_one[_Expression]
    whileArgument: relation_one[_Expression]


class SendActionUsage(ActionUsage):
    payloadArgument: relation_one[_Expression]
    receiverArgument: relation_one[_Expression]
    senderArgument: relation_one[_Expression]


class IfActionUsage(ActionUsage):
    elseAction: relation_one[ActionUsage]
    ifArgument: relation_one[_Expression]
    thenAction: relation_one[ActionUsage]


class ReferenceUsage(Usage):
    pass


class VariantMembership(_OwningMembership):
    ownedVariantUsage: relation_one[Usage]


class PartDefinition(ItemDefinition):
    pass


class PartUsage(ItemUsage):
    partDefinition: relation_many[PartDefinition]


class AnalysisCaseUsage(CaseUsage):
    analysisCaseDefinition: relation_one[AnalysisCaseDefinition]
    resultExpression: relation_one[_Expression]


class AnalysisCaseDefinition(CaseDefinition):
    resultExpression: relation_one[_Expression]


class PortConjugation(_Conjugation):
    conjugatedPortDefinition: relation_one[ConjugatedPortDefinition]
    originalPortDefinition: relation_one[PortDefinition]


class PortDefinition(OccurrenceDefinition, _Structure):
    conjugatedPortDefinition: relation_one[ConjugatedPortDefinition]


class ConjugatedPortDefinition(PortDefinition):
    originalPortDefinition: relation_one[PortDefinition]
    ownedPortConjugator: relation_one[PortConjugation]


class ConjugatedPortTyping(_FeatureTyping):
    conjugatedPortDefinition: relation_one[ConjugatedPortDefinition]
    portDefinition: relation_one[PortDefinition]


class PortUsage(OccurrenceUsage):
    portDefinition: relation_many[PortDefinition]


class ViewUsage(PartUsage):
    exposedElement: relation_many[_Element]
    satisfiedViewpoint: relation_many[ViewpointUsage]
    viewCondition: relation_many[_Expression]
    viewDefinition: relation_one[ViewDefinition]
    viewRendering: relation_one[RenderingUsage]


class Expose(_Import):
    isImportAll: _attribute[bool] = _attribute("isImportAll", bool, default=False)


class ViewDefinition(PartDefinition):
    satisfiedViewpoint: relation_many[ViewpointUsage]
    view: relation_many[ViewUsage]
    viewCondition: relation_many[_Expression]
    viewRendering: relation_one[RenderingUsage]


class RenderingUsage(PartUsage):
    renderingDefinition: relation_one[RenderingDefinition]


class ViewpointDefinition(RequirementDefinition):
    viewpointStakeholder: relation_many[PartUsage]


class RenderingDefinition(PartDefinition):
    rendering: relation_many[RenderingUsage]


class MembershipExpose(Expose, _MembershipImport):
    pass


class NamespaceExpose(Expose, _NamespaceImport):
    pass


class ViewRenderingMembership(_FeatureMembership):
    ownedRendering: relation_one[RenderingUsage]
    referencedRendering: relation_one[RenderingUsage]


class ViewpointUsage(RequirementUsage):
    viewpointDefinition: relation_one[ViewpointDefinition]
    viewpointStakeholder: relation_many[PartUsage]


class ConnectionUsage(ConnectorAsUsage, PartUsage):
    connectionDefinition: relation_many[_AssociationStructure]


class SuccessionAsUsage(ConnectorAsUsage, _Succession):
    pass


class ConnectionDefinition(PartDefinition, _AssociationStructure):
    connectionEnd: relation_many[Usage]
    isSufficient: _attribute[bool] = _attribute("isSufficient", bool, default=False)


class BindingConnectorAsUsage(ConnectorAsUsage, _BindingConnector):
    pass


class InterfaceUsage(ConnectionUsage):
    interfaceDefinition: relation_many[InterfaceDefinition]


class InterfaceDefinition(ConnectionDefinition):
    interfaceEnd: relation_many[PortUsage]


class AllocationDefinition(ConnectionDefinition):
    allocation: relation_many[AllocationUsage]


class AllocationUsage(ConnectionUsage):
    allocationDefinition: relation_many[AllocationDefinition]


class RequirementVerificationMembership(RequirementConstraintMembership):
    kind = _enumeration("kind", RequirementConstraintKind, RequirementConstraintKind.assumption)
    ownedRequirement: relation_one[RequirementUsage]
    verifiedRequirement: relation_one[RequirementUsage]


class VerificationCaseDefinition(CaseDefinition):
    verifiedRequirement: relation_many[RequirementUsage]


class VerificationCaseUsage(CaseUsage):
    verificationCaseDefinition: relation_one[VerificationCaseDefinition]
    verifiedRequirement: relation_many[RequirementUsage]



Definition.variant = derivedunion("variant", Usage)
Definition.variantMembership = derivedunion("variantMembership", VariantMembership)
Definition.usage = derivedunion("usage", Usage)
Definition.directedUsage = derivedunion("directedUsage", Usage)
Definition.ownedUsage = derivedunion("ownedUsage", Usage)
Definition.ownedReference = derivedunion("ownedReference", ReferenceUsage)
Definition.ownedAttribute = derivedunion("ownedAttribute", AttributeUsage)
Definition.ownedEnumeration = derivedunion("ownedEnumeration", EnumerationUsage)
Definition.ownedOccurrence = derivedunion("ownedOccurrence", OccurrenceUsage)
Definition.ownedItem = derivedunion("ownedItem", ItemUsage)
Definition.ownedPart = derivedunion("ownedPart", PartUsage)
Definition.ownedPort = derivedunion("ownedPort", PortUsage)
Definition.ownedConnection = derivedunion("ownedConnection", ConnectorAsUsage)
Definition.ownedFlow = derivedunion("ownedFlow", FlowUsage)
Definition.ownedInterface = derivedunion("ownedInterface", InterfaceUsage)
Definition.ownedAllocation = derivedunion("ownedAllocation", AllocationUsage)
Definition.ownedAction = derivedunion("ownedAction", ActionUsage)
Definition.ownedState = derivedunion("ownedState", StateUsage)
Definition.ownedTransition = derivedunion("ownedTransition", TransitionUsage)
Definition.ownedCalculation = derivedunion("ownedCalculation", CalculationUsage)
Definition.ownedConstraint = derivedunion("ownedConstraint", ConstraintUsage)
Definition.ownedRequirement = derivedunion("ownedRequirement", RequirementUsage)
Definition.ownedConcern = derivedunion("ownedConcern", ConcernUsage)
Definition.ownedCase = derivedunion("ownedCase", CaseUsage)
Definition.ownedAnalysisCase = derivedunion("ownedAnalysisCase", AnalysisCaseUsage)
Definition.ownedVerificationCase = derivedunion("ownedVerificationCase", VerificationCaseUsage)
Definition.ownedUseCase = derivedunion("ownedUseCase", UseCaseUsage)
Definition.ownedView = derivedunion("ownedView", ViewUsage)
Definition.ownedViewpoint = derivedunion("ownedViewpoint", ViewpointUsage)
Definition.ownedRendering = derivedunion("ownedRendering", RenderingUsage)
Definition.ownedMetadata = derivedunion("ownedMetadata", MetadataUsage)
_Namespace.ownedMember.add(Definition.variant)  # type: ignore[attr-defined]
_Namespace.ownedMembership.add(Definition.variantMembership)  # type: ignore[attr-defined]
_Type.feature.add(Definition.usage)  # type: ignore[attr-defined]
_Type.directedFeature.add(Definition.directedUsage)  # type: ignore[attr-defined]
Definition.usage.add(Definition.directedUsage)  # type: ignore[attr-defined]
_Type.ownedFeature.add(Definition.ownedUsage)  # type: ignore[attr-defined]
Definition.usage.add(Definition.ownedUsage)  # type: ignore[attr-defined]
Definition.ownedUsage.add(Definition.ownedReference)  # type: ignore[attr-defined]
Definition.ownedUsage.add(Definition.ownedAttribute)  # type: ignore[attr-defined]
Definition.ownedAttribute.add(Definition.ownedEnumeration)  # type: ignore[attr-defined]
Definition.ownedUsage.add(Definition.ownedOccurrence)  # type: ignore[attr-defined]
Definition.ownedOccurrence.add(Definition.ownedItem)  # type: ignore[attr-defined]
Definition.ownedItem.add(Definition.ownedPart)  # type: ignore[attr-defined]
Definition.ownedUsage.add(Definition.ownedPort)  # type: ignore[attr-defined]
Definition.ownedUsage.add(Definition.ownedConnection)  # type: ignore[attr-defined]
Definition.ownedConnection.add(Definition.ownedFlow)  # type: ignore[attr-defined]
Definition.ownedConnection.add(Definition.ownedInterface)  # type: ignore[attr-defined]
Definition.ownedConnection.add(Definition.ownedAllocation)  # type: ignore[attr-defined]
Definition.ownedOccurrence.add(Definition.ownedAction)  # type: ignore[attr-defined]
Definition.ownedAction.add(Definition.ownedState)  # type: ignore[attr-defined]
Definition.ownedUsage.add(Definition.ownedTransition)  # type: ignore[attr-defined]
Definition.ownedAction.add(Definition.ownedCalculation)  # type: ignore[attr-defined]
Definition.ownedOccurrence.add(Definition.ownedConstraint)  # type: ignore[attr-defined]
Definition.ownedConstraint.add(Definition.ownedRequirement)  # type: ignore[attr-defined]
Definition.ownedRequirement.add(Definition.ownedConcern)  # type: ignore[attr-defined]
Definition.ownedCalculation.add(Definition.ownedCase)  # type: ignore[attr-defined]
Definition.ownedCase.add(Definition.ownedAnalysisCase)  # type: ignore[attr-defined]
Definition.ownedCase.add(Definition.ownedVerificationCase)  # type: ignore[attr-defined]
Definition.ownedCase.add(Definition.ownedUseCase)  # type: ignore[attr-defined]
Definition.ownedPart.add(Definition.ownedView)  # type: ignore[attr-defined]
Definition.ownedRequirement.add(Definition.ownedViewpoint)  # type: ignore[attr-defined]
Definition.ownedPart.add(Definition.ownedRendering)  # type: ignore[attr-defined]
Definition.ownedItem.add(Definition.ownedMetadata)  # type: ignore[attr-defined]
ActionDefinition.action = derivedunion("action", ActionUsage)
_Behavior.step.add(ActionDefinition.action)  # type: ignore[attr-defined]
Definition.usage.add(ActionDefinition.action)  # type: ignore[attr-defined]
FlowDefinition.flowEnd = redefine(FlowDefinition, "flowEnd", Usage, _Association.associationEnd)
Usage.variant = derivedunion("variant", Usage)
Usage.variantMembership = derivedunion("variantMembership", VariantMembership)
Usage.owningDefinition = derivedunion("owningDefinition", Definition, upper=1)
Usage.owningUsage = derivedunion("owningUsage", Usage, upper=1)
Usage.usage = derivedunion("usage", Usage)
Usage.directedUsage = derivedunion("directedUsage", Usage)
Usage.nestedUsage = derivedunion("nestedUsage", Usage)
Usage.nestedReference = derivedunion("nestedReference", ReferenceUsage)
Usage.nestedAttribute = derivedunion("nestedAttribute", AttributeUsage)
Usage.nestedEnumeration = derivedunion("nestedEnumeration", EnumerationUsage)
Usage.nestedOccurrence = derivedunion("nestedOccurrence", OccurrenceUsage)
Usage.nestedItem = derivedunion("nestedItem", ItemUsage)
Usage.nestedPart = derivedunion("nestedPart", PartUsage)
Usage.nestedPort = derivedunion("nestedPort", PortUsage)
Usage.nestedConnection = derivedunion("nestedConnection", ConnectorAsUsage)
Usage.nestedFlow = derivedunion("nestedFlow", FlowUsage)
Usage.nestedInterface = derivedunion("nestedInterface", InterfaceUsage)
Usage.nestedAllocation = derivedunion("nestedAllocation", AllocationUsage)
Usage.nestedAction = derivedunion("nestedAction", ActionUsage)
Usage.nestedState = derivedunion("nestedState", StateUsage)
Usage.nestedTransition = derivedunion("nestedTransition", TransitionUsage)
Usage.nestedCalculation = derivedunion("nestedCalculation", CalculationUsage)
Usage.nestedConstraint = derivedunion("nestedConstraint", ConstraintUsage)
Usage.nestedRequirement = derivedunion("nestedRequirement", RequirementUsage)
Usage.nestedConcern = derivedunion("nestedConcern", ConcernUsage)
Usage.nestedCase = derivedunion("nestedCase", CaseUsage)
Usage.nestedAnalysisCase = derivedunion("nestedAnalysisCase", AnalysisCaseUsage)
Usage.nestedVerificationCase = derivedunion("nestedVerificationCase", VerificationCaseUsage)
Usage.nestedUseCase = derivedunion("nestedUseCase", UseCaseUsage)
Usage.nestedView = derivedunion("nestedView", ViewUsage)
Usage.nestedViewpoint = derivedunion("nestedViewpoint", ViewpointUsage)
Usage.nestedRendering = derivedunion("nestedRendering", RenderingUsage)
Usage.nestedMetadata = derivedunion("nestedMetadata", MetadataUsage)
Usage.definition = redefine(Usage, "definition", _Classifier, _Feature.type)
_Namespace.ownedMember.add(Usage.variant)  # type: ignore[attr-defined]
_Namespace.ownedMembership.add(Usage.variantMembership)  # type: ignore[attr-defined]
_Feature.owningType.add(Usage.owningDefinition)  # type: ignore[attr-defined]
_Feature.owningType.add(Usage.owningUsage)  # type: ignore[attr-defined]
_Type.feature.add(Usage.usage)  # type: ignore[attr-defined]
_Type.directedFeature.add(Usage.directedUsage)  # type: ignore[attr-defined]
Usage.usage.add(Usage.directedUsage)  # type: ignore[attr-defined]
_Type.ownedFeature.add(Usage.nestedUsage)  # type: ignore[attr-defined]
Usage.usage.add(Usage.nestedUsage)  # type: ignore[attr-defined]
Usage.nestedUsage.add(Usage.nestedReference)  # type: ignore[attr-defined]
Usage.nestedUsage.add(Usage.nestedAttribute)  # type: ignore[attr-defined]
Usage.nestedAttribute.add(Usage.nestedEnumeration)  # type: ignore[attr-defined]
Usage.nestedUsage.add(Usage.nestedOccurrence)  # type: ignore[attr-defined]
Usage.nestedOccurrence.add(Usage.nestedItem)  # type: ignore[attr-defined]
Usage.nestedItem.add(Usage.nestedPart)  # type: ignore[attr-defined]
Usage.nestedUsage.add(Usage.nestedPort)  # type: ignore[attr-defined]
Usage.nestedUsage.add(Usage.nestedConnection)  # type: ignore[attr-defined]
Usage.nestedConnection.add(Usage.nestedFlow)  # type: ignore[attr-defined]
Usage.nestedConnection.add(Usage.nestedInterface)  # type: ignore[attr-defined]
Usage.nestedConnection.add(Usage.nestedAllocation)  # type: ignore[attr-defined]
Usage.nestedOccurrence.add(Usage.nestedAction)  # type: ignore[attr-defined]
Usage.nestedAction.add(Usage.nestedState)  # type: ignore[attr-defined]
Usage.nestedUsage.add(Usage.nestedTransition)  # type: ignore[attr-defined]
Usage.nestedAction.add(Usage.nestedCalculation)  # type: ignore[attr-defined]
Usage.nestedOccurrence.add(Usage.nestedConstraint)  # type: ignore[attr-defined]
Usage.nestedConstraint.add(Usage.nestedRequirement)  # type: ignore[attr-defined]
Usage.nestedRequirement.add(Usage.nestedConcern)  # type: ignore[attr-defined]
Usage.nestedCalculation.add(Usage.nestedCase)  # type: ignore[attr-defined]
Usage.nestedCase.add(Usage.nestedAnalysisCase)  # type: ignore[attr-defined]
Usage.nestedCase.add(Usage.nestedVerificationCase)  # type: ignore[attr-defined]
Usage.nestedCase.add(Usage.nestedUseCase)  # type: ignore[attr-defined]
Usage.nestedPart.add(Usage.nestedView)  # type: ignore[attr-defined]
Usage.nestedRequirement.add(Usage.nestedViewpoint)  # type: ignore[attr-defined]
Usage.nestedPart.add(Usage.nestedRendering)  # type: ignore[attr-defined]
Usage.nestedItem.add(Usage.nestedMetadata)  # type: ignore[attr-defined]
OccurrenceUsage.individualDefinition = derivedunion("individualDefinition", OccurrenceDefinition, upper=1)
OccurrenceUsage.occurrenceDefinition = redefine(OccurrenceUsage, "occurrenceDefinition", _Class, Usage.definition)
OccurrenceUsage.occurrenceDefinition.add(OccurrenceUsage.individualDefinition)  # type: ignore[attr-defined]
ActionUsage.actionDefinition = redefine(ActionUsage, "actionDefinition", _Behavior, _Step.behavior)
FlowUsage.flowDefinition = redefine(FlowUsage, "flowDefinition", _Interaction, ActionUsage.actionDefinition)
EnumerationDefinition.enumeratedValue = redefine(EnumerationDefinition, "enumeratedValue", EnumerationUsage, Definition.variant)
AttributeUsage.attributeDefinition = redefine(AttributeUsage, "attributeDefinition", _DataType, Usage.definition)
EnumerationUsage.enumerationDefinition = redefine(EnumerationUsage, "enumerationDefinition", EnumerationDefinition, AttributeUsage.attributeDefinition)
ConstraintUsage.constraintDefinition = redefine(ConstraintUsage, "constraintDefinition", _Predicate, _BooleanExpression.predicate)
RequirementUsage.requiredConstraint = derivedunion("requiredConstraint", ConstraintUsage)
RequirementUsage.assumedConstraint = derivedunion("assumedConstraint", ConstraintUsage)
RequirementUsage.subjectParameter = derivedunion("subjectParameter", Usage, lower=1, upper=1)
RequirementUsage.framedConcern = derivedunion("framedConcern", ConcernUsage)
RequirementUsage.actorParameter = derivedunion("actorParameter", PartUsage)
RequirementUsage.stakeholderParameter = derivedunion("stakeholderParameter", PartUsage)
RequirementUsage.requirementDefinition = redefine(RequirementUsage, "requirementDefinition", RequirementDefinition, ConstraintUsage.constraintDefinition)
_Type.ownedFeature.add(RequirementUsage.requiredConstraint)  # type: ignore[attr-defined]
_Type.ownedFeature.add(RequirementUsage.assumedConstraint)  # type: ignore[attr-defined]
_Step.parameter.add(RequirementUsage.subjectParameter)  # type: ignore[attr-defined]
Usage.usage.add(RequirementUsage.subjectParameter)  # type: ignore[attr-defined]
RequirementUsage.requiredConstraint.add(RequirementUsage.framedConcern)  # type: ignore[attr-defined]
_Step.parameter.add(RequirementUsage.actorParameter)  # type: ignore[attr-defined]
Usage.usage.add(RequirementUsage.actorParameter)  # type: ignore[attr-defined]
_Step.parameter.add(RequirementUsage.stakeholderParameter)  # type: ignore[attr-defined]
Usage.usage.add(RequirementUsage.stakeholderParameter)  # type: ignore[attr-defined]
ConcernUsage.concernDefinition = redefine(ConcernUsage, "concernDefinition", ConcernDefinition, RequirementUsage.requirementDefinition)
RequirementConstraintMembership.referencedConstraint = derivedunion("referencedConstraint", ConstraintUsage, lower=1, upper=1)
RequirementConstraintMembership.ownedConstraint = redefine(RequirementConstraintMembership, "ownedConstraint", ConstraintUsage, _FeatureMembership.ownedMemberFeature)
FramedConcernMembership.ownedConcern = redefine(FramedConcernMembership, "ownedConcern", ConcernUsage, RequirementConstraintMembership.ownedConstraint)
FramedConcernMembership.referencedConcern = redefine(FramedConcernMembership, "referencedConcern", ConcernUsage, RequirementConstraintMembership.referencedConstraint)
ActorMembership.ownedActorParameter = redefine(ActorMembership, "ownedActorParameter", PartUsage, _ParameterMembership.ownedMemberParameter)
StakeholderMembership.ownedStakeholderParameter = redefine(StakeholderMembership, "ownedStakeholderParameter", PartUsage, _ParameterMembership.ownedMemberParameter)
SubjectMembership.ownedSubjectParameter = redefine(SubjectMembership, "ownedSubjectParameter", Usage, _ParameterMembership.ownedMemberParameter)
RequirementDefinition.subjectParameter = derivedunion("subjectParameter", Usage, lower=1, upper=1)
RequirementDefinition.actorParameter = derivedunion("actorParameter", PartUsage)
RequirementDefinition.stakeholderParameter = derivedunion("stakeholderParameter", PartUsage)
RequirementDefinition.assumedConstraint = derivedunion("assumedConstraint", ConstraintUsage)
RequirementDefinition.requiredConstraint = derivedunion("requiredConstraint", ConstraintUsage)
RequirementDefinition.framedConcern = derivedunion("framedConcern", ConcernUsage)
_Behavior.parameter.add(RequirementDefinition.subjectParameter)  # type: ignore[attr-defined]
Definition.usage.add(RequirementDefinition.subjectParameter)  # type: ignore[attr-defined]
_Behavior.parameter.add(RequirementDefinition.actorParameter)  # type: ignore[attr-defined]
Definition.usage.add(RequirementDefinition.actorParameter)  # type: ignore[attr-defined]
_Behavior.parameter.add(RequirementDefinition.stakeholderParameter)  # type: ignore[attr-defined]
Definition.usage.add(RequirementDefinition.stakeholderParameter)  # type: ignore[attr-defined]
_Type.ownedFeature.add(RequirementDefinition.assumedConstraint)  # type: ignore[attr-defined]
_Type.ownedFeature.add(RequirementDefinition.requiredConstraint)  # type: ignore[attr-defined]
RequirementDefinition.requiredConstraint.add(RequirementDefinition.framedConcern)  # type: ignore[attr-defined]
AssertConstraintUsage.assertedConstraint = derivedunion("assertedConstraint", ConstraintUsage, lower=1, upper=1)
SatisfyRequirementUsage.satisfyingFeature = derivedunion("satisfyingFeature", _Feature, lower=1, upper=1)
SatisfyRequirementUsage.satisfiedRequirement = redefine(SatisfyRequirementUsage, "satisfiedRequirement", RequirementUsage, AssertConstraintUsage.assertedConstraint)
CalculationDefinition.calculation = derivedunion("calculation", CalculationUsage)
ActionDefinition.action.add(CalculationDefinition.calculation)  # type: ignore[attr-defined]
_Function.expression.add(CalculationDefinition.calculation)  # type: ignore[attr-defined]
CalculationUsage.calculationDefinition = redefine(CalculationUsage, "calculationDefinition", _Function, _Expression.function)
ItemUsage.itemDefinition = derivedunion("itemDefinition", _Structure)
OccurrenceUsage.occurrenceDefinition.add(ItemUsage.itemDefinition)  # type: ignore[attr-defined]
MetadataUsage.metadataDefinition = redefine(MetadataUsage, "metadataDefinition", _Metaclass, ItemUsage.itemDefinition)
CaseUsage.objectiveRequirement = derivedunion("objectiveRequirement", RequirementUsage, upper=1)
CaseUsage.subjectParameter = derivedunion("subjectParameter", Usage, lower=1, upper=1)
CaseUsage.actorParameter = derivedunion("actorParameter", PartUsage)
CaseUsage.caseDefinition = redefine(CaseUsage, "caseDefinition", CaseDefinition, CalculationUsage.calculationDefinition)
Usage.usage.add(CaseUsage.objectiveRequirement)  # type: ignore[attr-defined]
_Step.parameter.add(CaseUsage.subjectParameter)  # type: ignore[attr-defined]
Usage.usage.add(CaseUsage.subjectParameter)  # type: ignore[attr-defined]
_Step.parameter.add(CaseUsage.actorParameter)  # type: ignore[attr-defined]
Usage.usage.add(CaseUsage.actorParameter)  # type: ignore[attr-defined]
CaseDefinition.objectiveRequirement = derivedunion("objectiveRequirement", RequirementUsage, upper=1)
CaseDefinition.subjectParameter = derivedunion("subjectParameter", Usage, lower=1, upper=1)
CaseDefinition.actorParameter = derivedunion("actorParameter", PartUsage)
Definition.usage.add(CaseDefinition.objectiveRequirement)  # type: ignore[attr-defined]
_Behavior.parameter.add(CaseDefinition.subjectParameter)  # type: ignore[attr-defined]
Definition.usage.add(CaseDefinition.subjectParameter)  # type: ignore[attr-defined]
_Behavior.parameter.add(CaseDefinition.actorParameter)  # type: ignore[attr-defined]
Definition.usage.add(CaseDefinition.actorParameter)  # type: ignore[attr-defined]
ObjectiveMembership.ownedObjectiveRequirement = redefine(ObjectiveMembership, "ownedObjectiveRequirement", RequirementUsage, _FeatureMembership.ownedMemberFeature)
TransitionFeatureMembership.transitionFeature = redefine(TransitionFeatureMembership, "transitionFeature", _Step, _FeatureMembership.ownedMemberFeature)
EventOccurrenceUsage.eventOccurrence = derivedunion("eventOccurrence", OccurrenceUsage, lower=1, upper=1)
PerformActionUsage.performedAction = redefine(PerformActionUsage, "performedAction", ActionUsage, EventOccurrenceUsage.eventOccurrence)
StateUsage.entryAction = derivedunion("entryAction", ActionUsage, upper=1)
StateUsage.doAction = derivedunion("doAction", ActionUsage, upper=1)
StateUsage.exitAction = derivedunion("exitAction", ActionUsage, upper=1)
StateUsage.stateDefinition = redefine(StateUsage, "stateDefinition", _Behavior, ActionUsage.actionDefinition)
ExhibitStateUsage.exhibitedState = redefine(ExhibitStateUsage, "exhibitedState", StateUsage, PerformActionUsage.performedAction)
StateSubactionMembership.action = redefine(StateSubactionMembership, "action", ActionUsage, _FeatureMembership.ownedMemberFeature)
StateDefinition.state = derivedunion("state", StateUsage)
StateDefinition.entryAction = derivedunion("entryAction", ActionUsage, upper=1)
StateDefinition.doAction = derivedunion("doAction", ActionUsage, upper=1)
StateDefinition.exitAction = derivedunion("exitAction", ActionUsage, upper=1)
ActionDefinition.action.add(StateDefinition.state)  # type: ignore[attr-defined]
TransitionUsage.source = derivedunion("source", ActionUsage, lower=1, upper=1)
TransitionUsage.target = derivedunion("target", ActionUsage, lower=1, upper=1)
TransitionUsage.triggerAction = derivedunion("triggerAction", AcceptActionUsage)
TransitionUsage.guardExpression = derivedunion("guardExpression", _Expression)
TransitionUsage.effectAction = derivedunion("effectAction", ActionUsage)
TransitionUsage.succession = derivedunion("succession", _Succession, lower=1, upper=1)
_Type.ownedFeature.add(TransitionUsage.triggerAction)  # type: ignore[attr-defined]
_Type.ownedFeature.add(TransitionUsage.guardExpression)  # type: ignore[attr-defined]
_Type.feature.add(TransitionUsage.effectAction)  # type: ignore[attr-defined]
_Namespace.ownedMember.add(TransitionUsage.succession)  # type: ignore[attr-defined]
UseCaseUsage.includedUseCase = derivedunion("includedUseCase", UseCaseUsage)
UseCaseUsage.useCaseDefinition = redefine(UseCaseUsage, "useCaseDefinition", UseCaseDefinition, CaseUsage.caseDefinition)
IncludeUseCaseUsage.useCaseIncluded = redefine(IncludeUseCaseUsage, "useCaseIncluded", UseCaseUsage, PerformActionUsage.performedAction)
UseCaseDefinition.includedUseCase = derivedunion("includedUseCase", UseCaseUsage)
AssignmentActionUsage.targetArgument = derivedunion("targetArgument", _Expression, upper=1)
AssignmentActionUsage.valueExpression = derivedunion("valueExpression", _Expression, upper=1)
AssignmentActionUsage.referent = derivedunion("referent", _Feature, lower=1, upper=1)
_Namespace.member.add(AssignmentActionUsage.referent)  # type: ignore[attr-defined]
LoopActionUsage.bodyAction = derivedunion("bodyAction", ActionUsage, lower=1, upper=1)
ForLoopActionUsage.seqArgument = derivedunion("seqArgument", _Expression, lower=1, upper=1)
ForLoopActionUsage.loopVariable = derivedunion("loopVariable", ReferenceUsage, lower=1, upper=1)
TerminateActionUsage.terminatedOccurrenceArgument = derivedunion("terminatedOccurrenceArgument", _Expression, upper=1)
AcceptActionUsage.receiverArgument = derivedunion("receiverArgument", _Expression, upper=1)
AcceptActionUsage.payloadParameter = derivedunion("payloadParameter", ReferenceUsage, lower=1, upper=1)
AcceptActionUsage.payloadArgument = derivedunion("payloadArgument", _Expression, upper=1)
Usage.nestedReference.add(AcceptActionUsage.payloadParameter)  # type: ignore[attr-defined]
_Step.parameter.add(AcceptActionUsage.payloadParameter)  # type: ignore[attr-defined]
WhileLoopActionUsage.whileArgument = derivedunion("whileArgument", _Expression, lower=1, upper=1)
WhileLoopActionUsage.untilArgument = derivedunion("untilArgument", _Expression, upper=1)
SendActionUsage.receiverArgument = derivedunion("receiverArgument", _Expression, upper=1)
SendActionUsage.payloadArgument = derivedunion("payloadArgument", _Expression, lower=1, upper=1)
SendActionUsage.senderArgument = derivedunion("senderArgument", _Expression, upper=1)
IfActionUsage.elseAction = derivedunion("elseAction", ActionUsage, upper=1)
IfActionUsage.thenAction = derivedunion("thenAction", ActionUsage, lower=1, upper=1)
IfActionUsage.ifArgument = derivedunion("ifArgument", _Expression, lower=1, upper=1)
VariantMembership.ownedVariantUsage = redefine(VariantMembership, "ownedVariantUsage", Usage, _OwningMembership.ownedMemberElement)
PartUsage.partDefinition = derivedunion("partDefinition", PartDefinition)
ItemUsage.itemDefinition.add(PartUsage.partDefinition)  # type: ignore[attr-defined]
AnalysisCaseUsage.resultExpression = derivedunion("resultExpression", _Expression, upper=1)
AnalysisCaseUsage.analysisCaseDefinition = redefine(AnalysisCaseUsage, "analysisCaseDefinition", AnalysisCaseDefinition, CaseUsage.caseDefinition)
_Type.ownedFeature.add(AnalysisCaseUsage.resultExpression)  # type: ignore[attr-defined]
AnalysisCaseDefinition.resultExpression = derivedunion("resultExpression", _Expression, upper=1)
_Function.expression.add(AnalysisCaseDefinition.resultExpression)  # type: ignore[attr-defined]
_Type.ownedFeature.add(AnalysisCaseDefinition.resultExpression)  # type: ignore[attr-defined]
PortConjugation.originalPortDefinition = redefine(PortConjugation, "originalPortDefinition", PortDefinition, _Conjugation.originalType)
PortConjugation.conjugatedPortDefinition = redefine(PortConjugation, "conjugatedPortDefinition", ConjugatedPortDefinition, _Conjugation.owningType, opposite="ownedPortConjugator")
PortDefinition.conjugatedPortDefinition = derivedunion("conjugatedPortDefinition", ConjugatedPortDefinition, upper=1)
_Namespace.ownedMember.add(PortDefinition.conjugatedPortDefinition)  # type: ignore[attr-defined]
ConjugatedPortDefinition.originalPortDefinition = redefine(ConjugatedPortDefinition, "originalPortDefinition", PortDefinition, _Element.owningNamespace, opposite="conjugatedPortDefinition")
ConjugatedPortDefinition.ownedPortConjugator = redefine(ConjugatedPortDefinition, "ownedPortConjugator", PortConjugation, _Type.ownedConjugator, opposite="conjugatedPortDefinition")
ConjugatedPortTyping.portDefinition = derivedunion("portDefinition", PortDefinition, lower=1, upper=1)
ConjugatedPortTyping.conjugatedPortDefinition = redefine(ConjugatedPortTyping, "conjugatedPortDefinition", ConjugatedPortDefinition, _FeatureTyping.type)
PortUsage.portDefinition = redefine(PortUsage, "portDefinition", PortDefinition, OccurrenceUsage.occurrenceDefinition)
ViewUsage.satisfiedViewpoint = derivedunion("satisfiedViewpoint", ViewpointUsage)
ViewUsage.exposedElement = derivedunion("exposedElement", _Element)
ViewUsage.viewRendering = derivedunion("viewRendering", RenderingUsage, upper=1)
ViewUsage.viewCondition = derivedunion("viewCondition", _Expression)
ViewUsage.viewDefinition = redefine(ViewUsage, "viewDefinition", ViewDefinition, PartUsage.partDefinition)
Usage.nestedRequirement.add(ViewUsage.satisfiedViewpoint)  # type: ignore[attr-defined]
_Namespace.member.add(ViewUsage.exposedElement)  # type: ignore[attr-defined]
_Namespace.ownedMember.add(ViewUsage.viewCondition)  # type: ignore[attr-defined]
ViewDefinition.view = derivedunion("view", ViewUsage)
ViewDefinition.satisfiedViewpoint = derivedunion("satisfiedViewpoint", ViewpointUsage)
ViewDefinition.viewRendering = derivedunion("viewRendering", RenderingUsage, upper=1)
ViewDefinition.viewCondition = derivedunion("viewCondition", _Expression)
Definition.usage.add(ViewDefinition.view)  # type: ignore[attr-defined]
Definition.ownedRequirement.add(ViewDefinition.satisfiedViewpoint)  # type: ignore[attr-defined]
_Namespace.ownedMember.add(ViewDefinition.viewCondition)  # type: ignore[attr-defined]
RenderingUsage.renderingDefinition = redefine(RenderingUsage, "renderingDefinition", RenderingDefinition, PartUsage.partDefinition)
ViewpointDefinition.viewpointStakeholder = derivedunion("viewpointStakeholder", PartUsage)
RenderingDefinition.rendering = derivedunion("rendering", RenderingUsage)
Definition.usage.add(RenderingDefinition.rendering)  # type: ignore[attr-defined]
ViewRenderingMembership.referencedRendering = derivedunion("referencedRendering", RenderingUsage, lower=1, upper=1)
ViewRenderingMembership.ownedRendering = redefine(ViewRenderingMembership, "ownedRendering", RenderingUsage, _FeatureMembership.ownedMemberFeature)
ViewpointUsage.viewpointStakeholder = derivedunion("viewpointStakeholder", PartUsage)
ViewpointUsage.viewpointDefinition = redefine(ViewpointUsage, "viewpointDefinition", ViewpointDefinition, RequirementUsage.requirementDefinition)
ConnectionUsage.connectionDefinition = redefine(ConnectionUsage, "connectionDefinition", _AssociationStructure, _Connector.association)
ItemUsage.itemDefinition.add(ConnectionUsage.connectionDefinition)  # type: ignore[attr-defined]
ConnectionDefinition.connectionEnd = redefine(ConnectionDefinition, "connectionEnd", Usage, _Association.associationEnd)
InterfaceUsage.interfaceDefinition = redefine(InterfaceUsage, "interfaceDefinition", InterfaceDefinition, ConnectionUsage.connectionDefinition)
InterfaceDefinition.interfaceEnd = redefine(InterfaceDefinition, "interfaceEnd", PortUsage, ConnectionDefinition.connectionEnd)
AllocationDefinition.allocation = derivedunion("allocation", AllocationUsage)
Definition.usage.add(AllocationDefinition.allocation)  # type: ignore[attr-defined]
AllocationUsage.allocationDefinition = redefine(AllocationUsage, "allocationDefinition", AllocationDefinition, ConnectionUsage.connectionDefinition)
RequirementVerificationMembership.ownedRequirement = redefine(RequirementVerificationMembership, "ownedRequirement", RequirementUsage, RequirementConstraintMembership.ownedConstraint)
RequirementVerificationMembership.verifiedRequirement = redefine(RequirementVerificationMembership, "verifiedRequirement", RequirementUsage, RequirementConstraintMembership.referencedConstraint)
VerificationCaseDefinition.verifiedRequirement = derivedunion("verifiedRequirement", RequirementUsage)
VerificationCaseUsage.verificationCaseDefinition = derivedunion("verificationCaseDefinition", VerificationCaseDefinition, upper=1)
VerificationCaseUsage.verifiedRequirement = derivedunion("verifiedRequirement", RequirementUsage)
CaseUsage.caseDefinition.add(VerificationCaseUsage.verificationCaseDefinition)  # type: ignore[attr-defined]
