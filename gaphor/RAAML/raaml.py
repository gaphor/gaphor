# This file is generated by coder.py. DO NOT EDIT!
# ruff: noqa: F401, E402, F811
# fmt: off

from __future__ import annotations

import enum

from gaphor.core.modeling.properties import (
    association,
    attribute as _attribute,
    derived,
    derivedunion,
    enumeration as _enumeration,
    redefine,
    relation_many,
    relation_one,
)


from gaphor.UML.uml import Class as _Class
from gaphor.SysML.sysml import Block as _Block
from gaphor.SysML.sysml import DirectedRelationshipPropertyPath as _DirectedRelationshipPropertyPath
from gaphor.UML.uml import Dependency as _Dependency
from gaphor.UML.uml import State as _State
from gaphor.UML.uml import Property as _Property
from gaphor.UML.uml import DataType as _DataType
from gaphor.UML.uml import Diagram as _Diagram

class Situation(_Block, _Class):
    pass


class RelevantTo(_Dependency, _DirectedRelationshipPropertyPath):
    pass


class ControllingMeasure(_Dependency, _DirectedRelationshipPropertyPath):
    affects: relation_many[_Property]


class Violates(_Dependency):
    pass


class AnySituation(Situation):
    from_: relation_many[AnySituation]
    to: relation_many[AnySituation]


class AbstractEvent(AnySituation):
    pass


class AbstractCause(AbstractEvent):
    error: relation_many[DysfunctionalEvent]


class DysfunctionalEvent(AbstractEvent):
    error: relation_many[DysfunctionalEvent]
    failure: relation_many[DysfunctionalEvent]
    fault: relation_many[AbstractCause]
    fromError: relation_many[DysfunctionalEvent]
    toError: relation_many[DysfunctionalEvent]


class AbstractFailureMode(DysfunctionalEvent):
    pass


class AbstractEffect(DysfunctionalEvent):
    pass


class Effect(AbstractEffect):
    pass


class HarmPotential(AnySituation):
    pass


class Hazard(HarmPotential):
    pass


class Scenario(AnySituation):
    scenarioStep: relation_many[AnySituation]


class AbstractRisk(Scenario):
    harm: relation_many[AbstractEffect]
    harmPotential: relation_many[HarmPotential]
    trigger: relation_many[AbstractEvent]


class Detection(ControllingMeasure, _Dependency):
    pass


class Prevention(ControllingMeasure, _Dependency):
    pass


class Mitigation(ControllingMeasure, _Dependency):
    pass


class Recommendation(ControllingMeasure, _Dependency):
    pass


class FailureState(_State):
    pass


class FTAElement(DysfunctionalEvent):
    pass


class FTATree(FTAElement, Scenario):
    topEvent: relation_one[EventDef]


class Tree(_Class):
    pass


class EventDef(FTAElement):
    pass


class Event(_Class):
    pass


class Gate(_Class):
    pass


class DormantEvent(_Class):
    pass


class BasicEvent(_Class):
    pass


class ConditionalEvent(_Class):
    pass


class ZeroEvent(_Class):
    pass


class HouseEvent(_Class):
    pass


class AND(_Class):
    pass


class OR(_Class):
    pass


class SEQ(_Class):
    pass


class XOR(_Class):
    pass


class INHIBIT(_Class):
    pass


class MAJORITY_VOTE(_Class):
    pass


class NOT(_Class):
    pass


class IntermediateEvent(_Class):
    pass


class TopEvent(_Class):
    pass


class TransferIn(_Property):
    pass


class TransferOut(_Class):
    pass


class BasicEventDef(EventDef):
    pass


class IntermediateEventDef(EventDef):
    pass


class TopEventDef(EventDef):
    pass


class ConditionalEventDef(EventDef):
    pass


class DormantEventDef(EventDef):
    pass


class UndevelopedEventDef(EventDef):
    pass


class HouseEventDef(EventDef):
    pass


class ZeroEventDef(EventDef):
    pass


class Undeveloped(_Class):
    pass


class GateDef():
    pass


class UndesiredState(DysfunctionalEvent):
    pass


class Cause(AbstractCause):
    pass


class MAJORITY_VOTE_Def(GateDef):
    pass


class NOT_Def(GateDef):
    pass


class OR_Def(GateDef):
    pass


class SEQ_Def(GateDef):
    pass


class XOR_Def(GateDef):
    pass


class AND_Def(GateDef):
    pass


class INHIBIT_Def(GateDef):
    condition: relation_many[EventDef]


class UnsafeControlAction_Def(Situation):
    Context: relation_one[AbstractOperationalSituation]
    harmPotential: relation_many[HarmPotential]


class Actuator(_Property):
    pass


class Signal():
    pass


class ControlAction(Signal, _Class, _DataType):
    pass


class ControlStructure(_Block, _Class):
    pass


class ControlledProcess(_Property):
    pass


class Controller(_Property):
    pass


class Feedback(Signal, _Class, _DataType):
    pass


class Sensor(_Property):
    pass


class Early_UCA(UnsafeControlAction_Def):
    pass


class FailureMode():
    pass


class UnsafeControlAction(FailureMode, _Class):
    pass


class OperationalSituation(_Class):
    pass


class OperationalCondition(Situation):
    pass


class AbstractOperationalSituation(OperationalCondition):
    conditions: relation_many[OperationalCondition]


class Factor(AbstractCause):
    pass


class ProcessModel():
    pass


class InadequateControlExecution(ProcessModel):
    pass


class InadequateControllerDecisions(ProcessModel):
    pass


class InadequateFeedbackAndInputs(ProcessModel):
    pass


class InadequateProcessBehavior(ProcessModel):
    pass


class Late_UCA(UnsafeControlAction_Def):
    pass


class Loss(AbstractEffect):
    pass


class LossScenario(Scenario):
    Factor: relation_many[Factor]
    processModel: relation_many[ProcessModel]
    unsafeControlAction: relation_many[UnsafeControlAction_Def]


class NotProvided(UnsafeControlAction_Def):
    pass


class OutOfSequence(UnsafeControlAction_Def):
    pass


class Provided(UnsafeControlAction_Def):
    pass


class RiskRealization(AbstractRisk):
    pass


class Threat(Factor):
    pass


class AnyMalfunction(UndesiredState):
    pass


class Less(AnyMalfunction):
    pass


class MalfunctioningBehavior(FailureMode, _Class):
    pass


class AccidentScenario(DysfunctionalEvent, Scenario):
    malfunctioningBehavior: relation_one[AnyMalfunction]
    situation: relation_many[AbstractOperationalSituation]


class More(AnyMalfunction):
    pass


class No(AnyMalfunction):
    pass


class Intermittent(AnyMalfunction):
    pass


class Unintended(AnyMalfunction):
    pass


class Early(AnyMalfunction):
    pass


class Late(AnyMalfunction):
    pass


class Inverted(AnyMalfunction):
    pass


class FTADiagram(_Diagram):
    diagramType: _attribute[str] = _attribute("diagramType", str, default="fta")


class STPADiagram(_Diagram):
    diagramType: _attribute[str] = _attribute("diagramType", str, default="stpa")



ControllingMeasure.affects = association("affects", _Property, composite=True)
AnySituation.to = association("to", AnySituation, opposite="from_")
AnySituation.from_ = association("from_", AnySituation, opposite="to")
AbstractCause.error = association("error", DysfunctionalEvent, opposite="fault")
DysfunctionalEvent.fault = association("fault", AbstractCause, opposite="error")
DysfunctionalEvent.toError = association("toError", DysfunctionalEvent, opposite="fromError")
DysfunctionalEvent.fromError = association("fromError", DysfunctionalEvent, opposite="toError")
DysfunctionalEvent.error = association("error", DysfunctionalEvent, opposite="failure")
DysfunctionalEvent.failure = association("failure", DysfunctionalEvent, opposite="error")
Scenario.scenarioStep = association("scenarioStep", AnySituation, composite=True)
AbstractRisk.trigger = association("trigger", AbstractEvent, composite=True)
AbstractRisk.harmPotential = association("harmPotential", HarmPotential, composite=True)
AbstractRisk.harm = association("harm", AbstractEffect, composite=True)
FTATree.topEvent = association("topEvent", EventDef, upper=1, composite=True)
INHIBIT_Def.condition = association("condition", EventDef)
UnsafeControlAction_Def.Context = association("Context", AbstractOperationalSituation, upper=1)
UnsafeControlAction_Def.harmPotential = association("harmPotential", HarmPotential)
AbstractOperationalSituation.conditions = association("conditions", OperationalCondition, composite=True)
LossScenario.unsafeControlAction = association("unsafeControlAction", UnsafeControlAction_Def)
LossScenario.processModel = association("processModel", ProcessModel, composite=True)
LossScenario.Factor = association("Factor", Factor, composite=True)
AccidentScenario.situation = association("situation", AbstractOperationalSituation, lower=1, composite=True)
AccidentScenario.malfunctioningBehavior = association("malfunctioningBehavior", AnyMalfunction, upper=1, composite=True)
